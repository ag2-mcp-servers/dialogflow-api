# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:53:47+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Result(Enum):
    AGGREGATED_TEST_RESULT_UNSPECIFIED = 'AGGREGATED_TEST_RESULT_UNSPECIFIED'
    PASSED = 'PASSED'
    FAILED = 'FAILED'


class GoogleCloudDialogflowCxV3ContinuousTestResult(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The resource name for the continuous test result. Format: `projects//locations//agents//environments//continuousTestResults/`.',
    )
    result: Optional[Result] = Field(
        None,
        description='The result of this continuous test run, i.e. whether all the tests in this continuous test run pass or not.',
    )
    runTime: Optional[str] = Field(
        None, description='Time when the continuous testing run starts.'
    )
    testCaseResults: Optional[List[str]] = Field(
        None,
        description='A list of individual test case results names in this continuous test run.',
    )


class GoogleCloudDialogflowCxV3CreateVersionOperationMetadata(BaseModel):
    version: Optional[str] = Field(
        None,
        description='Name of the created version. Format: `projects//locations//agents//flows//versions/`.',
    )


class GoogleCloudDialogflowCxV3DtmfInput(BaseModel):
    digits: Optional[str] = Field(None, description='The dtmf digits.')
    finishDigit: Optional[str] = Field(None, description='The finish digit (if any).')


class GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig(BaseModel):
    enableContinuousRun: Optional[bool] = Field(
        None,
        description='Whether to run test cases in TestCasesConfig.test_cases periodically. Default false. If set to true, run once a day.',
    )
    enablePredeploymentRun: Optional[bool] = Field(
        None,
        description='Whether to run test cases in TestCasesConfig.test_cases before deploying a flow version to the environment. Default false.',
    )
    testCases: Optional[List[str]] = Field(
        None,
        description='A list of test case names to run. They should be under the same agent. Format of each test case name: `projects//locations/ /agents//testCases/`',
    )


class GoogleCloudDialogflowCxV3EnvironmentVersionConfig(BaseModel):
    version: Optional[str] = Field(
        None,
        description='Required. Format: projects//locations//agents//flows//versions/.',
    )


class GoogleCloudDialogflowCxV3EventInput(BaseModel):
    event: Optional[str] = Field(None, description='Name of the event.')


class GoogleCloudDialogflowCxV3ExportAgentResponse(BaseModel):
    agentContent: Optional[str] = Field(
        None, description='Uncompressed raw byte content for agent.'
    )
    agentUri: Optional[str] = Field(
        None,
        description='The URI to a file containing the exported agent. This field is populated only if `agent_uri` is specified in ExportAgentRequest.',
    )


class GoogleCloudDialogflowCxV3ExportFlowResponse(BaseModel):
    flowContent: Optional[str] = Field(
        None, description='Uncompressed raw byte content for flow.'
    )
    flowUri: Optional[str] = Field(
        None,
        description='The URI to a file containing the exported flow. This field is populated only if `flow_uri` is specified in ExportFlowRequest.',
    )


class GoogleCloudDialogflowCxV3ExportTestCasesMetadata(BaseModel):
    pass


class GoogleCloudDialogflowCxV3ExportTestCasesResponse(BaseModel):
    content: Optional[str] = Field(
        None, description='Uncompressed raw byte content for test cases.'
    )
    gcsUri: Optional[str] = Field(
        None,
        description='The URI to a file containing the exported test cases. This field is populated only if `gcs_uri` is specified in ExportTestCasesRequest.',
    )


class GoogleCloudDialogflowCxV3FulfillmentSetParameterAction(BaseModel):
    parameter: Optional[str] = Field(None, description='Display name of the parameter.')
    value: Optional[Any] = Field(
        None,
        description='The new value of the parameter. A null value clears the parameter.',
    )


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    DONE = 'DONE'


class GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata(BaseModel):
    state: Optional[State] = Field(
        None, description='Required. Output only. The current state of this operation.'
    )


class GoogleCloudDialogflowCxV3ImportDocumentsOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowCxV3ImportFlowResponse(BaseModel):
    flow: Optional[str] = Field(
        None,
        description='The unique identifier of the new flow. Format: `projects//locations//agents//flows/`.',
    )


class GoogleCloudDialogflowCxV3ImportTestCasesResponse(BaseModel):
    names: Optional[List[str]] = Field(
        None,
        description='The unique identifiers of the new test cases. Format: `projects//locations//agents//testCases/`.',
    )


class AudioEncoding(Enum):
    AUDIO_ENCODING_UNSPECIFIED = 'AUDIO_ENCODING_UNSPECIFIED'
    AUDIO_ENCODING_LINEAR_16 = 'AUDIO_ENCODING_LINEAR_16'
    AUDIO_ENCODING_FLAC = 'AUDIO_ENCODING_FLAC'
    AUDIO_ENCODING_MULAW = 'AUDIO_ENCODING_MULAW'
    AUDIO_ENCODING_AMR = 'AUDIO_ENCODING_AMR'
    AUDIO_ENCODING_AMR_WB = 'AUDIO_ENCODING_AMR_WB'
    AUDIO_ENCODING_OGG_OPUS = 'AUDIO_ENCODING_OGG_OPUS'
    AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE = 'AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE'


class ModelVariant(Enum):
    SPEECH_MODEL_VARIANT_UNSPECIFIED = 'SPEECH_MODEL_VARIANT_UNSPECIFIED'
    USE_BEST_AVAILABLE = 'USE_BEST_AVAILABLE'
    USE_STANDARD = 'USE_STANDARD'
    USE_ENHANCED = 'USE_ENHANCED'


class GoogleCloudDialogflowCxV3InputAudioConfig(BaseModel):
    audioEncoding: Optional[AudioEncoding] = Field(
        None, description='Required. Audio encoding of the audio content to process.'
    )
    enableWordInfo: Optional[bool] = Field(
        None,
        description="Optional. If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information.",
    )
    model: Optional[str] = Field(
        None,
        description='Optional. Which Speech model to select for the given request. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then we auto-select a model based on the parameters in the InputAudioConfig. If enhanced speech model is enabled for the agent and an enhanced version of the specified model for the language does not exist, then the speech is recognized using the standard version of the specified model. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model) for more details. If you specify a model, the following models typically have the best performance: - phone_call (best for Agent Assist and telephony) - latest_short (best for Dialogflow non-telephony) - command_and_search (best for very short utterances and commands)',
    )
    modelVariant: Optional[ModelVariant] = Field(
        None, description='Optional. Which variant of the Speech model to use.'
    )
    phraseHints: Optional[List[str]] = Field(
        None,
        description='Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details.',
    )
    sampleRateHertz: Optional[int] = Field(
        None,
        description='Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details.',
    )
    singleUtterance: Optional[bool] = Field(
        None,
        description="Optional. If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods.",
    )


class GoogleCloudDialogflowCxV3IntentInput(BaseModel):
    intent: Optional[str] = Field(
        None,
        description='Required. The unique identifier of the intent. Format: `projects//locations//agents//intents/`.',
    )


class GoogleCloudDialogflowCxV3IntentParameter(BaseModel):
    entityType: Optional[str] = Field(
        None,
        description='Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types.',
    )
    id: Optional[str] = Field(
        None,
        description='Required. The unique identifier of the parameter. This field is used by training phrases to annotate their parts.',
    )
    isList: Optional[bool] = Field(
        None, description='Indicates whether the parameter represents a list of values.'
    )
    redact: Optional[bool] = Field(
        None,
        description='Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.',
    )


class GoogleCloudDialogflowCxV3IntentTrainingPhrasePart(BaseModel):
    parameterId: Optional[str] = Field(
        None,
        description='The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase.',
    )
    text: Optional[str] = Field(None, description='Required. The text for this part.')


class State1(Enum):
    PARAMETER_STATE_UNSPECIFIED = 'PARAMETER_STATE_UNSPECIFIED'
    EMPTY = 'EMPTY'
    INVALID = 'INVALID'
    FILLED = 'FILLED'


class GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfo(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='Always present for WebhookRequest. Required for WebhookResponse. The human-readable name of the parameter, unique within the form. This field cannot be modified by the webhook.',
    )
    justCollected: Optional[bool] = Field(
        None,
        description='Optional for WebhookRequest. Ignored for WebhookResponse. Indicates if the parameter value was just collected on the last conversation turn.',
    )
    required: Optional[bool] = Field(
        None,
        description='Optional for both WebhookRequest and WebhookResponse. Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes.',
    )
    state: Optional[State1] = Field(
        None,
        description='Always present for WebhookRequest. Required for WebhookResponse. The state of the parameter. This field can be set to INVALID by the webhook to invalidate the parameter; other values set by the webhook will be ignored.',
    )
    value: Optional[Any] = Field(
        None,
        description='Optional for both WebhookRequest and WebhookResponse. The value of the parameter. This field can be set by the webhook to change the parameter value.',
    )


class GoogleCloudDialogflowCxV3ReloadDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowCxV3ResponseMessageConversationSuccess(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Custom metadata. Dialogflow doesn't impose any structure on this.",
    )


class GoogleCloudDialogflowCxV3ResponseMessageEndInteraction(BaseModel):
    pass


class GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoff(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Custom metadata for your handoff procedure. Dialogflow doesn't impose any structure on this.",
    )


class GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegment(BaseModel):
    allowPlaybackInterruption: Optional[bool] = Field(
        None,
        description="Output only. Whether the playback of this segment can be interrupted by the end user's speech and the client should then start the next Dialogflow request.",
    )
    audio: Optional[str] = Field(
        None,
        description="Raw audio synthesized from the Dialogflow agent's response using the output config specified in the request.",
    )
    uri: Optional[str] = Field(
        None,
        description='Client-specific URI that points to an audio clip accessible to the client. Dialogflow does not impose any validation on it.',
    )


class GoogleCloudDialogflowCxV3ResponseMessageOutputAudioText(BaseModel):
    allowPlaybackInterruption: Optional[bool] = Field(
        None,
        description="Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    ssml: Optional[str] = Field(
        None,
        description='The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml).',
    )
    text: Optional[str] = Field(None, description='The raw text to be synthesized.')


class GoogleCloudDialogflowCxV3ResponseMessagePlayAudio(BaseModel):
    allowPlaybackInterruption: Optional[bool] = Field(
        None,
        description="Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    audioUri: Optional[str] = Field(
        None,
        description='Required. URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.',
    )


class GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCall(BaseModel):
    phoneNumber: Optional[str] = Field(
        None,
        description='Transfer the call to a phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164).',
    )


class GoogleCloudDialogflowCxV3ResponseMessageText(BaseModel):
    allowPlaybackInterruption: Optional[bool] = Field(
        None,
        description="Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    text: Optional[List[str]] = Field(
        None, description='Required. A collection of text responses.'
    )


class GoogleCloudDialogflowCxV3RunContinuousTestResponse(BaseModel):
    continuousTestResult: Optional[GoogleCloudDialogflowCxV3ContinuousTestResult] = (
        Field(None, description='The result for a continuous test run.')
    )


class GoogleCloudDialogflowCxV3RunTestCaseMetadata(BaseModel):
    pass


class GoogleCloudDialogflowCxV3SessionInfo(BaseModel):
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional for WebhookRequest. Optional for WebhookResponse. All parameters collected from forms and intents during the session. Parameters can be created, updated, or removed by the webhook. To remove a parameter from the session, the webhook should explicitly set the parameter value to null in WebhookResponse. The map is keyed by parameters' display names.",
    )
    session: Optional[str] = Field(
        None,
        description='Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the session. This field can be used by the webhook to identify a session. Format: `projects//locations//agents//sessions/` or `projects//locations//agents//environments//sessions/` if environment is specified.',
    )


class TestResult(Enum):
    TEST_RESULT_UNSPECIFIED = 'TEST_RESULT_UNSPECIFIED'
    PASSED = 'PASSED'
    FAILED = 'FAILED'


class GoogleCloudDialogflowCxV3TestConfig(BaseModel):
    flow: Optional[str] = Field(
        None,
        description='Flow name to start the test case with. Format: `projects//locations//agents//flows/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow.',
    )
    page: Optional[str] = Field(
        None,
        description='The page to start the test case with. Format: `projects//locations//agents//flows//pages/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow.',
    )
    trackingParameters: Optional[List[str]] = Field(
        None,
        description='Session parameters to be compared when calculating differences.',
    )


class Type(Enum):
    DIFF_TYPE_UNSPECIFIED = 'DIFF_TYPE_UNSPECIFIED'
    INTENT = 'INTENT'
    PAGE = 'PAGE'
    PARAMETERS = 'PARAMETERS'
    UTTERANCE = 'UTTERANCE'


class GoogleCloudDialogflowCxV3TestRunDifference(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of the diff, showing the actual output vs expected output.',
    )
    type: Optional[Type] = Field(None, description='The type of diff.')


class GoogleCloudDialogflowCxV3TextInput(BaseModel):
    text: Optional[str] = Field(
        None,
        description='Required. The UTF-8 encoded natural language text to be processed. Text length must not exceed 256 characters.',
    )


class FailureReason(Enum):
    FAILURE_REASON_UNSPECIFIED = 'FAILURE_REASON_UNSPECIFIED'
    FAILED_INTENT = 'FAILED_INTENT'
    FAILED_WEBHOOK = 'FAILED_WEBHOOK'


class GoogleCloudDialogflowCxV3TurnSignals(BaseModel):
    agentEscalated: Optional[bool] = Field(
        None, description='Whether agent responded with LiveAgentHandoff fulfillment.'
    )
    dtmfUsed: Optional[bool] = Field(
        None, description='Whether user was using DTMF input.'
    )
    failureReasons: Optional[List[FailureReason]] = Field(
        None, description='Failure reasons of the turn.'
    )
    noMatch: Optional[bool] = Field(None, description='Whether NLU predicted NO_MATCH.')
    noUserInput: Optional[bool] = Field(
        None, description='Whether user provided no input.'
    )
    reachedEndPage: Optional[bool] = Field(
        None, description='Whether turn resulted in End Session page.'
    )
    userEscalated: Optional[bool] = Field(
        None, description='Whether user was specifically asking for a live agent.'
    )
    webhookStatuses: Optional[List[str]] = Field(
        None,
        description='Human-readable statuses of the webhooks triggered during this turn.',
    )


class GoogleCloudDialogflowCxV3UpdateDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowCxV3WebhookGenericWebService(BaseModel):
    allowedCaCerts: Optional[List[str]] = Field(
        None,
        description='Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google\'s default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with "subject alt name". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile <(printf "\\nsubjectAltName=\'DNS:www.example.com\'") ```',
    )
    password: Optional[str] = Field(
        None, description='The password for HTTP Basic authentication.'
    )
    requestHeaders: Optional[Dict[str, str]] = Field(
        None,
        description='The HTTP request headers to send together with webhook requests.',
    )
    uri: Optional[str] = Field(
        None,
        description='Required. The webhook URI for receiving POST requests. It must use https protocol.',
    )
    username: Optional[str] = Field(
        None, description='The user name for HTTP Basic authentication.'
    )


class GoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfo(BaseModel):
    tag: Optional[str] = Field(
        None,
        description='Always present. The value of the Fulfillment.tag field will be populated in this field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes.',
    )


class GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValue(BaseModel):
    originalValue: Optional[str] = Field(
        None,
        description='Always present. Original text value extracted from user utterance.',
    )
    resolvedValue: Optional[Any] = Field(
        None,
        description='Always present. Structured value for the parameter extracted from user utterance.',
    )


class GoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResult(BaseModel):
    magnitude: Optional[float] = Field(
        None,
        description='A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative).',
    )
    score: Optional[float] = Field(
        None,
        description='Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).',
    )


class MergeBehavior(Enum):
    MERGE_BEHAVIOR_UNSPECIFIED = 'MERGE_BEHAVIOR_UNSPECIFIED'
    APPEND = 'APPEND'
    REPLACE = 'REPLACE'


class GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig(BaseModel):
    genericWebService: Optional[GoogleCloudDialogflowCxV3WebhookGenericWebService] = (
        Field(None, description='Generic Service configuration of this webhook.')
    )
    service: Optional[str] = Field(
        None,
        description='Required. The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent.',
    )


class GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettings(BaseModel):
    enableInteractionLogging: Optional[bool] = Field(
        None, description='If true, DF Interaction logging is currently enabled.'
    )
    enableStackdriverLogging: Optional[bool] = Field(
        None, description='If true, StackDriver logging is currently enabled.'
    )


class GoogleCloudDialogflowCxV3beta1BatchDeleteTestCasesRequest(BaseModel):
    names: Optional[List[str]] = Field(
        None,
        description='Required. Format of test case names: `projects//locations/ /agents//testCases/`.',
    )


class GoogleCloudDialogflowCxV3beta1BatchRunTestCasesRequest(BaseModel):
    environment: Optional[str] = Field(
        None,
        description='Optional. If not set, draft environment is assumed. Format: `projects//locations//agents//environments/`.',
    )
    testCases: Optional[List[str]] = Field(
        None, description='Required. Format: `projects//locations//agents//testCases/`.'
    )


class GoogleCloudDialogflowCxV3beta1Changelog(BaseModel):
    action: Optional[str] = Field(None, description='The action of the change.')
    createTime: Optional[str] = Field(None, description='The timestamp of the change.')
    displayName: Optional[str] = Field(
        None, description='The affected resource display name of the change.'
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the changelog. Format: `projects//locations//agents//changelogs/`.',
    )
    resource: Optional[str] = Field(
        None, description='The affected resource name of the change.'
    )
    type: Optional[str] = Field(None, description='The affected resource type.')
    userEmail: Optional[str] = Field(
        None, description='Email address of the authenticated user.'
    )


class GoogleCloudDialogflowCxV3beta1CompareVersionsRequest(BaseModel):
    languageCode: Optional[str] = Field(
        None,
        description="The language to compare the flow versions for. If not specified, the agent's default language is used. [Many languages](https://cloud.google.com/dialogflow/docs/reference/language) are supported. Note: languages must be enabled in the agent before they can be used.",
    )
    targetVersion: Optional[str] = Field(
        None,
        description='Required. Name of the target flow version to compare with the base version. Use version ID `0` to indicate the draft version of the specified flow. Format: `projects//locations//agents//flows//versions/`.',
    )


class GoogleCloudDialogflowCxV3beta1CompareVersionsResponse(BaseModel):
    baseVersionContentJson: Optional[str] = Field(
        None, description='JSON representation of the base version content.'
    )
    compareTime: Optional[str] = Field(
        None, description='The timestamp when the two version compares.'
    )
    targetVersionContentJson: Optional[str] = Field(
        None, description='JSON representation of the target version content.'
    )


class GoogleCloudDialogflowCxV3beta1ContinuousTestResult(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The resource name for the continuous test result. Format: `projects//locations//agents//environments//continuousTestResults/`.',
    )
    result: Optional[Result] = Field(
        None,
        description='The result of this continuous test run, i.e. whether all the tests in this continuous test run pass or not.',
    )
    runTime: Optional[str] = Field(
        None, description='Time when the continuous testing run starts.'
    )
    testCaseResults: Optional[List[str]] = Field(
        None,
        description='A list of individual test case results names in this continuous test run.',
    )


class GoogleCloudDialogflowCxV3beta1CreateVersionOperationMetadata(BaseModel):
    version: Optional[str] = Field(
        None,
        description='Name of the created version. Format: `projects//locations//agents//flows//versions/`.',
    )


class GoogleCloudDialogflowCxV3beta1DeployFlowRequest(BaseModel):
    flowVersion: Optional[str] = Field(
        None,
        description='Required. The flow version to deploy. Format: `projects//locations//agents// flows//versions/`.',
    )


class State2(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class GoogleCloudDialogflowCxV3beta1DeploymentResult(BaseModel):
    deploymentTestResults: Optional[List[str]] = Field(
        None,
        description='Results of test cases running before the deployment. Format: `projects//locations//agents//testCases//results/`.',
    )
    experiment: Optional[str] = Field(
        None,
        description='The name of the experiment triggered by this deployment. Format: projects//locations//agents//environments//experiments/.',
    )


class ResponseType(Enum):
    RESPONSE_TYPE_UNSPECIFIED = 'RESPONSE_TYPE_UNSPECIFIED'
    PARTIAL = 'PARTIAL'
    FINAL = 'FINAL'


class GoogleCloudDialogflowCxV3beta1DtmfInput(BaseModel):
    digits: Optional[str] = Field(None, description='The dtmf digits.')
    finishDigit: Optional[str] = Field(None, description='The finish digit (if any).')


class AutoExpansionMode(Enum):
    AUTO_EXPANSION_MODE_UNSPECIFIED = 'AUTO_EXPANSION_MODE_UNSPECIFIED'
    AUTO_EXPANSION_MODE_DEFAULT = 'AUTO_EXPANSION_MODE_DEFAULT'


class Kind(Enum):
    KIND_UNSPECIFIED = 'KIND_UNSPECIFIED'
    KIND_MAP = 'KIND_MAP'
    KIND_LIST = 'KIND_LIST'
    KIND_REGEXP = 'KIND_REGEXP'


class GoogleCloudDialogflowCxV3beta1EntityTypeEntity(BaseModel):
    synonyms: Optional[List[str]] = Field(
        None,
        description='Required. A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.',
    )
    value: Optional[str] = Field(
        None,
        description='Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A canonical value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).',
    )


class GoogleCloudDialogflowCxV3beta1EntityTypeExcludedPhrase(BaseModel):
    value: Optional[str] = Field(
        None, description='Required. The word or phrase to be excluded.'
    )


class GoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfig(BaseModel):
    enableContinuousRun: Optional[bool] = Field(
        None,
        description='Whether to run test cases in TestCasesConfig.test_cases periodically. Default false. If set to true, run once a day.',
    )
    enablePredeploymentRun: Optional[bool] = Field(
        None,
        description='Whether to run test cases in TestCasesConfig.test_cases before deploying a flow version to the environment. Default false.',
    )
    testCases: Optional[List[str]] = Field(
        None,
        description='A list of test case names to run. They should be under the same agent. Format of each test case name: `projects//locations/ /agents//testCases/`',
    )


class GoogleCloudDialogflowCxV3beta1EnvironmentVersionConfig(BaseModel):
    version: Optional[str] = Field(
        None,
        description='Required. Format: projects//locations//agents//flows//versions/.',
    )


class GoogleCloudDialogflowCxV3beta1EventInput(BaseModel):
    event: Optional[str] = Field(None, description='Name of the event.')


class State3(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    DRAFT = 'DRAFT'
    RUNNING = 'RUNNING'
    DONE = 'DONE'
    ROLLOUT_FAILED = 'ROLLOUT_FAILED'


class GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceInterval(BaseModel):
    confidenceLevel: Optional[float] = Field(
        None,
        description='The confidence level used to construct the interval, i.e. there is X% chance that the true value is within this interval.',
    )
    lowerBound: Optional[float] = Field(
        None, description='Lower bound of the interval.'
    )
    ratio: Optional[float] = Field(
        None,
        description="The percent change between an experiment metric's value and the value for its control.",
    )
    upperBound: Optional[float] = Field(
        None, description='Upper bound of the interval.'
    )


class CountType(Enum):
    COUNT_TYPE_UNSPECIFIED = 'COUNT_TYPE_UNSPECIFIED'
    TOTAL_NO_MATCH_COUNT = 'TOTAL_NO_MATCH_COUNT'
    TOTAL_TURN_COUNT = 'TOTAL_TURN_COUNT'
    AVERAGE_TURN_COUNT = 'AVERAGE_TURN_COUNT'


class Type1(Enum):
    METRIC_UNSPECIFIED = 'METRIC_UNSPECIFIED'
    CONTAINED_SESSION_NO_CALLBACK_RATE = 'CONTAINED_SESSION_NO_CALLBACK_RATE'
    LIVE_AGENT_HANDOFF_RATE = 'LIVE_AGENT_HANDOFF_RATE'
    CALLBACK_SESSION_RATE = 'CALLBACK_SESSION_RATE'
    ABANDONED_SESSION_RATE = 'ABANDONED_SESSION_RATE'
    SESSION_END_RATE = 'SESSION_END_RATE'


class GoogleCloudDialogflowCxV3beta1ExperimentResultMetric(BaseModel):
    confidenceInterval: Optional[
        GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceInterval
    ] = Field(
        None,
        description='The probability that the treatment is better than all other treatments in the experiment',
    )
    count: Optional[float] = Field(None, description='Count value of a metric.')
    countType: Optional[CountType] = Field(
        None,
        description='Count-based metric type. Only one of type or count_type is specified in each Metric.',
    )
    ratio: Optional[float] = Field(None, description='Ratio value of a metric.')
    type: Optional[Type1] = Field(
        None,
        description='Ratio-based metric type. Only one of type or count_type is specified in each Metric.',
    )


class GoogleCloudDialogflowCxV3beta1ExperimentResultVersionMetrics(BaseModel):
    metrics: Optional[List[GoogleCloudDialogflowCxV3beta1ExperimentResultMetric]] = (
        Field(
            None,
            description='The metrics and corresponding confidence intervals in the inference result.',
        )
    )
    sessionCount: Optional[int] = Field(
        None, description='Number of sessions that were allocated to this version.'
    )
    version: Optional[str] = Field(
        None,
        description='The name of the flow Version. Format: `projects//locations//agents//flows//versions/`.',
    )


class DataFormat(Enum):
    DATA_FORMAT_UNSPECIFIED = 'DATA_FORMAT_UNSPECIFIED'
    BLOB = 'BLOB'
    JSON_PACKAGE = 'JSON_PACKAGE'


class GoogleCloudDialogflowCxV3beta1ExportAgentRequest(BaseModel):
    agentUri: Optional[str] = Field(
        None,
        description="Optional. The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to export the agent to. The format of this URI must be `gs:///`. If left unspecified, the serialized agent is returned inline. Dialogflow performs a write operation for the Cloud Storage object on the caller's behalf, so your request authentication must have write permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).",
    )
    dataFormat: Optional[DataFormat] = Field(
        None,
        description='Optional. The data format of the exported agent. If not specified, `BLOB` is assumed.',
    )
    environment: Optional[str] = Field(
        None,
        description='Optional. Environment name. If not set, draft environment is assumed. Format: `projects//locations//agents//environments/`.',
    )


class GoogleCloudDialogflowCxV3beta1ExportAgentResponse(BaseModel):
    agentContent: Optional[str] = Field(
        None, description='Uncompressed raw byte content for agent.'
    )
    agentUri: Optional[str] = Field(
        None,
        description='The URI to a file containing the exported agent. This field is populated only if `agent_uri` is specified in ExportAgentRequest.',
    )


class GoogleCloudDialogflowCxV3beta1ExportFlowRequest(BaseModel):
    flowUri: Optional[str] = Field(
        None,
        description="Optional. The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to export the flow to. The format of this URI must be `gs:///`. If left unspecified, the serialized flow is returned inline. Dialogflow performs a write operation for the Cloud Storage object on the caller's behalf, so your request authentication must have write permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).",
    )
    includeReferencedFlows: Optional[bool] = Field(
        None,
        description='Optional. Whether to export flows referenced by the specified flow.',
    )


class GoogleCloudDialogflowCxV3beta1ExportFlowResponse(BaseModel):
    flowContent: Optional[str] = Field(
        None, description='Uncompressed raw byte content for flow.'
    )
    flowUri: Optional[str] = Field(
        None,
        description='The URI to a file containing the exported flow. This field is populated only if `flow_uri` is specified in ExportFlowRequest.',
    )


class GoogleCloudDialogflowCxV3beta1ExportTestCasesMetadata(BaseModel):
    pass


class DataFormat1(Enum):
    DATA_FORMAT_UNSPECIFIED = 'DATA_FORMAT_UNSPECIFIED'
    BLOB = 'BLOB'
    JSON = 'JSON'


class GoogleCloudDialogflowCxV3beta1ExportTestCasesRequest(BaseModel):
    dataFormat: Optional[DataFormat1] = Field(
        None,
        description='The data format of the exported test cases. If not specified, `BLOB` is assumed.',
    )
    filter: Optional[str] = Field(
        None,
        description='The filter expression used to filter exported test cases, see [API Filtering](https://aip.dev/160). The expression is case insensitive and supports the following syntax: name = [OR name = ] ... For example: * "name = t1 OR name = t2" matches the test case with the exact resource name "t1" or "t2".',
    )
    gcsUri: Optional[str] = Field(
        None,
        description="The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to export the test cases to. The format of this URI must be `gs:///`. If unspecified, the serialized test cases is returned inline. Dialogflow performs a write operation for the Cloud Storage object on the caller's behalf, so your request authentication must have write permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).",
    )


class GoogleCloudDialogflowCxV3beta1ExportTestCasesResponse(BaseModel):
    content: Optional[str] = Field(
        None, description='Uncompressed raw byte content for test cases.'
    )
    gcsUri: Optional[str] = Field(
        None,
        description='The URI to a file containing the exported test cases. This field is populated only if `gcs_uri` is specified in ExportTestCasesRequest.',
    )


class GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterAction(BaseModel):
    parameter: Optional[str] = Field(None, description='Display name of the parameter.')
    value: Optional[Any] = Field(
        None,
        description='The new value of the parameter. A null value clears the parameter.',
    )


class GoogleCloudDialogflowCxV3beta1GcsDestination(BaseModel):
    uri: Optional[str] = Field(
        None,
        description='Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: gs://bucket/object-name-or-prefix Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.',
    )


class State4(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    DONE = 'DONE'


class GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata(BaseModel):
    state: Optional[State4] = Field(
        None, description='Required. Output only. The current state of this operation.'
    )


class GoogleCloudDialogflowCxV3beta1ImportDocumentsOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class ImportOption(Enum):
    IMPORT_OPTION_UNSPECIFIED = 'IMPORT_OPTION_UNSPECIFIED'
    KEEP = 'KEEP'
    FALLBACK = 'FALLBACK'


class GoogleCloudDialogflowCxV3beta1ImportFlowRequest(BaseModel):
    flowContent: Optional[str] = Field(
        None, description='Uncompressed raw byte content for flow.'
    )
    flowUri: Optional[str] = Field(
        None,
        description="The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to import flow from. The format of this URI must be `gs:///`. Dialogflow performs a read operation for the Cloud Storage object on the caller's behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).",
    )
    importOption: Optional[ImportOption] = Field(
        None, description='Flow import mode. If not specified, `KEEP` is assumed.'
    )


class GoogleCloudDialogflowCxV3beta1ImportFlowResponse(BaseModel):
    flow: Optional[str] = Field(
        None,
        description='The unique identifier of the new flow. Format: `projects//locations//agents//flows/`.',
    )


class GoogleCloudDialogflowCxV3beta1ImportTestCasesRequest(BaseModel):
    content: Optional[str] = Field(
        None, description='Uncompressed raw byte content for test cases.'
    )
    gcsUri: Optional[str] = Field(
        None,
        description="The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to import test cases from. The format of this URI must be `gs:///`. Dialogflow performs a read operation for the Cloud Storage object on the caller's behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).",
    )


class GoogleCloudDialogflowCxV3beta1ImportTestCasesResponse(BaseModel):
    names: Optional[List[str]] = Field(
        None,
        description='The unique identifiers of the new test cases. Format: `projects//locations//agents//testCases/`.',
    )


class GoogleCloudDialogflowCxV3beta1InputAudioConfig(BaseModel):
    audioEncoding: Optional[AudioEncoding] = Field(
        None, description='Required. Audio encoding of the audio content to process.'
    )
    enableWordInfo: Optional[bool] = Field(
        None,
        description="Optional. If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information.",
    )
    model: Optional[str] = Field(
        None,
        description='Optional. Which Speech model to select for the given request. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then we auto-select a model based on the parameters in the InputAudioConfig. If enhanced speech model is enabled for the agent and an enhanced version of the specified model for the language does not exist, then the speech is recognized using the standard version of the specified model. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model) for more details. If you specify a model, the following models typically have the best performance: - phone_call (best for Agent Assist and telephony) - latest_short (best for Dialogflow non-telephony) - command_and_search (best for very short utterances and commands)',
    )
    modelVariant: Optional[ModelVariant] = Field(
        None, description='Optional. Which variant of the Speech model to use.'
    )
    phraseHints: Optional[List[str]] = Field(
        None,
        description='Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details.',
    )
    sampleRateHertz: Optional[int] = Field(
        None,
        description='Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details.',
    )
    singleUtterance: Optional[bool] = Field(
        None,
        description="Optional. If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods.",
    )


class GoogleCloudDialogflowCxV3beta1IntentCoverageIntent(BaseModel):
    covered: Optional[bool] = Field(
        None,
        description="Whether or not the intent is covered by at least one of the agent's test cases.",
    )
    intent: Optional[str] = Field(None, description='The intent full resource name')


class GoogleCloudDialogflowCxV3beta1IntentInput(BaseModel):
    intent: Optional[str] = Field(
        None,
        description='Required. The unique identifier of the intent. Format: `projects//locations//agents//intents/`.',
    )


class GoogleCloudDialogflowCxV3beta1IntentParameter(BaseModel):
    entityType: Optional[str] = Field(
        None,
        description='Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types.',
    )
    id: Optional[str] = Field(
        None,
        description='Required. The unique identifier of the parameter. This field is used by training phrases to annotate their parts.',
    )
    isList: Optional[bool] = Field(
        None, description='Indicates whether the parameter represents a list of values.'
    )
    redact: Optional[bool] = Field(
        None,
        description='Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.',
    )


class GoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePart(BaseModel):
    parameterId: Optional[str] = Field(
        None,
        description='The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase.',
    )
    text: Optional[str] = Field(None, description='Required. The text for this part.')


class GoogleCloudDialogflowCxV3beta1ListChangelogsResponse(BaseModel):
    changelogs: Optional[List[GoogleCloudDialogflowCxV3beta1Changelog]] = Field(
        None,
        description='The list of changelogs. There will be a maximum number of items returned based on the page_size field in the request. The changelogs will be ordered by timestamp.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDialogflowCxV3beta1ListContinuousTestResultsResponse(BaseModel):
    continuousTestResults: Optional[
        List[GoogleCloudDialogflowCxV3beta1ContinuousTestResult]
    ] = Field(None, description='The list of continuous test results.')
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDialogflowCxV3beta1LoadVersionRequest(BaseModel):
    allowOverrideAgentResources: Optional[bool] = Field(
        None,
        description="This field is used to prevent accidental overwrite of other agent resources, which can potentially impact other flow's behavior. If `allow_override_agent_resources` is false, conflicted agent-level resources will not be overridden (i.e. intents, entities, webhooks).",
    )


class MatchType(Enum):
    MATCH_TYPE_UNSPECIFIED = 'MATCH_TYPE_UNSPECIFIED'
    INTENT = 'INTENT'
    DIRECT_INTENT = 'DIRECT_INTENT'
    PARAMETER_FILLING = 'PARAMETER_FILLING'
    NO_MATCH = 'NO_MATCH'
    NO_INPUT = 'NO_INPUT'
    EVENT = 'EVENT'


class ModelTrainingMode(Enum):
    MODEL_TRAINING_MODE_UNSPECIFIED = 'MODEL_TRAINING_MODE_UNSPECIFIED'
    MODEL_TRAINING_MODE_AUTOMATIC = 'MODEL_TRAINING_MODE_AUTOMATIC'
    MODEL_TRAINING_MODE_MANUAL = 'MODEL_TRAINING_MODE_MANUAL'


class ModelType(Enum):
    MODEL_TYPE_UNSPECIFIED = 'MODEL_TYPE_UNSPECIFIED'
    MODEL_TYPE_STANDARD = 'MODEL_TYPE_STANDARD'
    MODEL_TYPE_ADVANCED = 'MODEL_TYPE_ADVANCED'


class GoogleCloudDialogflowCxV3beta1NluSettings(BaseModel):
    classificationThreshold: Optional[float] = Field(
        None,
        description='To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.',
    )
    modelTrainingMode: Optional[ModelTrainingMode] = Field(
        None, description='Indicates NLU model training mode.'
    )
    modelType: Optional[ModelType] = Field(
        None, description='Indicates the type of NLU model.'
    )


class AudioEncoding2(Enum):
    OUTPUT_AUDIO_ENCODING_UNSPECIFIED = 'OUTPUT_AUDIO_ENCODING_UNSPECIFIED'
    OUTPUT_AUDIO_ENCODING_LINEAR_16 = 'OUTPUT_AUDIO_ENCODING_LINEAR_16'
    OUTPUT_AUDIO_ENCODING_MP3 = 'OUTPUT_AUDIO_ENCODING_MP3'
    OUTPUT_AUDIO_ENCODING_MP3_64_KBPS = 'OUTPUT_AUDIO_ENCODING_MP3_64_KBPS'
    OUTPUT_AUDIO_ENCODING_OGG_OPUS = 'OUTPUT_AUDIO_ENCODING_OGG_OPUS'
    OUTPUT_AUDIO_ENCODING_MULAW = 'OUTPUT_AUDIO_ENCODING_MULAW'


class State5(Enum):
    PARAMETER_STATE_UNSPECIFIED = 'PARAMETER_STATE_UNSPECIFIED'
    EMPTY = 'EMPTY'
    INVALID = 'INVALID'
    FILLED = 'FILLED'


class GoogleCloudDialogflowCxV3beta1PageInfoFormInfoParameterInfo(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='Always present for WebhookRequest. Required for WebhookResponse. The human-readable name of the parameter, unique within the form. This field cannot be modified by the webhook.',
    )
    justCollected: Optional[bool] = Field(
        None,
        description='Optional for WebhookRequest. Ignored for WebhookResponse. Indicates if the parameter value was just collected on the last conversation turn.',
    )
    required: Optional[bool] = Field(
        None,
        description='Optional for both WebhookRequest and WebhookResponse. Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes.',
    )
    state: Optional[State5] = Field(
        None,
        description='Always present for WebhookRequest. Required for WebhookResponse. The state of the parameter. This field can be set to INVALID by the webhook to invalidate the parameter; other values set by the webhook will be ignored.',
    )
    value: Optional[Any] = Field(
        None,
        description='Optional for both WebhookRequest and WebhookResponse. The value of the parameter. This field can be set by the webhook to change the parameter value.',
    )


class GoogleCloudDialogflowCxV3beta1ReloadDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowCxV3beta1ResourceName(BaseModel):
    displayName: Optional[str] = Field(None, description='Display name.')
    name: Optional[str] = Field(None, description='Name.')


class GoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccess(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Custom metadata. Dialogflow doesn't impose any structure on this.",
    )


class GoogleCloudDialogflowCxV3beta1ResponseMessageEndInteraction(BaseModel):
    pass


class GoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoff(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Custom metadata for your handoff procedure. Dialogflow doesn't impose any structure on this.",
    )


class GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegment(BaseModel):
    allowPlaybackInterruption: Optional[bool] = Field(
        None,
        description="Output only. Whether the playback of this segment can be interrupted by the end user's speech and the client should then start the next Dialogflow request.",
    )
    audio: Optional[str] = Field(
        None,
        description="Raw audio synthesized from the Dialogflow agent's response using the output config specified in the request.",
    )
    uri: Optional[str] = Field(
        None,
        description='Client-specific URI that points to an audio clip accessible to the client. Dialogflow does not impose any validation on it.',
    )


class GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioText(BaseModel):
    allowPlaybackInterruption: Optional[bool] = Field(
        None,
        description="Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    ssml: Optional[str] = Field(
        None,
        description='The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml).',
    )
    text: Optional[str] = Field(None, description='The raw text to be synthesized.')


class GoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudio(BaseModel):
    allowPlaybackInterruption: Optional[bool] = Field(
        None,
        description="Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    audioUri: Optional[str] = Field(
        None,
        description='Required. URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.',
    )


class GoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCall(BaseModel):
    phoneNumber: Optional[str] = Field(
        None,
        description='Transfer the call to a phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164).',
    )


class GoogleCloudDialogflowCxV3beta1ResponseMessageText(BaseModel):
    allowPlaybackInterruption: Optional[bool] = Field(
        None,
        description="Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    text: Optional[List[str]] = Field(
        None, description='Required. A collection of text responses.'
    )


class RestoreOption(Enum):
    RESTORE_OPTION_UNSPECIFIED = 'RESTORE_OPTION_UNSPECIFIED'
    KEEP = 'KEEP'
    FALLBACK = 'FALLBACK'


class GoogleCloudDialogflowCxV3beta1RestoreAgentRequest(BaseModel):
    agentContent: Optional[str] = Field(
        None, description='Uncompressed raw byte content for agent.'
    )
    agentUri: Optional[str] = Field(
        None,
        description="The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to restore agent from. The format of this URI must be `gs:///`. Dialogflow performs a read operation for the Cloud Storage object on the caller's behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).",
    )
    restoreOption: Optional[RestoreOption] = Field(
        None, description='Agent restore mode. If not specified, `KEEP` is assumed.'
    )


class GoogleCloudDialogflowCxV3beta1RolloutConfigRolloutStep(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The name of the rollout step;'
    )
    minDuration: Optional[str] = Field(
        None,
        description='The minimum time that this step should last. Should be longer than 1 hour. If not set, the default minimum duration for each step will be 1 hour.',
    )
    trafficPercent: Optional[int] = Field(
        None,
        description='The percentage of traffic allocated to the flow version of this rollout step. (0%, 100%].',
    )


class GoogleCloudDialogflowCxV3beta1RolloutState(BaseModel):
    startTime: Optional[str] = Field(
        None, description='Start time of the current step.'
    )
    step: Optional[str] = Field(
        None, description='Display name of the current auto rollout step.'
    )
    stepIndex: Optional[int] = Field(
        None, description='Index of the current step in the auto rollout steps list.'
    )


class GoogleCloudDialogflowCxV3beta1RunContinuousTestRequest(BaseModel):
    pass


class GoogleCloudDialogflowCxV3beta1RunContinuousTestResponse(BaseModel):
    continuousTestResult: Optional[
        GoogleCloudDialogflowCxV3beta1ContinuousTestResult
    ] = Field(None, description='The result for a continuous test run.')


class GoogleCloudDialogflowCxV3beta1RunTestCaseMetadata(BaseModel):
    pass


class GoogleCloudDialogflowCxV3beta1RunTestCaseRequest(BaseModel):
    environment: Optional[str] = Field(
        None,
        description='Optional. Environment name. If not set, draft environment is assumed. Format: `projects//locations//agents//environments/`.',
    )


class PurgeDataType(Enum):
    PURGE_DATA_TYPE_UNSPECIFIED = 'PURGE_DATA_TYPE_UNSPECIFIED'
    DIALOGFLOW_HISTORY = 'DIALOGFLOW_HISTORY'


class RedactionScope(Enum):
    REDACTION_SCOPE_UNSPECIFIED = 'REDACTION_SCOPE_UNSPECIFIED'
    REDACT_DISK_STORAGE = 'REDACT_DISK_STORAGE'


class RedactionStrategy(Enum):
    REDACTION_STRATEGY_UNSPECIFIED = 'REDACTION_STRATEGY_UNSPECIFIED'
    REDACT_WITH_SERVICE = 'REDACT_WITH_SERVICE'


class AudioFormat(Enum):
    AUDIO_FORMAT_UNSPECIFIED = 'AUDIO_FORMAT_UNSPECIFIED'
    MULAW = 'MULAW'
    MP3 = 'MP3'
    OGG = 'OGG'


class GoogleCloudDialogflowCxV3beta1SecuritySettingsAudioExportSettings(BaseModel):
    audioExportPattern: Optional[str] = Field(
        None, description='Filename pattern for exported audio.'
    )
    audioFormat: Optional[AudioFormat] = Field(
        None,
        description='File format for exported audio file. Currently only in telephony recordings.',
    )
    enableAudioRedaction: Optional[bool] = Field(
        None, description='Enable audio redaction if it is true.'
    )
    gcsBucket: Optional[str] = Field(
        None,
        description='Cloud Storage bucket to export audio record to. Setting this field would grant the Storage Object Creator role to the Dialogflow Service Agent. API caller that tries to modify this field should have the permission of storage.buckets.setIamPolicy.',
    )


class GoogleCloudDialogflowCxV3beta1SecuritySettingsInsightsExportSettings(BaseModel):
    enableInsightsExport: Optional[bool] = Field(
        None,
        description='If enabled, we will automatically exports conversations to Insights and Insights runs its analyzers.',
    )


class GoogleCloudDialogflowCxV3beta1SentimentAnalysisResult(BaseModel):
    magnitude: Optional[float] = Field(
        None,
        description='A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative).',
    )
    score: Optional[float] = Field(
        None,
        description='Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).',
    )


class EntityOverrideMode(Enum):
    ENTITY_OVERRIDE_MODE_UNSPECIFIED = 'ENTITY_OVERRIDE_MODE_UNSPECIFIED'
    ENTITY_OVERRIDE_MODE_OVERRIDE = 'ENTITY_OVERRIDE_MODE_OVERRIDE'
    ENTITY_OVERRIDE_MODE_SUPPLEMENT = 'ENTITY_OVERRIDE_MODE_SUPPLEMENT'


class GoogleCloudDialogflowCxV3beta1SessionEntityType(BaseModel):
    entities: Optional[List[GoogleCloudDialogflowCxV3beta1EntityTypeEntity]] = Field(
        None,
        description='Required. The collection of entities to override or supplement the custom entity type.',
    )
    entityOverrideMode: Optional[EntityOverrideMode] = Field(
        None,
        description='Required. Indicates whether the additional data should override or supplement the custom entity type definition.',
    )
    name: Optional[str] = Field(
        None,
        description="Required. The unique identifier of the session entity type. Format: `projects//locations//agents//sessions//entityTypes/` or `projects//locations//agents//environments//sessions//entityTypes/`. If `Environment ID` is not specified, we assume default 'draft' environment.",
    )


class GoogleCloudDialogflowCxV3beta1SessionInfo(BaseModel):
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional for WebhookRequest. Optional for WebhookResponse. All parameters collected from forms and intents during the session. Parameters can be created, updated, or removed by the webhook. To remove a parameter from the session, the webhook should explicitly set the parameter value to null in WebhookResponse. The map is keyed by parameters' display names.",
    )
    session: Optional[str] = Field(
        None,
        description='Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the session. This field can be used by the webhook to identify a session. Format: `projects//locations//agents//sessions/` or `projects//locations//agents//environments//sessions/` if environment is specified.',
    )


class GoogleCloudDialogflowCxV3beta1SpeechToTextSettings(BaseModel):
    enableSpeechAdaptation: Optional[bool] = Field(
        None, description='Whether to use speech adaptation for speech recognition.'
    )


class GoogleCloudDialogflowCxV3beta1StartExperimentRequest(BaseModel):
    pass


class GoogleCloudDialogflowCxV3beta1StopExperimentRequest(BaseModel):
    pass


class GoogleCloudDialogflowCxV3beta1TestConfig(BaseModel):
    flow: Optional[str] = Field(
        None,
        description='Flow name to start the test case with. Format: `projects//locations//agents//flows/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow.',
    )
    page: Optional[str] = Field(
        None,
        description='The page to start the test case with. Format: `projects//locations//agents//flows//pages/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow.',
    )
    trackingParameters: Optional[List[str]] = Field(
        None,
        description='Session parameters to be compared when calculating differences.',
    )


class Type2(Enum):
    DIFF_TYPE_UNSPECIFIED = 'DIFF_TYPE_UNSPECIFIED'
    INTENT = 'INTENT'
    PAGE = 'PAGE'
    PARAMETERS = 'PARAMETERS'
    UTTERANCE = 'UTTERANCE'


class GoogleCloudDialogflowCxV3beta1TestRunDifference(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of the diff, showing the actual output vs expected output.',
    )
    type: Optional[Type2] = Field(None, description='The type of diff.')


class GoogleCloudDialogflowCxV3beta1TextInput(BaseModel):
    text: Optional[str] = Field(
        None,
        description='Required. The UTF-8 encoded natural language text to be processed. Text length must not exceed 256 characters.',
    )


class GoogleCloudDialogflowCxV3beta1TrainFlowRequest(BaseModel):
    pass


class GoogleCloudDialogflowCxV3beta1TurnSignals(BaseModel):
    agentEscalated: Optional[bool] = Field(
        None, description='Whether agent responded with LiveAgentHandoff fulfillment.'
    )
    dtmfUsed: Optional[bool] = Field(
        None, description='Whether user was using DTMF input.'
    )
    failureReasons: Optional[List[FailureReason]] = Field(
        None, description='Failure reasons of the turn.'
    )
    noMatch: Optional[bool] = Field(None, description='Whether NLU predicted NO_MATCH.')
    noUserInput: Optional[bool] = Field(
        None, description='Whether user provided no input.'
    )
    reachedEndPage: Optional[bool] = Field(
        None, description='Whether turn resulted in End Session page.'
    )
    userEscalated: Optional[bool] = Field(
        None, description='Whether user was specifically asking for a live agent.'
    )
    webhookStatuses: Optional[List[str]] = Field(
        None,
        description='Human-readable statuses of the webhooks triggered during this turn.',
    )


class GoogleCloudDialogflowCxV3beta1UpdateDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowCxV3beta1ValidateAgentRequest(BaseModel):
    languageCode: Optional[str] = Field(
        None, description="If not specified, the agent's default language is used."
    )


class GoogleCloudDialogflowCxV3beta1ValidateFlowRequest(BaseModel):
    languageCode: Optional[str] = Field(
        None, description="If not specified, the agent's default language is used."
    )


class ResourceType(Enum):
    RESOURCE_TYPE_UNSPECIFIED = 'RESOURCE_TYPE_UNSPECIFIED'
    AGENT = 'AGENT'
    INTENT = 'INTENT'
    INTENT_TRAINING_PHRASE = 'INTENT_TRAINING_PHRASE'
    INTENT_PARAMETER = 'INTENT_PARAMETER'
    INTENTS = 'INTENTS'
    INTENT_TRAINING_PHRASES = 'INTENT_TRAINING_PHRASES'
    ENTITY_TYPE = 'ENTITY_TYPE'
    ENTITY_TYPES = 'ENTITY_TYPES'
    WEBHOOK = 'WEBHOOK'
    FLOW = 'FLOW'
    PAGE = 'PAGE'
    PAGES = 'PAGES'
    TRANSITION_ROUTE_GROUP = 'TRANSITION_ROUTE_GROUP'


class Severity(Enum):
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    INFO = 'INFO'
    WARNING = 'WARNING'
    ERROR = 'ERROR'


class GoogleCloudDialogflowCxV3beta1ValidationMessage(BaseModel):
    detail: Optional[str] = Field(None, description='The message detail.')
    resourceNames: Optional[List[GoogleCloudDialogflowCxV3beta1ResourceName]] = Field(
        None,
        description='The resource names of the resources where the message is found.',
    )
    resourceType: Optional[ResourceType] = Field(
        None, description='The type of the resources where the message is found.'
    )
    resources: Optional[List[str]] = Field(
        None, description='The names of the resources where the message is found.'
    )
    severity: Optional[Severity] = Field(
        None, description='Indicates the severity of the message.'
    )


class State6(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class GoogleCloudDialogflowCxV3beta1Version(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Create time of the version.'
    )
    description: Optional[str] = Field(
        None,
        description='The description of the version. The maximum length is 500 characters. If exceeded, the request is rejected.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the version. Limit of 64 characters.',
    )
    name: Optional[str] = Field(
        None,
        description='Format: projects//locations//agents//flows//versions/. Version ID is a self-increasing number generated by Dialogflow upon version creation.',
    )
    nluSettings: Optional[GoogleCloudDialogflowCxV3beta1NluSettings] = Field(
        None,
        description='Output only. The NLU settings of the flow at version creation.',
    )
    state: Optional[State6] = Field(
        None,
        description='Output only. The state of this version. This field is read-only and cannot be set by create and update methods.',
    )


class GoogleCloudDialogflowCxV3beta1VersionVariantsVariant(BaseModel):
    isControlGroup: Optional[bool] = Field(
        None, description='Whether the variant is for the control group.'
    )
    trafficAllocation: Optional[float] = Field(
        None,
        description='Percentage of the traffic which should be routed to this version of flow. Traffic allocation for a single flow must sum up to 1.0.',
    )
    version: Optional[str] = Field(
        None,
        description='The name of the flow version. Format: `projects//locations//agents//flows//versions/`.',
    )


class SsmlGender(Enum):
    SSML_VOICE_GENDER_UNSPECIFIED = 'SSML_VOICE_GENDER_UNSPECIFIED'
    SSML_VOICE_GENDER_MALE = 'SSML_VOICE_GENDER_MALE'
    SSML_VOICE_GENDER_FEMALE = 'SSML_VOICE_GENDER_FEMALE'
    SSML_VOICE_GENDER_NEUTRAL = 'SSML_VOICE_GENDER_NEUTRAL'


class GoogleCloudDialogflowCxV3beta1VoiceSelectionParams(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Optional. The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and ssml_gender. For the list of available voices, please refer to [Supported voices and languages](https://cloud.google.com/text-to-speech/docs/voices).',
    )
    ssmlGender: Optional[SsmlGender] = Field(
        None,
        description='Optional. The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement. If a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request.',
    )


class GoogleCloudDialogflowCxV3beta1WebhookGenericWebService(BaseModel):
    allowedCaCerts: Optional[List[str]] = Field(
        None,
        description='Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google\'s default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with "subject alt name". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile <(printf "\\nsubjectAltName=\'DNS:www.example.com\'") ```',
    )
    password: Optional[str] = Field(
        None, description='The password for HTTP Basic authentication.'
    )
    requestHeaders: Optional[Dict[str, str]] = Field(
        None,
        description='The HTTP request headers to send together with webhook requests.',
    )
    uri: Optional[str] = Field(
        None,
        description='Required. The webhook URI for receiving POST requests. It must use https protocol.',
    )
    username: Optional[str] = Field(
        None, description='The user name for HTTP Basic authentication.'
    )


class GoogleCloudDialogflowCxV3beta1WebhookRequestFulfillmentInfo(BaseModel):
    tag: Optional[str] = Field(
        None,
        description='Always present. The value of the Fulfillment.tag field will be populated in this field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes.',
    )


class GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoIntentParameterValue(
    BaseModel
):
    originalValue: Optional[str] = Field(
        None,
        description='Always present. Original text value extracted from user utterance.',
    )
    resolvedValue: Optional[Any] = Field(
        None,
        description='Always present. Structured value for the parameter extracted from user utterance.',
    )


class GoogleCloudDialogflowCxV3beta1WebhookRequestSentimentAnalysisResult(BaseModel):
    magnitude: Optional[float] = Field(
        None,
        description='A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative).',
    )
    score: Optional[float] = Field(
        None,
        description='Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).',
    )


class GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfig(BaseModel):
    genericWebService: Optional[
        GoogleCloudDialogflowCxV3beta1WebhookGenericWebService
    ] = Field(None, description='Generic Service configuration of this webhook.')
    service: Optional[str] = Field(
        None,
        description='Required. The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent.',
    )


class GoogleCloudDialogflowV2AnnotatedMessagePart(BaseModel):
    entityType: Optional[str] = Field(
        None,
        description='The [Dialogflow system entity type](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. If this is empty, Dialogflow could not annotate the phrase part with a system entity.',
    )
    formattedValue: Optional[Any] = Field(
        None,
        description='The [Dialogflow system entity formatted value ](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. For example for a system entity of type `@sys.unit-currency`, this may contain: { "amount": 5, "currency": "USD" } ',
    )
    text: Optional[str] = Field(
        None, description='A part of a message possibly annotated with an entity.'
    )


class GoogleCloudDialogflowV2ArticleAnswer(BaseModel):
    answerRecord: Optional[str] = Field(
        None,
        description='The name of answer record, in the format of "projects//locations//answerRecords/"',
    )
    confidence: Optional[float] = Field(
        None,
        description="Article match confidence. The system's confidence score that this article is a good match for this conversation, as a value from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='A map that contains metadata about the answer and the document from which it originates.',
    )
    snippets: Optional[List[str]] = Field(None, description='Article snippets.')
    title: Optional[str] = Field(None, description='The article title.')
    uri: Optional[str] = Field(None, description='The article URI.')


class TrainingModelType(Enum):
    MODEL_TYPE_UNSPECIFIED = 'MODEL_TYPE_UNSPECIFIED'
    SMART_REPLY_DUAL_ENCODER_MODEL = 'SMART_REPLY_DUAL_ENCODER_MODEL'
    SMART_REPLY_BERT_MODEL = 'SMART_REPLY_BERT_MODEL'


class GoogleCloudDialogflowV2ArticleSuggestionModelMetadata(BaseModel):
    trainingModelType: Optional[TrainingModelType] = Field(
        None,
        description='Optional. Type of the article suggestion model. If not provided, model_type is used.',
    )


class ParticipantRole(Enum):
    ROLE_UNSPECIFIED = 'ROLE_UNSPECIFIED'
    HUMAN_AGENT = 'HUMAN_AGENT'
    AUTOMATED_AGENT = 'AUTOMATED_AGENT'
    END_USER = 'END_USER'


class SuggestionFeatureType(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    ARTICLE_SUGGESTION = 'ARTICLE_SUGGESTION'
    FAQ = 'FAQ'
    SMART_REPLY = 'SMART_REPLY'


class GoogleCloudDialogflowV2ClearSuggestionFeatureConfigOperationMetadata(BaseModel):
    conversationProfile: Optional[str] = Field(
        None,
        description='The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/`',
    )
    createTime: Optional[str] = Field(
        None,
        description='Timestamp whe the request was created. The time is measured on server side.',
    )
    participantRole: Optional[ParticipantRole] = Field(
        None,
        description='Required. The participant role to remove the suggestion feature config. Only HUMAN_AGENT or END_USER can be used.',
    )
    suggestionFeatureType: Optional[SuggestionFeatureType] = Field(
        None, description='Required. The type of the suggestion feature to remove.'
    )


class GoogleCloudDialogflowV2Context(BaseModel):
    lifespanCount: Optional[int] = Field(
        None,
        description='Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.',
    )
    name: Optional[str] = Field(
        None,
        description="Required. The unique identifier of the context. Format: `projects//agent/sessions//contexts/`, or `projects//agent/environments//users//sessions//contexts/`. The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`",
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value",
    )


class Type3(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CONVERSATION_STARTED = 'CONVERSATION_STARTED'
    CONVERSATION_FINISHED = 'CONVERSATION_FINISHED'
    HUMAN_INTERVENTION_NEEDED = 'HUMAN_INTERVENTION_NEEDED'
    NEW_MESSAGE = 'NEW_MESSAGE'
    UNRECOVERABLE_ERROR = 'UNRECOVERABLE_ERROR'


class State7(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    UNDEPLOYED = 'UNDEPLOYED'
    DEPLOYING = 'DEPLOYING'
    DEPLOYED = 'DEPLOYED'
    UNDEPLOYING = 'UNDEPLOYING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    PENDING = 'PENDING'


class GoogleCloudDialogflowV2CreateConversationDatasetOperationMetadata(BaseModel):
    conversationDataset: Optional[str] = Field(
        None,
        description='The resource name of the conversation dataset that will be created. Format: `projects//locations//conversationDatasets/`',
    )


class State8(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    INITIALIZING = 'INITIALIZING'
    RUNNING = 'RUNNING'
    CANCELLED = 'CANCELLED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class GoogleCloudDialogflowV2CreateConversationModelEvaluationOperationMetadata(
    BaseModel
):
    conversationModel: Optional[str] = Field(
        None,
        description='The resource name of the conversation model. Format: `projects//locations//conversationModels/`',
    )
    conversationModelEvaluation: Optional[str] = Field(
        None,
        description='The resource name of the conversation model. Format: `projects//locations//conversationModels//evaluations/`',
    )
    createTime: Optional[str] = Field(
        None,
        description='Timestamp when the request to create conversation model was submitted. The time is measured on server side.',
    )
    state: Optional[State8] = Field(
        None, description='State of CreateConversationModel operation.'
    )


class State9(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'
    CANCELLING = 'CANCELLING'
    TRAINING = 'TRAINING'


class GoogleCloudDialogflowV2CreateConversationModelOperationMetadata(BaseModel):
    conversationModel: Optional[str] = Field(
        None,
        description='The resource name of the conversation model. Format: `projects//conversationModels/`',
    )
    createTime: Optional[str] = Field(
        None,
        description='Timestamp when the request to create conversation model is submitted. The time is measured on server side.',
    )
    state: Optional[State9] = Field(
        None, description='State of CreateConversationModel operation.'
    )


class GoogleCloudDialogflowV2DeleteConversationDatasetOperationMetadata(BaseModel):
    pass


class GoogleCloudDialogflowV2DeleteConversationModelOperationMetadata(BaseModel):
    conversationModel: Optional[str] = Field(
        None,
        description='The resource name of the conversation model. Format: `projects//conversationModels/`',
    )
    createTime: Optional[str] = Field(
        None,
        description='Timestamp when delete conversation model request was created. The time is measured on server side.',
    )


class GoogleCloudDialogflowV2DeployConversationModelOperationMetadata(BaseModel):
    conversationModel: Optional[str] = Field(
        None,
        description='The resource name of the conversation model. Format: `projects//conversationModels/`',
    )
    createTime: Optional[str] = Field(
        None,
        description='Timestamp when request to deploy conversation model was submitted. The time is measured on server side.',
    )


class GoogleCloudDialogflowV2EntityTypeEntity(BaseModel):
    synonyms: Optional[List[str]] = Field(
        None,
        description='Required. A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.',
    )
    value: Optional[str] = Field(
        None,
        description='Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).',
    )


class GoogleCloudDialogflowV2EventInput(BaseModel):
    languageCode: Optional[str] = Field(
        None,
        description='Required. The language of this query. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. This field is ignored when used in the context of a WebhookResponse.followup_event_input field, because the language was already defined in the originating detect intent request.',
    )
    name: Optional[str] = Field(
        None, description='Required. The unique identifier of the event.'
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="The collection of parameters associated with the event. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value",
    )


class GoogleCloudDialogflowV2ExportAgentResponse(BaseModel):
    agentContent: Optional[str] = Field(
        None, description='Zip compressed raw byte content for agent.'
    )
    agentUri: Optional[str] = Field(
        None,
        description='The URI to a file containing the exported agent. This field is populated only if `agent_uri` is specified in `ExportAgentRequest`.',
    )


class GoogleCloudDialogflowV2FaqAnswer(BaseModel):
    answer: Optional[str] = Field(
        None, description='The piece of text from the `source` knowledge base document.'
    )
    answerRecord: Optional[str] = Field(
        None,
        description='The name of answer record, in the format of "projects//locations//answerRecords/"',
    )
    confidence: Optional[float] = Field(
        None,
        description="The system's confidence score that this Knowledge answer is a good match for this conversational query, range from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='A map that contains metadata about the answer and the document from which it originates.',
    )
    question: Optional[str] = Field(None, description='The corresponding FAQ question.')
    source: Optional[str] = Field(
        None,
        description='Indicates which Knowledge Document this answer was extracted from. Format: `projects//locations//agent/knowledgeBases//documents/`.',
    )


class GoogleCloudDialogflowV2GcsDestination(BaseModel):
    uri: Optional[str] = Field(
        None,
        description='The Google Cloud Storage URIs for the output. A URI is of the form: gs://bucket/object-prefix-or-name Whether a prefix or name is used depends on the use case. The requesting user must have "write-permission" to the bucket.',
    )


class GoogleCloudDialogflowV2ImportConversationDataOperationResponse(BaseModel):
    conversationDataset: Optional[str] = Field(
        None,
        description='The resource name of the imported conversation dataset. Format: `projects//locations//conversationDatasets/`',
    )
    importCount: Optional[int] = Field(
        None, description='Number of conversations imported successfully.'
    )


class GoogleCloudDialogflowV2InputDataset(BaseModel):
    dataset: Optional[str] = Field(
        None,
        description='Required. ConversationDataset resource name. Format: `projects//locations//conversationDatasets/`',
    )


class DefaultResponsePlatform(Enum):
    PLATFORM_UNSPECIFIED = 'PLATFORM_UNSPECIFIED'
    FACEBOOK = 'FACEBOOK'
    SLACK = 'SLACK'
    TELEGRAM = 'TELEGRAM'
    KIK = 'KIK'
    SKYPE = 'SKYPE'
    LINE = 'LINE'
    VIBER = 'VIBER'
    ACTIONS_ON_GOOGLE = 'ACTIONS_ON_GOOGLE'
    GOOGLE_HANGOUTS = 'GOOGLE_HANGOUTS'


class WebhookState(Enum):
    WEBHOOK_STATE_UNSPECIFIED = 'WEBHOOK_STATE_UNSPECIFIED'
    WEBHOOK_STATE_ENABLED = 'WEBHOOK_STATE_ENABLED'
    WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING = 'WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING'


class GoogleCloudDialogflowV2IntentFollowupIntentInfo(BaseModel):
    followupIntentName: Optional[str] = Field(
        None,
        description='The unique identifier of the followup intent. Format: `projects//agent/intents/`.',
    )
    parentFollowupIntentName: Optional[str] = Field(
        None,
        description="The unique identifier of the followup intent's parent. Format: `projects//agent/intents/`.",
    )


class Platform(Enum):
    PLATFORM_UNSPECIFIED = 'PLATFORM_UNSPECIFIED'
    FACEBOOK = 'FACEBOOK'
    SLACK = 'SLACK'
    TELEGRAM = 'TELEGRAM'
    KIK = 'KIK'
    SKYPE = 'SKYPE'
    LINE = 'LINE'
    VIBER = 'VIBER'
    ACTIONS_ON_GOOGLE = 'ACTIONS_ON_GOOGLE'
    GOOGLE_HANGOUTS = 'GOOGLE_HANGOUTS'


class GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriAction(BaseModel):
    uri: Optional[str] = Field(
        None, description='Required. The HTTP or HTTPS scheme URI.'
    )


class ImageDisplayOptions(Enum):
    IMAGE_DISPLAY_OPTIONS_UNSPECIFIED = 'IMAGE_DISPLAY_OPTIONS_UNSPECIFIED'
    GRAY = 'GRAY'
    WHITE = 'WHITE'
    CROPPED = 'CROPPED'
    BLURRED_BACKGROUND = 'BLURRED_BACKGROUND'


class UrlTypeHint(Enum):
    URL_TYPE_HINT_UNSPECIFIED = 'URL_TYPE_HINT_UNSPECIFIED'
    AMP_ACTION = 'AMP_ACTION'
    AMP_CONTENT = 'AMP_CONTENT'


class GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlAction(
    BaseModel
):
    url: Optional[str] = Field(None, description='Required. URL')
    urlTypeHint: Optional[UrlTypeHint] = Field(
        None,
        description='Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser.',
    )


class GoogleCloudDialogflowV2IntentMessageCardButton(BaseModel):
    postback: Optional[str] = Field(
        None,
        description='Optional. The text to send back to the Dialogflow API or a URI to open.',
    )
    text: Optional[str] = Field(
        None, description='Optional. The text to show on the button.'
    )


class HorizontalAlignment(Enum):
    HORIZONTAL_ALIGNMENT_UNSPECIFIED = 'HORIZONTAL_ALIGNMENT_UNSPECIFIED'
    LEADING = 'LEADING'
    CENTER = 'CENTER'
    TRAILING = 'TRAILING'


class GoogleCloudDialogflowV2IntentMessageColumnProperties(BaseModel):
    header: Optional[str] = Field(None, description='Required. Column heading.')
    horizontalAlignment: Optional[HorizontalAlignment] = Field(
        None,
        description='Optional. Defines text alignment for all cells in this column.',
    )


class GoogleCloudDialogflowV2IntentMessageImage(BaseModel):
    accessibilityText: Optional[str] = Field(
        None,
        description='Optional. A text description of the image to be used for accessibility, e.g., screen readers.',
    )
    imageUri: Optional[str] = Field(
        None, description='Optional. The public URI to an image file.'
    )


class GoogleCloudDialogflowV2IntentMessageLinkOutSuggestion(BaseModel):
    destinationName: Optional[str] = Field(
        None,
        description='Required. The name of the app or site this chip is linking to.',
    )
    uri: Optional[str] = Field(
        None,
        description='Required. The URI of the app or site to open when the user taps the suggestion chip.',
    )


class MediaType(Enum):
    RESPONSE_MEDIA_TYPE_UNSPECIFIED = 'RESPONSE_MEDIA_TYPE_UNSPECIFIED'
    AUDIO = 'AUDIO'


class GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObject(BaseModel):
    contentUrl: Optional[str] = Field(
        None, description='Required. Url where the media is stored.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of media card.'
    )
    icon: Optional[GoogleCloudDialogflowV2IntentMessageImage] = Field(
        None, description='Optional. Icon to display above media content.'
    )
    largeImage: Optional[GoogleCloudDialogflowV2IntentMessageImage] = Field(
        None, description='Optional. Image to display above media content.'
    )
    name: Optional[str] = Field(None, description='Required. Name of media card.')


class GoogleCloudDialogflowV2IntentMessageQuickReplies(BaseModel):
    quickReplies: Optional[List[str]] = Field(
        None, description='Optional. The collection of quick replies.'
    )
    title: Optional[str] = Field(
        None, description='Optional. The title of the collection of quick replies.'
    )


class GoogleCloudDialogflowV2IntentMessageSelectItemInfo(BaseModel):
    key: Optional[str] = Field(
        None,
        description='Required. A unique key that will be sent back to the agent if this response is given.',
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='Optional. A list of synonyms that can also be used to trigger this item in dialog.',
    )


class GoogleCloudDialogflowV2IntentMessageSimpleResponse(BaseModel):
    displayText: Optional[str] = Field(
        None, description='Optional. The text to display.'
    )
    ssml: Optional[str] = Field(
        None,
        description='One of text_to_speech or ssml must be provided. Structured spoken response to the user in the SSML format. Mutually exclusive with text_to_speech.',
    )
    textToSpeech: Optional[str] = Field(
        None,
        description='One of text_to_speech or ssml must be provided. The plain text of the speech output. Mutually exclusive with ssml.',
    )


class GoogleCloudDialogflowV2IntentMessageSimpleResponses(BaseModel):
    simpleResponses: Optional[
        List[GoogleCloudDialogflowV2IntentMessageSimpleResponse]
    ] = Field(None, description='Required. The list of simple responses.')


class GoogleCloudDialogflowV2IntentMessageSuggestion(BaseModel):
    title: Optional[str] = Field(
        None, description='Required. The text shown the in the suggestion chip.'
    )


class GoogleCloudDialogflowV2IntentMessageSuggestions(BaseModel):
    suggestions: Optional[List[GoogleCloudDialogflowV2IntentMessageSuggestion]] = Field(
        None, description='Required. The list of suggested replies.'
    )


class GoogleCloudDialogflowV2IntentMessageTableCardCell(BaseModel):
    text: Optional[str] = Field(None, description='Required. Text in this cell.')


class GoogleCloudDialogflowV2IntentMessageTableCardRow(BaseModel):
    cells: Optional[List[GoogleCloudDialogflowV2IntentMessageTableCardCell]] = Field(
        None, description='Optional. List of cells that make up this row.'
    )
    dividerAfter: Optional[bool] = Field(
        None, description='Optional. Whether to add a visual divider after this row.'
    )


class GoogleCloudDialogflowV2IntentMessageText(BaseModel):
    text: Optional[List[str]] = Field(
        None, description="Optional. The collection of the agent's responses."
    )


class GoogleCloudDialogflowV2IntentParameter(BaseModel):
    defaultValue: Optional[str] = Field(
        None,
        description='Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`.',
    )
    displayName: Optional[str] = Field(
        None, description='Required. The name of the parameter.'
    )
    entityTypeDisplayName: Optional[str] = Field(
        None,
        description='Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided.',
    )
    isList: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether the parameter represents a list of values.',
    )
    mandatory: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value.',
    )
    name: Optional[str] = Field(
        None, description='The unique identifier of this parameter.'
    )
    prompts: Optional[List[str]] = Field(
        None,
        description='Optional. The collection of prompts that the agent can present to the user in order to collect a value for the parameter.',
    )
    value: Optional[str] = Field(
        None,
        description='Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`.',
    )


class Type4(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    EXAMPLE = 'EXAMPLE'
    TEMPLATE = 'TEMPLATE'


class GoogleCloudDialogflowV2IntentTrainingPhrasePart(BaseModel):
    alias: Optional[str] = Field(
        None,
        description='Optional. The parameter name for the value extracted from the annotated part of the example. This field is required for annotated parts of the training phrase.',
    )
    entityType: Optional[str] = Field(
        None,
        description='Optional. The entity type name prefixed with `@`. This field is required for annotated parts of the training phrase.',
    )
    text: Optional[str] = Field(None, description='Required. The text for this part.')
    userDefined: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether the text was manually annotated. This field is set to true when the Dialogflow Console is used to manually annotate the part. When creating an annotated part with the API, you must set this to true.',
    )


class State10(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    DONE = 'DONE'


class GoogleCloudDialogflowV2MessageAnnotation(BaseModel):
    containEntities: Optional[bool] = Field(
        None, description='Indicates whether the text message contains entities.'
    )
    parts: Optional[List[GoogleCloudDialogflowV2AnnotatedMessagePart]] = Field(
        None,
        description='The collection of annotated message parts ordered by their position in the message. You can recover the annotated message by concatenating [AnnotatedMessagePart.text].',
    )


class GoogleCloudDialogflowV2OriginalDetectIntentRequest(BaseModel):
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description='Optional. This field is set to the value of the `QueryParameters.payload` field passed in the request. Some integrations that query a Dialogflow agent may provide additional information in the payload. In particular, for the Dialogflow Phone Gateway integration, this field has the form: { "telephony": { "caller_id": "+18558363987" } } Note: The caller ID field (`caller_id`) will be redacted for Trial Edition agents and populated with the caller ID in [E.164 format](https://en.wikipedia.org/wiki/E.164) for Essentials Edition agents.',
    )
    source: Optional[str] = Field(
        None,
        description='The source of this request, e.g., `google`, `facebook`, `slack`. It is set by Dialogflow-owned servers.',
    )
    version: Optional[str] = Field(
        None,
        description='Optional. The version of the protocol used for this request. This field is AoG-specific.',
    )


class GoogleCloudDialogflowV2Sentiment(BaseModel):
    magnitude: Optional[float] = Field(
        None,
        description='A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative).',
    )
    score: Optional[float] = Field(
        None,
        description='Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).',
    )


class GoogleCloudDialogflowV2SentimentAnalysisResult(BaseModel):
    queryTextSentiment: Optional[GoogleCloudDialogflowV2Sentiment] = Field(
        None, description='The sentiment analysis result for `query_text`.'
    )


class GoogleCloudDialogflowV2SessionEntityType(BaseModel):
    entities: Optional[List[GoogleCloudDialogflowV2EntityTypeEntity]] = Field(
        None,
        description='Required. The collection of entities associated with this session entity type.',
    )
    entityOverrideMode: Optional[EntityOverrideMode] = Field(
        None,
        description='Required. Indicates whether the additional data should override or supplement the custom entity type definition.',
    )
    name: Optional[str] = Field(
        None,
        description="Required. The unique identifier of this session entity type. Format: `projects//agent/sessions//entityTypes/`, or `projects//agent/environments//users//sessions//entityTypes/`. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. `` must be the display name of an existing entity type in the same agent that will be overridden or supplemented.",
    )


class GoogleCloudDialogflowV2SetSuggestionFeatureConfigOperationMetadata(BaseModel):
    conversationProfile: Optional[str] = Field(
        None,
        description='The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/`',
    )
    createTime: Optional[str] = Field(
        None,
        description='Timestamp whe the request was created. The time is measured on server side.',
    )
    participantRole: Optional[ParticipantRole] = Field(
        None,
        description='Required. The participant role to add or update the suggestion feature config. Only HUMAN_AGENT or END_USER can be used.',
    )
    suggestionFeatureType: Optional[SuggestionFeatureType] = Field(
        None,
        description='Required. The type of the suggestion feature to add or update.',
    )


class GoogleCloudDialogflowV2SmartReplyAnswer(BaseModel):
    answerRecord: Optional[str] = Field(
        None,
        description='The name of answer record, in the format of "projects//locations//answerRecords/"',
    )
    confidence: Optional[float] = Field(
        None,
        description="Smart reply confidence. The system's confidence score that this reply is a good match for this conversation, as a value from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    reply: Optional[str] = Field(None, description='The content of the reply.')


class GoogleCloudDialogflowV2SmartReplyModelMetadata(BaseModel):
    trainingModelType: Optional[TrainingModelType] = Field(
        None,
        description='Optional. Type of the smart reply model. If not provided, model_type is used.',
    )


class GoogleCloudDialogflowV2SuggestArticlesResponse(BaseModel):
    articleAnswers: Optional[List[GoogleCloudDialogflowV2ArticleAnswer]] = Field(
        None, description='Articles ordered by score in descending order.'
    )
    contextSize: Optional[int] = Field(
        None,
        description="Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestArticlesRequest.context_size field in the request if there aren't that many messages in the conversation.",
    )
    latestMessage: Optional[str] = Field(
        None,
        description='The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`.',
    )


class GoogleCloudDialogflowV2SuggestFaqAnswersResponse(BaseModel):
    contextSize: Optional[int] = Field(
        None,
        description="Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestFaqAnswersRequest.context_size field in the request if there aren't that many messages in the conversation.",
    )
    faqAnswers: Optional[List[GoogleCloudDialogflowV2FaqAnswer]] = Field(
        None, description='Answers extracted from FAQ documents.'
    )
    latestMessage: Optional[str] = Field(
        None,
        description='The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`.',
    )


class GoogleCloudDialogflowV2SuggestSmartRepliesResponse(BaseModel):
    contextSize: Optional[int] = Field(
        None,
        description="Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestSmartRepliesRequest.context_size field in the request if there aren't that many messages in the conversation.",
    )
    latestMessage: Optional[str] = Field(
        None,
        description='The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`.',
    )
    smartReplyAnswers: Optional[List[GoogleCloudDialogflowV2SmartReplyAnswer]] = Field(
        None,
        description='Output only. Multiple reply options provided by smart reply service. The order is based on the rank of the model prediction. The maximum number of the returned replies is set in SmartReplyConfig.',
    )


class GoogleCloudDialogflowV2UndeployConversationModelOperationMetadata(BaseModel):
    conversationModel: Optional[str] = Field(
        None,
        description='The resource name of the conversation model. Format: `projects//conversationModels/`',
    )
    createTime: Optional[str] = Field(
        None,
        description='Timestamp when the request to undeploy conversation model was submitted. The time is measured on server side.',
    )


class GoogleCloudDialogflowV2beta1AnnotatedMessagePart(BaseModel):
    entityType: Optional[str] = Field(
        None,
        description='Optional. The [Dialogflow system entity type](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. If this is empty, Dialogflow could not annotate the phrase part with a system entity.',
    )
    formattedValue: Optional[Any] = Field(
        None,
        description='Optional. The [Dialogflow system entity formatted value ](https://cloud.google.com/dialogflow/docs/reference/system-entities) of this message part. For example for a system entity of type `@sys.unit-currency`, this may contain: { "amount": 5, "currency": "USD" } ',
    )
    text: Optional[str] = Field(
        None,
        description='Required. A part of a message possibly annotated with an entity.',
    )


class GoogleCloudDialogflowV2beta1ArticleAnswer(BaseModel):
    answerRecord: Optional[str] = Field(
        None,
        description='The name of answer record, in the format of "projects//locations//answerRecords/"',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='A map that contains metadata about the answer and the document from which it originates.',
    )
    snippets: Optional[List[str]] = Field(
        None, description='Output only. Article snippets.'
    )
    title: Optional[str] = Field(None, description='The article title.')
    uri: Optional[str] = Field(None, description='The article URI.')


class SuggestionFeatureType2(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    ARTICLE_SUGGESTION = 'ARTICLE_SUGGESTION'
    FAQ = 'FAQ'
    SMART_REPLY = 'SMART_REPLY'
    CONVERSATION_SUMMARIZATION = 'CONVERSATION_SUMMARIZATION'


class GoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigOperationMetadata(
    BaseModel
):
    conversationProfile: Optional[str] = Field(
        None,
        description='The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/`',
    )
    createTime: Optional[str] = Field(
        None,
        description='Timestamp whe the request was created. The time is measured on server side.',
    )
    participantRole: Optional[ParticipantRole] = Field(
        None,
        description='Required. The participant role to remove the suggestion feature config. Only HUMAN_AGENT or END_USER can be used.',
    )
    suggestionFeatureType: Optional[SuggestionFeatureType2] = Field(
        None, description='Required. The type of the suggestion feature to remove.'
    )


class GoogleCloudDialogflowV2beta1Context(BaseModel):
    lifespanCount: Optional[int] = Field(
        None,
        description='Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.',
    )
    name: Optional[str] = Field(
        None,
        description="Required. The unique identifier of the context. Supported formats: - `projects//agent/sessions//contexts/`, - `projects//locations//agent/sessions//contexts/`, - `projects//agent/environments//users//sessions//contexts/`, - `projects//locations//agent/environments//users//sessions//contexts/`, The `Context ID` is always converted to lowercase, may only contain characters in a-zA-Z0-9_-% and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`",
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value",
    )


class Type5(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    CONVERSATION_STARTED = 'CONVERSATION_STARTED'
    CONVERSATION_FINISHED = 'CONVERSATION_FINISHED'
    HUMAN_INTERVENTION_NEEDED = 'HUMAN_INTERVENTION_NEEDED'
    NEW_MESSAGE = 'NEW_MESSAGE'
    UNRECOVERABLE_ERROR = 'UNRECOVERABLE_ERROR'


class GoogleCloudDialogflowV2beta1EntityTypeEntity(BaseModel):
    synonyms: Optional[List[str]] = Field(
        None,
        description='Required. A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.',
    )
    value: Optional[str] = Field(
        None,
        description='Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).',
    )


class GoogleCloudDialogflowV2beta1EventInput(BaseModel):
    languageCode: Optional[str] = Field(
        None,
        description='Required. The language of this query. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. This field is ignored when used in the context of a WebhookResponse.followup_event_input field, because the language was already defined in the originating detect intent request.',
    )
    name: Optional[str] = Field(
        None, description='Required. The unique identifier of the event.'
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="The collection of parameters associated with the event. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value",
    )


class GoogleCloudDialogflowV2beta1ExportAgentResponse(BaseModel):
    agentContent: Optional[str] = Field(
        None, description='Zip compressed raw byte content for agent.'
    )
    agentUri: Optional[str] = Field(
        None,
        description='The URI to a file containing the exported agent. This field is populated only if `agent_uri` is specified in `ExportAgentRequest`.',
    )


class GoogleCloudDialogflowV2beta1FaqAnswer(BaseModel):
    answer: Optional[str] = Field(
        None, description='The piece of text from the `source` knowledge base document.'
    )
    answerRecord: Optional[str] = Field(
        None,
        description='The name of answer record, in the format of "projects//locations//answerRecords/"',
    )
    confidence: Optional[float] = Field(
        None,
        description="The system's confidence score that this Knowledge answer is a good match for this conversational query, range from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='A map that contains metadata about the answer and the document from which it originates.',
    )
    question: Optional[str] = Field(None, description='The corresponding FAQ question.')
    source: Optional[str] = Field(
        None,
        description='Indicates which Knowledge Document this answer was extracted from. Format: `projects//locations//agent/knowledgeBases//documents/`.',
    )


class GoogleCloudDialogflowV2beta1GcsDestination(BaseModel):
    uri: Optional[str] = Field(
        None,
        description='Required. The Google Cloud Storage URIs for the output. A URI is of the form: gs://bucket/object-prefix-or-name Whether a prefix or name is used depends on the use case. The requesting user must have "write-permission" to the bucket.',
    )


class DefaultResponsePlatform1(Enum):
    PLATFORM_UNSPECIFIED = 'PLATFORM_UNSPECIFIED'
    FACEBOOK = 'FACEBOOK'
    SLACK = 'SLACK'
    TELEGRAM = 'TELEGRAM'
    KIK = 'KIK'
    SKYPE = 'SKYPE'
    LINE = 'LINE'
    VIBER = 'VIBER'
    ACTIONS_ON_GOOGLE = 'ACTIONS_ON_GOOGLE'
    TELEPHONY = 'TELEPHONY'
    GOOGLE_HANGOUTS = 'GOOGLE_HANGOUTS'


class GoogleCloudDialogflowV2beta1IntentFollowupIntentInfo(BaseModel):
    followupIntentName: Optional[str] = Field(
        None,
        description='The unique identifier of the followup intent. Format: `projects//agent/intents/`.',
    )
    parentFollowupIntentName: Optional[str] = Field(
        None,
        description="The unique identifier of the followup intent's parent. Format: `projects//agent/intents/`.",
    )


class Platform1(Enum):
    PLATFORM_UNSPECIFIED = 'PLATFORM_UNSPECIFIED'
    FACEBOOK = 'FACEBOOK'
    SLACK = 'SLACK'
    TELEGRAM = 'TELEGRAM'
    KIK = 'KIK'
    SKYPE = 'SKYPE'
    LINE = 'LINE'
    VIBER = 'VIBER'
    ACTIONS_ON_GOOGLE = 'ACTIONS_ON_GOOGLE'
    TELEPHONY = 'TELEPHONY'
    GOOGLE_HANGOUTS = 'GOOGLE_HANGOUTS'


class GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonOpenUriAction(BaseModel):
    uri: Optional[str] = Field(
        None, description='Required. The HTTP or HTTPS scheme URI.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlAction(
    BaseModel
):
    url: Optional[str] = Field(None, description='Required. URL')
    urlTypeHint: Optional[UrlTypeHint] = Field(
        None,
        description='Optional. Specifies the type of viewer that is used when opening the URL. Defaults to opening via web browser.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageCardButton(BaseModel):
    postback: Optional[str] = Field(
        None,
        description='Optional. The text to send back to the Dialogflow API or a URI to open.',
    )
    text: Optional[str] = Field(
        None, description='Optional. The text to show on the button.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageColumnProperties(BaseModel):
    header: Optional[str] = Field(None, description='Required. Column heading.')
    horizontalAlignment: Optional[HorizontalAlignment] = Field(
        None,
        description='Optional. Defines text alignment for all cells in this column.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageImage(BaseModel):
    accessibilityText: Optional[str] = Field(
        None,
        description='A text description of the image to be used for accessibility, e.g., screen readers. Required if image_uri is set for CarouselSelect.',
    )
    imageUri: Optional[str] = Field(
        None, description='Optional. The public URI to an image file.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageLinkOutSuggestion(BaseModel):
    destinationName: Optional[str] = Field(
        None,
        description='Required. The name of the app or site this chip is linking to.',
    )
    uri: Optional[str] = Field(
        None,
        description='Required. The URI of the app or site to open when the user taps the suggestion chip.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObject(
    BaseModel
):
    contentUrl: Optional[str] = Field(
        None, description='Required. Url where the media is stored.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of media card.'
    )
    icon: Optional[GoogleCloudDialogflowV2beta1IntentMessageImage] = Field(
        None, description='Optional. Icon to display above media content.'
    )
    largeImage: Optional[GoogleCloudDialogflowV2beta1IntentMessageImage] = Field(
        None, description='Optional. Image to display above media content.'
    )
    name: Optional[str] = Field(None, description='Required. Name of media card.')


class GoogleCloudDialogflowV2beta1IntentMessageQuickReplies(BaseModel):
    quickReplies: Optional[List[str]] = Field(
        None, description='Optional. The collection of quick replies.'
    )
    title: Optional[str] = Field(
        None, description='Optional. The title of the collection of quick replies.'
    )


class Height(Enum):
    HEIGHT_UNSPECIFIED = 'HEIGHT_UNSPECIFIED'
    SHORT = 'SHORT'
    MEDIUM = 'MEDIUM'
    TALL = 'TALL'


class GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMedia(BaseModel):
    fileUri: Optional[str] = Field(
        None,
        description='Required. Publicly reachable URI of the file. The RBM platform determines the MIME type of the file from the content-type field in the HTTP headers when the platform fetches the file. The content-type field must be present and accurate in the HTTP response from the URL.',
    )
    height: Optional[Height] = Field(
        None,
        description='Required for cards with vertical orientation. The height of the media within a rich card with a vertical layout. For a standalone card with horizontal layout, height is not customizable, and this field is ignored.',
    )
    thumbnailUri: Optional[str] = Field(
        None,
        description="Optional. Publicly reachable URI of the thumbnail.If you don't provide a thumbnail URI, the RBM platform displays a blank placeholder thumbnail until the user's device downloads the file. Depending on the user's setting, the file may not download automatically and may require the user to tap a download button.",
    )


class CardWidth(Enum):
    CARD_WIDTH_UNSPECIFIED = 'CARD_WIDTH_UNSPECIFIED'
    SMALL = 'SMALL'
    MEDIUM = 'MEDIUM'


class CardOrientation(Enum):
    CARD_ORIENTATION_UNSPECIFIED = 'CARD_ORIENTATION_UNSPECIFIED'
    HORIZONTAL = 'HORIZONTAL'
    VERTICAL = 'VERTICAL'


class ThumbnailImageAlignment(Enum):
    THUMBNAIL_IMAGE_ALIGNMENT_UNSPECIFIED = 'THUMBNAIL_IMAGE_ALIGNMENT_UNSPECIFIED'
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'


class GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDial(
    BaseModel
):
    phoneNumber: Optional[str] = Field(
        None,
        description='Required. The phone number to fill in the default dialer app. This field should be in [E.164](https://en.wikipedia.org/wiki/E.164) format. An example of a correctly formatted phone number: +15556767888.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUri(
    BaseModel
):
    uri: Optional[str] = Field(
        None, description='Required. The uri to open on the user device'
    )


class GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionShareLocation(
    BaseModel
):
    pass


class GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedReply(BaseModel):
    postbackData: Optional[str] = Field(
        None,
        description='Opaque payload that the Dialogflow receives in a user event when the user taps the suggested reply. This data will be also forwarded to webhook to allow performing custom business logic.',
    )
    text: Optional[str] = Field(None, description='Suggested reply text.')


class GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfo(BaseModel):
    key: Optional[str] = Field(
        None,
        description='Required. A unique key that will be sent back to the agent if this response is given.',
    )
    synonyms: Optional[List[str]] = Field(
        None,
        description='Optional. A list of synonyms that can also be used to trigger this item in dialog.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageSimpleResponse(BaseModel):
    displayText: Optional[str] = Field(
        None, description='Optional. The text to display.'
    )
    ssml: Optional[str] = Field(
        None,
        description='One of text_to_speech or ssml must be provided. Structured spoken response to the user in the SSML format. Mutually exclusive with text_to_speech.',
    )
    textToSpeech: Optional[str] = Field(
        None,
        description='One of text_to_speech or ssml must be provided. The plain text of the speech output. Mutually exclusive with ssml.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageSimpleResponses(BaseModel):
    simpleResponses: Optional[
        List[GoogleCloudDialogflowV2beta1IntentMessageSimpleResponse]
    ] = Field(None, description='Required. The list of simple responses.')


class GoogleCloudDialogflowV2beta1IntentMessageSuggestion(BaseModel):
    title: Optional[str] = Field(
        None, description='Required. The text shown the in the suggestion chip.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageSuggestions(BaseModel):
    suggestions: Optional[List[GoogleCloudDialogflowV2beta1IntentMessageSuggestion]] = (
        Field(None, description='Required. The list of suggested replies.')
    )


class GoogleCloudDialogflowV2beta1IntentMessageTableCardCell(BaseModel):
    text: Optional[str] = Field(None, description='Required. Text in this cell.')


class GoogleCloudDialogflowV2beta1IntentMessageTableCardRow(BaseModel):
    cells: Optional[List[GoogleCloudDialogflowV2beta1IntentMessageTableCardCell]] = (
        Field(None, description='Optional. List of cells that make up this row.')
    )
    dividerAfter: Optional[bool] = Field(
        None, description='Optional. Whether to add a visual divider after this row.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageTelephonyPlayAudio(BaseModel):
    audioUri: Optional[str] = Field(
        None,
        description='Required. URI to a Google Cloud Storage object containing the audio to play, e.g., "gs://bucket/object". The object must contain a single channel (mono) of linear PCM audio (2 bytes / sample) at 8kHz. This object must be readable by the `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` service account where is the number of the Telephony Gateway project (usually the same as the Dialogflow agent project). If the Google Cloud Storage bucket is in the Telephony Gateway project, this permission is added by default when enabling the Dialogflow V2 API. For audio from other sources, consider using the `TelephonySynthesizeSpeech` message with SSML.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageTelephonySynthesizeSpeech(BaseModel):
    ssml: Optional[str] = Field(
        None,
        description='The SSML to be synthesized. For more information, see [SSML](https://developers.google.com/actions/reference/ssml).',
    )
    text: Optional[str] = Field(None, description='The raw text to be synthesized.')


class GoogleCloudDialogflowV2beta1IntentMessageTelephonyTransferCall(BaseModel):
    phoneNumber: Optional[str] = Field(
        None,
        description='Required. The phone number to transfer the call to in [E.164 format](https://en.wikipedia.org/wiki/E.164). We currently only allow transferring to US numbers (+1xxxyyyzzzz).',
    )


class GoogleCloudDialogflowV2beta1IntentMessageText(BaseModel):
    text: Optional[List[str]] = Field(
        None, description="Optional. The collection of the agent's responses."
    )


class GoogleCloudDialogflowV2beta1IntentParameter(BaseModel):
    defaultValue: Optional[str] = Field(
        None,
        description='Optional. The default value to use when the `value` yields an empty result. Default values can be extracted from contexts by using the following syntax: `#context_name.parameter_name`.',
    )
    displayName: Optional[str] = Field(
        None, description='Required. The name of the parameter.'
    )
    entityTypeDisplayName: Optional[str] = Field(
        None,
        description='Optional. The name of the entity type, prefixed with `@`, that describes values of the parameter. If the parameter is required, this must be provided.',
    )
    isList: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether the parameter represents a list of values.',
    )
    mandatory: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether the parameter is required. That is, whether the intent cannot be completed without collecting the parameter value.',
    )
    name: Optional[str] = Field(
        None, description='The unique identifier of this parameter.'
    )
    prompts: Optional[List[str]] = Field(
        None,
        description='Optional. The collection of prompts that the agent can present to the user in order to collect a value for the parameter.',
    )
    value: Optional[str] = Field(
        None,
        description='Optional. The definition of the parameter value. It can be: - a constant string, - a parameter value defined as `$parameter_name`, - an original parameter value defined as `$parameter_name.original`, - a parameter value from some context defined as `#context_name.parameter_name`.',
    )


class Type6(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    EXAMPLE = 'EXAMPLE'
    TEMPLATE = 'TEMPLATE'


class GoogleCloudDialogflowV2beta1IntentTrainingPhrasePart(BaseModel):
    alias: Optional[str] = Field(
        None,
        description='Optional. The parameter name for the value extracted from the annotated part of the example. This field is required for annotated parts of the training phrase.',
    )
    entityType: Optional[str] = Field(
        None,
        description='Optional. The entity type name prefixed with `@`. This field is required for annotated parts of the training phrase.',
    )
    text: Optional[str] = Field(None, description='Required. The text for this part.')
    userDefined: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether the text was manually annotated. This field is set to true when the Dialogflow Console is used to manually annotate the part. When creating an annotated part with the API, you must set this to true.',
    )


class MatchConfidenceLevel(Enum):
    MATCH_CONFIDENCE_LEVEL_UNSPECIFIED = 'MATCH_CONFIDENCE_LEVEL_UNSPECIFIED'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'


class GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswer(BaseModel):
    answer: Optional[str] = Field(
        None,
        description='The piece of text from the `source` knowledge base document that answers this conversational query.',
    )
    faqQuestion: Optional[str] = Field(
        None,
        description='The corresponding FAQ question if the answer was extracted from a FAQ Document, empty otherwise.',
    )
    matchConfidence: Optional[float] = Field(
        None,
        description="The system's confidence score that this Knowledge answer is a good match for this conversational query. The range is from 0.0 (completely uncertain) to 1.0 (completely certain). Note: The confidence score is likely to vary somewhat (possibly even for identical requests), as the underlying model is under constant improvement. It may be deprecated in the future. We recommend using `match_confidence_level` which should be generally more stable.",
    )
    matchConfidenceLevel: Optional[MatchConfidenceLevel] = Field(
        None,
        description="The system's confidence level that this knowledge answer is a good match for this conversational query. NOTE: The confidence level for a given `` pair may change without notice, as it depends on models that are constantly being improved. However, it will change less frequently than the confidence score below, and should be preferred for referencing the quality of an answer.",
    )
    source: Optional[str] = Field(
        None,
        description='Indicates which Knowledge Document this answer was extracted from. Format: `projects//knowledgeBases//documents/`.',
    )


class GoogleCloudDialogflowV2beta1MessageAnnotation(BaseModel):
    containEntities: Optional[bool] = Field(
        None,
        description='Required. Indicates whether the text message contains entities.',
    )
    parts: Optional[List[GoogleCloudDialogflowV2beta1AnnotatedMessagePart]] = Field(
        None,
        description='Optional. The collection of annotated message parts ordered by their position in the message. You can recover the annotated message by concatenating [AnnotatedMessagePart.text].',
    )


class GoogleCloudDialogflowV2beta1OriginalDetectIntentRequest(BaseModel):
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description='Optional. This field is set to the value of the `QueryParameters.payload` field passed in the request. Some integrations that query a Dialogflow agent may provide additional information in the payload. In particular, for the Dialogflow Phone Gateway integration, this field has the form: { "telephony": { "caller_id": "+18558363987" } } Note: The caller ID field (`caller_id`) will be redacted for Trial Edition agents and populated with the caller ID in [E.164 format](https://en.wikipedia.org/wiki/E.164) for Essentials Edition agents.',
    )
    source: Optional[str] = Field(
        None,
        description='The source of this request, e.g., `google`, `facebook`, `slack`. It is set by Dialogflow-owned servers.',
    )
    version: Optional[str] = Field(
        None,
        description='Optional. The version of the protocol used for this request. This field is AoG-specific.',
    )


class GoogleCloudDialogflowV2beta1Sentiment(BaseModel):
    magnitude: Optional[float] = Field(
        None,
        description='A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment, regardless of score (positive or negative).',
    )
    score: Optional[float] = Field(
        None,
        description='Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).',
    )


class GoogleCloudDialogflowV2beta1SentimentAnalysisResult(BaseModel):
    queryTextSentiment: Optional[GoogleCloudDialogflowV2beta1Sentiment] = Field(
        None, description='The sentiment analysis result for `query_text`.'
    )


class GoogleCloudDialogflowV2beta1SessionEntityType(BaseModel):
    entities: Optional[List[GoogleCloudDialogflowV2beta1EntityTypeEntity]] = Field(
        None,
        description='Required. The collection of entities associated with this session entity type.',
    )
    entityOverrideMode: Optional[EntityOverrideMode] = Field(
        None,
        description='Required. Indicates whether the additional data should override or supplement the custom entity type definition.',
    )
    name: Optional[str] = Field(
        None,
        description="Required. The unique identifier of this session entity type. Supported formats: - `projects//agent/sessions//entityTypes/` - `projects//locations//agent/sessions//entityTypes/` - `projects//agent/environments//users//sessions//entityTypes/` - `projects//locations//agent/environments/ /users//sessions//entityTypes/` If `Location ID` is not specified we assume default 'us' location. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. `` must be the display name of an existing entity type in the same agent that will be overridden or supplemented.",
    )


class GoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigOperationMetadata(
    BaseModel
):
    conversationProfile: Optional[str] = Field(
        None,
        description='The resource name of the conversation profile. Format: `projects//locations//conversationProfiles/`',
    )
    createTime: Optional[str] = Field(
        None,
        description='Timestamp whe the request was created. The time is measured on server side.',
    )
    participantRole: Optional[ParticipantRole] = Field(
        None,
        description='Required. The participant role to add or update the suggestion feature config. Only HUMAN_AGENT or END_USER can be used.',
    )
    suggestionFeatureType: Optional[SuggestionFeatureType2] = Field(
        None,
        description='Required. The type of the suggestion feature to add or update.',
    )


class GoogleCloudDialogflowV2beta1SmartReplyAnswer(BaseModel):
    answerRecord: Optional[str] = Field(
        None,
        description='The name of answer record, in the format of "projects//locations//answerRecords/"',
    )
    confidence: Optional[float] = Field(
        None,
        description="Smart reply confidence. The system's confidence score that this reply is a good match for this conversation, as a value from 0.0 (completely uncertain) to 1.0 (completely certain).",
    )
    reply: Optional[str] = Field(None, description='The content of the reply.')


class GoogleCloudDialogflowV2beta1SuggestArticlesResponse(BaseModel):
    articleAnswers: Optional[List[GoogleCloudDialogflowV2beta1ArticleAnswer]] = Field(
        None, description='Output only. Articles ordered by score in descending order.'
    )
    contextSize: Optional[int] = Field(
        None,
        description="Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestArticlesResponse.context_size field in the request if there aren't that many messages in the conversation.",
    )
    latestMessage: Optional[str] = Field(
        None,
        description='The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`.',
    )


class GoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse(BaseModel):
    contextSize: Optional[int] = Field(
        None,
        description="Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestFaqAnswersRequest.context_size field in the request if there aren't that many messages in the conversation.",
    )
    faqAnswers: Optional[List[GoogleCloudDialogflowV2beta1FaqAnswer]] = Field(
        None, description='Output only. Answers extracted from FAQ documents.'
    )
    latestMessage: Optional[str] = Field(
        None,
        description='The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`.',
    )


class GoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse(BaseModel):
    contextSize: Optional[int] = Field(
        None,
        description="Number of messages prior to and including latest_message to compile the suggestion. It may be smaller than the SuggestSmartRepliesRequest.context_size field in the request if there aren't that many messages in the conversation.",
    )
    latestMessage: Optional[str] = Field(
        None,
        description='The name of the latest conversation message used to compile suggestion for. Format: `projects//locations//conversations//messages/`.',
    )
    smartReplyAnswers: Optional[List[GoogleCloudDialogflowV2beta1SmartReplyAnswer]] = (
        Field(
            None,
            description='Output only. Multiple reply options provided by smart reply service. The order is based on the rank of the model prediction. The maximum number of the returned replies is set in SmartReplyConfig.',
        )
    )


class GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata(BaseModel):
    state: Optional[State10] = Field(
        None, description='Required. Output only. The current state of this operation.'
    )


class GoogleCloudDialogflowV3alpha1ImportDocumentsOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowV3alpha1ReloadDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowV3alpha1TurnSignals(BaseModel):
    agentEscalated: Optional[bool] = Field(
        None, description='Whether agent responded with LiveAgentHandoff fulfillment.'
    )
    dtmfUsed: Optional[bool] = Field(
        None, description='Whether user was using DTMF input.'
    )
    failureReasons: Optional[List[FailureReason]] = Field(
        None, description='Failure reasons of the turn.'
    )
    noMatch: Optional[bool] = Field(None, description='Whether NLU predicted NO_MATCH.')
    noUserInput: Optional[bool] = Field(
        None, description='Whether user provided no input.'
    )
    reachedEndPage: Optional[bool] = Field(
        None, description='Whether turn resulted in End Session page.'
    )
    triggeredAbandonmentEvent: Optional[bool] = Field(
        None,
        description='Whether agent has triggered the event corresponding to user abandoning the conversation.',
    )
    userEscalated: Optional[bool] = Field(
        None, description='Whether user was specifically asking for a live agent.'
    )
    webhookStatuses: Optional[List[str]] = Field(
        None,
        description='Human-readable statuses of the webhooks triggered during this turn.',
    )


class GoogleCloudDialogflowV3alpha1UpdateDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudLocationLocation(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class GoogleProtobufEmpty(BaseModel):
    pass


class GoogleRpcStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class GoogleTypeLatLng(BaseModel):
    latitude: Optional[float] = Field(
        None,
        description='The latitude in degrees. It must be in the range [-90.0, +90.0].',
    )
    longitude: Optional[float] = Field(
        None,
        description='The longitude in degrees. It must be in the range [-180.0, +180.0].',
    )


class Type7(Enum):
    COVERAGE_TYPE_UNSPECIFIED = 'COVERAGE_TYPE_UNSPECIFIED'
    INTENT = 'INTENT'
    PAGE_TRANSITION = 'PAGE_TRANSITION'
    TRANSITION_ROUTE_GROUP = 'TRANSITION_ROUTE_GROUP'


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class IntentView(Enum):
    INTENT_VIEW_UNSPECIFIED = 'INTENT_VIEW_UNSPECIFIED'
    INTENT_VIEW_PARTIAL = 'INTENT_VIEW_PARTIAL'
    INTENT_VIEW_FULL = 'INTENT_VIEW_FULL'


class View(Enum):
    TEST_CASE_VIEW_UNSPECIFIED = 'TEST_CASE_VIEW_UNSPECIFIED'
    BASIC = 'BASIC'
    FULL = 'FULL'


class GoogleCloudDialogflowCxV3AudioInput(BaseModel):
    audio: Optional[str] = Field(
        None,
        description='The natural language speech audio to be processed. A single request can contain up to 2 minutes of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests.',
    )
    config: Optional[GoogleCloudDialogflowCxV3InputAudioConfig] = Field(
        None,
        description='Required. Instructs the speech recognizer how to process the speech audio.',
    )


class GoogleCloudDialogflowCxV3ConversationSignals(BaseModel):
    turnSignals: Optional[GoogleCloudDialogflowCxV3TurnSignals] = Field(
        None, description='Required. Turn signals for the current turn.'
    )


class GoogleCloudDialogflowCxV3CreateDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowCxV3DeleteDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowCxV3GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowCxV3ImportDocumentsResponse(BaseModel):
    warnings: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='Includes details about skipped documents or any other warnings.',
    )


class GoogleCloudDialogflowCxV3IntentTrainingPhrase(BaseModel):
    id: Optional[str] = Field(
        None, description='Output only. The unique identifier of the training phrase.'
    )
    parts: Optional[List[GoogleCloudDialogflowCxV3IntentTrainingPhrasePart]] = Field(
        None,
        description='Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `parameter_id` field is set.',
    )
    repeatCount: Optional[int] = Field(
        None,
        description='Indicates how many times this example was added to the intent.',
    )


class GoogleCloudDialogflowCxV3PageInfoFormInfo(BaseModel):
    parameterInfo: Optional[
        List[GoogleCloudDialogflowCxV3PageInfoFormInfoParameterInfo]
    ] = Field(
        None,
        description='Optional for both WebhookRequest and WebhookResponse. The parameters contained in the form. Note that the webhook cannot add or remove any form parameter.',
    )


class GoogleCloudDialogflowCxV3QueryInput(BaseModel):
    audio: Optional[GoogleCloudDialogflowCxV3AudioInput] = Field(
        None, description='The natural language speech audio to be processed.'
    )
    dtmf: Optional[GoogleCloudDialogflowCxV3DtmfInput] = Field(
        None, description='The DTMF event to be handled.'
    )
    event: Optional[GoogleCloudDialogflowCxV3EventInput] = Field(
        None, description='The event to be triggered.'
    )
    intent: Optional[GoogleCloudDialogflowCxV3IntentInput] = Field(
        None, description='The intent to be triggered.'
    )
    languageCode: Optional[str] = Field(
        None,
        description='Required. The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language.',
    )
    text: Optional[GoogleCloudDialogflowCxV3TextInput] = Field(
        None, description='The natural language text to be processed.'
    )


class GoogleCloudDialogflowCxV3ResponseMessageMixedAudio(BaseModel):
    segments: Optional[
        List[GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegment]
    ] = Field(None, description='Segments this audio response is composed of.')


class GoogleCloudDialogflowCxV3TestError(BaseModel):
    status: Optional[GoogleRpcStatus] = Field(
        None, description='The status associated with the test.'
    )
    testCase: Optional[str] = Field(None, description='The test case resource name.')
    testTime: Optional[str] = Field(
        None, description='The timestamp when the test was completed.'
    )


class GoogleCloudDialogflowCxV3Webhook(BaseModel):
    disabled: Optional[bool] = Field(
        None, description='Indicates whether the webhook is disabled.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the webhook, unique within the agent.',
    )
    genericWebService: Optional[GoogleCloudDialogflowCxV3WebhookGenericWebService] = (
        Field(None, description='Configuration for a generic web service.')
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: `projects//locations//agents//webhooks/`.',
    )
    serviceDirectory: Optional[
        GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig
    ] = Field(
        None,
        description='Configuration for a [Service Directory](https://cloud.google.com/service-directory) service.',
    )
    timeout: Optional[str] = Field(
        None,
        description="Webhook execution timeout. Execution is considered failed if Dialogflow doesn't receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds.",
    )


class GoogleCloudDialogflowCxV3WebhookRequestIntentInfo(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='The confidence of the matched intent. Values range from 0.0 (completely uncertain) to 1.0 (completely certain).',
    )
    displayName: Optional[str] = Field(
        None, description='Always present. The display name of the last matched intent.'
    )
    lastMatchedIntent: Optional[str] = Field(
        None,
        description='Always present. The unique identifier of the last matched intent. Format: `projects//locations//agents//intents/`.',
    )
    parameters: Optional[
        Dict[str, GoogleCloudDialogflowCxV3WebhookRequestIntentInfoIntentParameterValue]
    ] = Field(
        None,
        description="Parameters identified as a result of intent matching. This is a map of the name of the identified parameter to the value of the parameter identified from the user's utterance. All parameters defined in the matched intent that are identified will be surfaced here.",
    )


class GoogleCloudDialogflowCxV3beta1AdvancedSettings(BaseModel):
    audioExportGcsDestination: Optional[
        GoogleCloudDialogflowCxV3beta1GcsDestination
    ] = Field(
        None,
        description='If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels: - Agent level - Flow level',
    )
    loggingSettings: Optional[
        GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettings
    ] = Field(
        None,
        description='Settings for logging. Settings for Dialogflow History, Contact Center messages, StackDriver logs, and speech logging. Exposed at the following levels: - Agent level.',
    )


class GoogleCloudDialogflowCxV3beta1AudioInput(BaseModel):
    audio: Optional[str] = Field(
        None,
        description='The natural language speech audio to be processed. A single request can contain up to 2 minutes of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests.',
    )
    config: Optional[GoogleCloudDialogflowCxV3beta1InputAudioConfig] = Field(
        None,
        description='Required. Instructs the speech recognizer how to process the speech audio.',
    )


class GoogleCloudDialogflowCxV3beta1ConversationSignals(BaseModel):
    turnSignals: Optional[GoogleCloudDialogflowCxV3beta1TurnSignals] = Field(
        None, description='Required. Turn signals for the current turn.'
    )


class GoogleCloudDialogflowCxV3beta1CreateDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowCxV3beta1DeleteDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowCxV3beta1GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowCxV3beta1Deployment(BaseModel):
    endTime: Optional[str] = Field(None, description='End time of this deployment.')
    flowVersion: Optional[str] = Field(
        None,
        description='The name of the flow version for this deployment. Format: projects//locations//agents//flows//versions/.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the deployment. Format: projects//locations//agents//environments//deployments/.',
    )
    result: Optional[GoogleCloudDialogflowCxV3beta1DeploymentResult] = Field(
        None, description='Result of the deployment.'
    )
    startTime: Optional[str] = Field(None, description='Start time of this deployment.')
    state: Optional[State2] = Field(
        None, description='The current state of the deployment.'
    )


class GoogleCloudDialogflowCxV3beta1EntityType(BaseModel):
    autoExpansionMode: Optional[AutoExpansionMode] = Field(
        None,
        description='Indicates whether the entity type can be automatically expanded.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the entity type, unique within the agent.',
    )
    enableFuzzyExtraction: Optional[bool] = Field(
        None, description='Enables fuzzy entity extraction during classification.'
    )
    entities: Optional[List[GoogleCloudDialogflowCxV3beta1EntityTypeEntity]] = Field(
        None,
        description='The collection of entity entries associated with the entity type.',
    )
    excludedPhrases: Optional[
        List[GoogleCloudDialogflowCxV3beta1EntityTypeExcludedPhrase]
    ] = Field(
        None,
        description="Collection of exceptional words and phrases that shouldn't be matched. For example, if you have a size entity type with entry `giant`(an adjective), you might consider adding `giants`(a noun) as an exclusion. If the kind of entity type is `KIND_MAP`, then the phrases specified by entities and excluded phrases should be mutually exclusive.",
    )
    kind: Optional[Kind] = Field(
        None, description='Required. Indicates the kind of entity type.'
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType. Format: `projects//locations//agents//entityTypes/`.',
    )
    redact: Optional[bool] = Field(
        None,
        description='Indicates whether parameters of the entity type should be redacted in log. If redaction is enabled, page parameters and intent parameters referring to the entity type will be replaced by parameter name during logging.',
    )


class GoogleCloudDialogflowCxV3beta1ExperimentResult(BaseModel):
    lastUpdateTime: Optional[str] = Field(
        None,
        description="The last time the experiment's stats data was updated. Will have default value if stats have never been computed for this experiment.",
    )
    versionMetrics: Optional[
        List[GoogleCloudDialogflowCxV3beta1ExperimentResultVersionMetrics]
    ] = Field(None, description='Version variants and metrics.')


class GoogleCloudDialogflowCxV3beta1FlowValidationResult(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the flow validation result. Format: `projects//locations//agents//flows//validationResult`.',
    )
    updateTime: Optional[str] = Field(
        None, description='Last time the flow was validated.'
    )
    validationMessages: Optional[
        List[GoogleCloudDialogflowCxV3beta1ValidationMessage]
    ] = Field(None, description='Contains all validation messages.')


class GoogleCloudDialogflowCxV3beta1ImportDocumentsResponse(BaseModel):
    warnings: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='Includes details about skipped documents or any other warnings.',
    )


class GoogleCloudDialogflowCxV3beta1IntentCoverage(BaseModel):
    coverageScore: Optional[float] = Field(
        None, description='The percent of intents in the agent that are covered.'
    )
    intents: Optional[List[GoogleCloudDialogflowCxV3beta1IntentCoverageIntent]] = Field(
        None, description='The list of Intents present in the agent'
    )


class GoogleCloudDialogflowCxV3beta1IntentTrainingPhrase(BaseModel):
    id: Optional[str] = Field(
        None, description='Output only. The unique identifier of the training phrase.'
    )
    parts: Optional[List[GoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePart]] = (
        Field(
            None,
            description='Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `parameter_id` field is set.',
        )
    )
    repeatCount: Optional[int] = Field(
        None,
        description='Indicates how many times this example was added to the intent.',
    )


class GoogleCloudDialogflowCxV3beta1ListDeploymentsResponse(BaseModel):
    deployments: Optional[List[GoogleCloudDialogflowCxV3beta1Deployment]] = Field(
        None,
        description="The list of deployments. There will be a maximum number of items returned based on the page_size field in the request. The list may in some cases be empty or contain fewer entries than page_size even if this isn't the last page.",
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDialogflowCxV3beta1ListEntityTypesResponse(BaseModel):
    entityTypes: Optional[List[GoogleCloudDialogflowCxV3beta1EntityType]] = Field(
        None,
        description='The list of entity types. There will be a maximum number of items returned based on the page_size field in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDialogflowCxV3beta1ListSessionEntityTypesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    sessionEntityTypes: Optional[
        List[GoogleCloudDialogflowCxV3beta1SessionEntityType]
    ] = Field(
        None,
        description='The list of session entity types. There will be a maximum number of items returned based on the page_size field in the request.',
    )


class GoogleCloudDialogflowCxV3beta1ListVersionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    versions: Optional[List[GoogleCloudDialogflowCxV3beta1Version]] = Field(
        None,
        description="A list of versions. There will be a maximum number of items returned based on the page_size field in the request. The list may in some cases be empty or contain fewer entries than page_size even if this isn't the last page.",
    )


class GoogleCloudDialogflowCxV3beta1PageInfoFormInfo(BaseModel):
    parameterInfo: Optional[
        List[GoogleCloudDialogflowCxV3beta1PageInfoFormInfoParameterInfo]
    ] = Field(
        None,
        description='Optional for both WebhookRequest and WebhookResponse. The parameters contained in the form. Note that the webhook cannot add or remove any form parameter.',
    )


class GoogleCloudDialogflowCxV3beta1QueryInput(BaseModel):
    audio: Optional[GoogleCloudDialogflowCxV3beta1AudioInput] = Field(
        None, description='The natural language speech audio to be processed.'
    )
    dtmf: Optional[GoogleCloudDialogflowCxV3beta1DtmfInput] = Field(
        None, description='The DTMF event to be handled.'
    )
    event: Optional[GoogleCloudDialogflowCxV3beta1EventInput] = Field(
        None, description='The event to be triggered.'
    )
    intent: Optional[GoogleCloudDialogflowCxV3beta1IntentInput] = Field(
        None, description='The intent to be triggered.'
    )
    languageCode: Optional[str] = Field(
        None,
        description='Required. The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language.',
    )
    text: Optional[GoogleCloudDialogflowCxV3beta1TextInput] = Field(
        None, description='The natural language text to be processed.'
    )


class GoogleCloudDialogflowCxV3beta1QueryParameters(BaseModel):
    analyzeQueryTextSentiment: Optional[bool] = Field(
        None,
        description='Configures whether sentiment analysis should be performed. If not provided, sentiment analysis is not performed.',
    )
    channel: Optional[str] = Field(
        None,
        description='The channel which this query is for. If specified, only the ResponseMessage associated with the channel will be returned. If no ResponseMessage is associated with the channel, it falls back to the ResponseMessage with unspecified channel. If unspecified, the ResponseMessage with unspecified channel will be returned.',
    )
    currentPage: Optional[str] = Field(
        None,
        description='The unique identifier of the page to override the current page in the session. Format: `projects//locations//agents//flows//pages/`. If `current_page` is specified, the previous state of the session will be ignored by Dialogflow, including the previous page and the previous session parameters. In most cases, current_page and parameters should be configured together to direct a session to a specific state.',
    )
    disableWebhook: Optional[bool] = Field(
        None, description='Whether to disable webhook calls for this request.'
    )
    flowVersions: Optional[List[str]] = Field(
        None,
        description='A list of flow versions to override for the request. Format: `projects//locations//agents//flows//versions/`. If version 1 of flow X is included in this list, the traffic of flow X will go through version 1 regardless of the version configuration in the environment. Each flow can have at most one version specified in this list.',
    )
    geoLocation: Optional[GoogleTypeLatLng] = Field(
        None, description='The geo location of this conversational query.'
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="Additional parameters to be put into session parameters. To remove a parameter from the session, clients should explicitly set the parameter value to null. You can reference the session parameters in the agent with the following format: $session.params.parameter-id. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.",
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description='This field can be used to pass custom data into the webhook associated with the agent. Arbitrary JSON objects are supported. Some integrations that query a Dialogflow agent may provide additional information in the payload. In particular, for the Dialogflow Phone Gateway integration, this field has the form: ``` { "telephony": { "caller_id": "+18558363987" } } ```',
    )
    sessionEntityTypes: Optional[
        List[GoogleCloudDialogflowCxV3beta1SessionEntityType]
    ] = Field(
        None,
        description='Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session of this query.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='The time zone of this conversational query from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. If not provided, the time zone specified in the agent is used.',
    )
    webhookHeaders: Optional[Dict[str, str]] = Field(
        None,
        description='This field can be used to pass HTTP headers for a webhook call. These headers will be sent to webhook along with the headers that have been configured through Dialogflow web console. The headers defined within this field will overwrite the headers configured through Dialogflow console if there is a conflict. Header names are case-insensitive. Google\'s specified headers are not allowed. Including: "Host", "Content-Length", "Connection", "From", "User-Agent", "Accept-Encoding", "If-Modified-Since", "If-None-Match", "X-Forwarded-For", etc.',
    )


class GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudio(BaseModel):
    segments: Optional[
        List[GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegment]
    ] = Field(None, description='Segments this audio response is composed of.')


class GoogleCloudDialogflowCxV3beta1RolloutConfig(BaseModel):
    failureCondition: Optional[str] = Field(
        None,
        description='The conditions that are used to evaluate the failure of a rollout step. If not specified, no rollout steps will fail. E.g. "containment_rate < 10% OR average_turn_count < 3". See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).',
    )
    rolloutCondition: Optional[str] = Field(
        None,
        description='The conditions that are used to evaluate the success of a rollout step. If not specified, all rollout steps will proceed to the next one unless failure conditions are met. E.g. "containment_rate > 60% AND callback_rate < 20%". See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).',
    )
    rolloutSteps: Optional[
        List[GoogleCloudDialogflowCxV3beta1RolloutConfigRolloutStep]
    ] = Field(
        None,
        description='Steps to roll out a flow version. Steps should be sorted by percentage in ascending order.',
    )


class GoogleCloudDialogflowCxV3beta1SecuritySettings(BaseModel):
    audioExportSettings: Optional[
        GoogleCloudDialogflowCxV3beta1SecuritySettingsAudioExportSettings
    ] = Field(
        None,
        description="Controls audio export settings for post-conversation analytics when ingesting audio to conversations via Participants.AnalyzeContent or Participants.StreamingAnalyzeContent. If retention_strategy is set to REMOVE_AFTER_CONVERSATION or audio_export_settings.gcs_bucket is empty, audio export is disabled. If audio export is enabled, audio is recorded and saved to audio_export_settings.gcs_bucket, subject to retention policy of audio_export_settings.gcs_bucket. This setting won't effect audio input for implicit sessions via Sessions.DetectIntent or Sessions.StreamingDetectIntent.",
    )
    deidentifyTemplate: Optional[str] = Field(
        None,
        description="[DLP](https://cloud.google.com/dlp/docs) deidentify template name. Use this template to define de-identification configuration for the content. The `DLP De-identify Templates Reader` role is needed on the Dialogflow service identity service account (has the form `service-PROJECT_NUMBER@gcp-sa-dialogflow.iam.gserviceaccount.com`) for your agent's project. If empty, Dialogflow replaces sensitive info with `[redacted]` text. The template name will have one of the following formats: `projects//locations//deidentifyTemplates/` OR `organizations//locations//deidentifyTemplates/` Note: `deidentify_template` must be located in the same region as the `SecuritySettings`.",
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the security settings, unique within the location.',
    )
    insightsExportSettings: Optional[
        GoogleCloudDialogflowCxV3beta1SecuritySettingsInsightsExportSettings
    ] = Field(
        None,
        description='Controls conversation exporting settings to Insights after conversation is completed. If retention_strategy is set to REMOVE_AFTER_CONVERSATION, Insights export is disabled no matter what you configure here.',
    )
    inspectTemplate: Optional[str] = Field(
        None,
        description="[DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this template to define inspect base settings. The `DLP Inspect Templates Reader` role is needed on the Dialogflow service identity service account (has the form `service-PROJECT_NUMBER@gcp-sa-dialogflow.iam.gserviceaccount.com`) for your agent's project. If empty, we use the default DLP inspect config. The template name will have one of the following formats: `projects//locations//inspectTemplates/` OR `organizations//locations//inspectTemplates/` Note: `inspect_template` must be located in the same region as the `SecuritySettings`.",
    )
    name: Optional[str] = Field(
        None,
        description='Resource name of the settings. Required for the SecuritySettingsService.UpdateSecuritySettings method. SecuritySettingsService.CreateSecuritySettings populates the name automatically. Format: `projects//locations//securitySettings/`.',
    )
    purgeDataTypes: Optional[List[PurgeDataType]] = Field(
        None,
        description='List of types of data to remove when retention settings triggers purge.',
    )
    redactionScope: Optional[RedactionScope] = Field(
        None,
        description='Defines the data for which Dialogflow applies redaction. Dialogflow does not redact data that it does not have access to – for example, Cloud logging.',
    )
    redactionStrategy: Optional[RedactionStrategy] = Field(
        None, description='Strategy that defines how we do redaction.'
    )
    retentionWindowDays: Optional[int] = Field(
        None,
        description="Retains data in interaction logging for the specified number of days. This does not apply to Cloud logging, which is owned by the user - not Dialogflow. User must set a value lower than Dialogflow's default 365d TTL (30 days for Agent Assist traffic), higher value will be ignored and use default. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use default TTL.",
    )


class GoogleCloudDialogflowCxV3beta1SynthesizeSpeechConfig(BaseModel):
    effectsProfileId: Optional[List[str]] = Field(
        None,
        description="Optional. An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given.",
    )
    pitch: Optional[float] = Field(
        None,
        description='Optional. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.',
    )
    speakingRate: Optional[float] = Field(
        None,
        description='Optional. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values < 0.25 or > 4.0 will return an error.',
    )
    voice: Optional[GoogleCloudDialogflowCxV3beta1VoiceSelectionParams] = Field(
        None, description='Optional. The desired voice of the synthesized audio.'
    )
    volumeGainDb: Optional[float] = Field(
        None,
        description="Optional. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. We strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that.",
    )


class GoogleCloudDialogflowCxV3beta1TestError(BaseModel):
    status: Optional[GoogleRpcStatus] = Field(
        None, description='The status associated with the test.'
    )
    testCase: Optional[str] = Field(None, description='The test case resource name.')
    testTime: Optional[str] = Field(
        None, description='The timestamp when the test was completed.'
    )


class GoogleCloudDialogflowCxV3beta1TextToSpeechSettings(BaseModel):
    synthesizeSpeechConfigs: Optional[
        Dict[str, GoogleCloudDialogflowCxV3beta1SynthesizeSpeechConfig]
    ] = Field(
        None,
        description='Configuration of how speech should be synthesized, mapping from language (https://dialogflow.com/docs/reference/language) to SynthesizeSpeechConfig.',
    )


class GoogleCloudDialogflowCxV3beta1VersionVariants(BaseModel):
    variants: Optional[List[GoogleCloudDialogflowCxV3beta1VersionVariantsVariant]] = (
        Field(None, description='A list of flow version variants.')
    )


class GoogleCloudDialogflowCxV3beta1Webhook(BaseModel):
    disabled: Optional[bool] = Field(
        None, description='Indicates whether the webhook is disabled.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the webhook, unique within the agent.',
    )
    genericWebService: Optional[
        GoogleCloudDialogflowCxV3beta1WebhookGenericWebService
    ] = Field(None, description='Configuration for a generic web service.')
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: `projects//locations//agents//webhooks/`.',
    )
    serviceDirectory: Optional[
        GoogleCloudDialogflowCxV3beta1WebhookServiceDirectoryConfig
    ] = Field(
        None,
        description='Configuration for a [Service Directory](https://cloud.google.com/service-directory) service.',
    )
    timeout: Optional[str] = Field(
        None,
        description="Webhook execution timeout. Execution is considered failed if Dialogflow doesn't receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds.",
    )


class GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfo(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='The confidence of the matched intent. Values range from 0.0 (completely uncertain) to 1.0 (completely certain).',
    )
    displayName: Optional[str] = Field(
        None, description='Always present. The display name of the last matched intent.'
    )
    lastMatchedIntent: Optional[str] = Field(
        None,
        description='Always present. The unique identifier of the last matched intent. Format: `projects//locations//agents//intents/`.',
    )
    parameters: Optional[
        Dict[
            str,
            GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfoIntentParameterValue,
        ]
    ] = Field(
        None,
        description="Parameters identified as a result of intent matching. This is a map of the name of the identified parameter to the value of the parameter identified from the user's utterance. All parameters defined in the matched intent that are identified will be surfaced here.",
    )


class GoogleCloudDialogflowV2ConversationModel(BaseModel):
    articleSuggestionModelMetadata: Optional[
        GoogleCloudDialogflowV2ArticleSuggestionModelMetadata
    ] = Field(None, description='Metadata for article suggestion models.')
    createTime: Optional[str] = Field(
        None, description='Output only. Creation time of this model.'
    )
    datasets: Optional[List[GoogleCloudDialogflowV2InputDataset]] = Field(
        None, description='Required. Datasets used to create model.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The display name of the model. At most 64 bytes long.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Language code for the conversation model. If not specified, the language is en-US. Language at ConversationModel should be set for all non en-us languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US".',
    )
    name: Optional[str] = Field(
        None,
        description='ConversationModel resource name. Format: `projects//conversationModels/`',
    )
    smartReplyModelMetadata: Optional[
        GoogleCloudDialogflowV2SmartReplyModelMetadata
    ] = Field(None, description='Metadata for smart reply models.')
    state: Optional[State7] = Field(
        None,
        description='Output only. State of the model. A model can only serve prediction requests after it gets deployed.',
    )


class GoogleCloudDialogflowV2EntityType(BaseModel):
    autoExpansionMode: Optional[AutoExpansionMode] = Field(
        None,
        description='Optional. Indicates whether the entity type can be automatically expanded.',
    )
    displayName: Optional[str] = Field(
        None, description='Required. The name of the entity type.'
    )
    enableFuzzyExtraction: Optional[bool] = Field(
        None,
        description='Optional. Enables fuzzy entity extraction during classification.',
    )
    entities: Optional[List[GoogleCloudDialogflowV2EntityTypeEntity]] = Field(
        None,
        description='Optional. The collection of entity entries associated with the entity type.',
    )
    kind: Optional[Kind] = Field(
        None, description='Required. Indicates the kind of entity type.'
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType and EntityTypes.BatchUpdateEntityTypes methods. Format: `projects//agent/entityTypes/`.',
    )


class GoogleCloudDialogflowV2ExportOperationMetadata(BaseModel):
    exportedGcsDestination: Optional[GoogleCloudDialogflowV2GcsDestination] = Field(
        None, description='Cloud Storage file path of the exported data.'
    )


class GoogleCloudDialogflowV2ImportConversationDataOperationMetadata(BaseModel):
    conversationDataset: Optional[str] = Field(
        None,
        description='The resource name of the imported conversation dataset. Format: `projects//locations//conversationDatasets/`',
    )
    createTime: Optional[str] = Field(
        None,
        description='Timestamp when import conversation data request was created. The time is measured on server side.',
    )
    partialFailures: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description="Partial failures are failures that don't fail the whole long running operation, e.g. single files that couldn't be read.",
    )


class GoogleCloudDialogflowV2ImportDocumentsResponse(BaseModel):
    warnings: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='Includes details about skipped documents or any other warnings.',
    )


class GoogleCloudDialogflowV2IntentMessageBasicCardButton(BaseModel):
    openUriAction: Optional[
        GoogleCloudDialogflowV2IntentMessageBasicCardButtonOpenUriAction
    ] = Field(
        None, description='Required. Action to take when a user taps on the button.'
    )
    title: Optional[str] = Field(None, description='Required. The title of the button.')


class GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItem(
    BaseModel
):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the carousel item. Maximum of four lines of text.',
    )
    footer: Optional[str] = Field(
        None,
        description='Optional. Text that appears at the bottom of the Browse Carousel Card. Maximum of one line of text.',
    )
    image: Optional[GoogleCloudDialogflowV2IntentMessageImage] = Field(
        None, description='Optional. Hero image for the carousel item.'
    )
    openUriAction: Optional[
        GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlAction
    ] = Field(None, description='Required. Action to present to the user.')
    title: Optional[str] = Field(
        None,
        description='Required. Title of the carousel item. Maximum of two lines of text.',
    )


class GoogleCloudDialogflowV2IntentMessageCard(BaseModel):
    buttons: Optional[List[GoogleCloudDialogflowV2IntentMessageCardButton]] = Field(
        None, description='Optional. The collection of card buttons.'
    )
    imageUri: Optional[str] = Field(
        None, description='Optional. The public URI to an image file for the card.'
    )
    subtitle: Optional[str] = Field(
        None, description='Optional. The subtitle of the card.'
    )
    title: Optional[str] = Field(None, description='Optional. The title of the card.')


class GoogleCloudDialogflowV2IntentMessageCarouselSelectItem(BaseModel):
    description: Optional[str] = Field(
        None, description='Optional. The body text of the card.'
    )
    image: Optional[GoogleCloudDialogflowV2IntentMessageImage] = Field(
        None, description='Optional. The image to display.'
    )
    info: Optional[GoogleCloudDialogflowV2IntentMessageSelectItemInfo] = Field(
        None, description='Required. Additional info about the option item.'
    )
    title: Optional[str] = Field(
        None, description='Required. Title of the carousel item.'
    )


class GoogleCloudDialogflowV2IntentMessageListSelectItem(BaseModel):
    description: Optional[str] = Field(
        None, description='Optional. The main text describing the item.'
    )
    image: Optional[GoogleCloudDialogflowV2IntentMessageImage] = Field(
        None, description='Optional. The image to display.'
    )
    info: Optional[GoogleCloudDialogflowV2IntentMessageSelectItemInfo] = Field(
        None, description='Required. Additional information about this option.'
    )
    title: Optional[str] = Field(
        None, description='Required. The title of the list item.'
    )


class GoogleCloudDialogflowV2IntentMessageMediaContent(BaseModel):
    mediaObjects: Optional[
        List[GoogleCloudDialogflowV2IntentMessageMediaContentResponseMediaObject]
    ] = Field(None, description='Required. List of media objects.')
    mediaType: Optional[MediaType] = Field(
        None, description='Optional. What type of media is the content (ie "audio").'
    )


class GoogleCloudDialogflowV2IntentMessageTableCard(BaseModel):
    buttons: Optional[List[GoogleCloudDialogflowV2IntentMessageBasicCardButton]] = (
        Field(None, description='Optional. List of buttons for the card.')
    )
    columnProperties: Optional[
        List[GoogleCloudDialogflowV2IntentMessageColumnProperties]
    ] = Field(
        None, description='Optional. Display properties for the columns in this table.'
    )
    image: Optional[GoogleCloudDialogflowV2IntentMessageImage] = Field(
        None, description='Optional. Image which should be displayed on the card.'
    )
    rows: Optional[List[GoogleCloudDialogflowV2IntentMessageTableCardRow]] = Field(
        None, description='Optional. Rows in this table of data.'
    )
    subtitle: Optional[str] = Field(
        None, description='Optional. Subtitle to the title.'
    )
    title: Optional[str] = Field(None, description='Required. Title of the card.')


class GoogleCloudDialogflowV2IntentTrainingPhrase(BaseModel):
    name: Optional[str] = Field(
        None, description='Output only. The unique identifier of this training phrase.'
    )
    parts: Optional[List[GoogleCloudDialogflowV2IntentTrainingPhrasePart]] = Field(
        None,
        description='Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `entity_type`, `alias`, and `user_defined` fields are all set.',
    )
    timesAddedCount: Optional[int] = Field(
        None,
        description='Optional. Indicates how many times this example was added to the intent. Each time a developer adds an existing sample by editing an intent or training, this counter is increased.',
    )
    type: Optional[Type4] = Field(
        None, description='Required. The type of the training phrase.'
    )


class GoogleCloudDialogflowV2KnowledgeOperationMetadata(BaseModel):
    exportOperationMetadata: Optional[
        GoogleCloudDialogflowV2ExportOperationMetadata
    ] = Field(
        None,
        description='Metadata for the Export Data Operation such as the destination of export.',
    )
    knowledgeBase: Optional[str] = Field(
        None,
        description='The name of the knowledge base interacted with during the operation.',
    )
    state: Optional[State10] = Field(
        None, description='Output only. The current state of this operation.'
    )


class GoogleCloudDialogflowV2Message(BaseModel):
    content: Optional[str] = Field(None, description='Required. The message content.')
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time when the message was created in Contact Center AI.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US".',
    )
    messageAnnotation: Optional[GoogleCloudDialogflowV2MessageAnnotation] = Field(
        None, description='Output only. The annotation for the message.'
    )
    name: Optional[str] = Field(
        None,
        description='Optional. The unique identifier of the message. Format: `projects//locations//conversations//messages/`.',
    )
    participant: Optional[str] = Field(
        None, description='Output only. The participant that sends this message.'
    )
    participantRole: Optional[ParticipantRole] = Field(
        None, description='Output only. The role of the participant.'
    )
    sendTime: Optional[str] = Field(
        None, description='Optional. The time when the message was sent.'
    )
    sentimentAnalysis: Optional[GoogleCloudDialogflowV2SentimentAnalysisResult] = Field(
        None, description='Output only. The sentiment analysis result for the message.'
    )


class GoogleCloudDialogflowV2SuggestionResult(BaseModel):
    error: Optional[GoogleRpcStatus] = Field(
        None, description='Error status if the request failed.'
    )
    suggestArticlesResponse: Optional[
        GoogleCloudDialogflowV2SuggestArticlesResponse
    ] = Field(
        None,
        description='SuggestArticlesResponse if request is for ARTICLE_SUGGESTION.',
    )
    suggestFaqAnswersResponse: Optional[
        GoogleCloudDialogflowV2SuggestFaqAnswersResponse
    ] = Field(
        None, description='SuggestFaqAnswersResponse if request is for FAQ_ANSWER.'
    )
    suggestSmartRepliesResponse: Optional[
        GoogleCloudDialogflowV2SuggestSmartRepliesResponse
    ] = Field(
        None, description='SuggestSmartRepliesResponse if request is for SMART_REPLY.'
    )


class GoogleCloudDialogflowV2beta1EntityType(BaseModel):
    autoExpansionMode: Optional[AutoExpansionMode] = Field(
        None,
        description='Optional. Indicates whether the entity type can be automatically expanded.',
    )
    displayName: Optional[str] = Field(
        None, description='Required. The name of the entity type.'
    )
    enableFuzzyExtraction: Optional[bool] = Field(
        None,
        description='Optional. Enables fuzzy entity extraction during classification.',
    )
    entities: Optional[List[GoogleCloudDialogflowV2beta1EntityTypeEntity]] = Field(
        None,
        description='Optional. The collection of entity entries associated with the entity type.',
    )
    kind: Optional[Kind] = Field(
        None, description='Required. Indicates the kind of entity type.'
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType and EntityTypes.BatchUpdateEntityTypes methods. Supported formats: - `projects//agent/entityTypes/` - `projects//locations//agent/entityTypes/`',
    )


class GoogleCloudDialogflowV2beta1ExportOperationMetadata(BaseModel):
    exportedGcsDestination: Optional[GoogleCloudDialogflowV2beta1GcsDestination] = (
        Field(None, description='Cloud Storage file path of the exported data.')
    )


class GoogleCloudDialogflowV2beta1ImportDocumentsResponse(BaseModel):
    warnings: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='Includes details about skipped documents or any other warnings.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageBasicCardButton(BaseModel):
    openUriAction: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageBasicCardButtonOpenUriAction
    ] = Field(
        None, description='Required. Action to take when a user taps on the button.'
    )
    title: Optional[str] = Field(None, description='Required. The title of the button.')


class GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItem(
    BaseModel
):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the carousel item. Maximum of four lines of text.',
    )
    footer: Optional[str] = Field(
        None,
        description='Optional. Text that appears at the bottom of the Browse Carousel Card. Maximum of one line of text.',
    )
    image: Optional[GoogleCloudDialogflowV2beta1IntentMessageImage] = Field(
        None, description='Optional. Hero image for the carousel item.'
    )
    openUriAction: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItemOpenUrlAction
    ] = Field(None, description='Required. Action to present to the user.')
    title: Optional[str] = Field(
        None,
        description='Required. Title of the carousel item. Maximum of two lines of text.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageCard(BaseModel):
    buttons: Optional[List[GoogleCloudDialogflowV2beta1IntentMessageCardButton]] = (
        Field(None, description='Optional. The collection of card buttons.')
    )
    imageUri: Optional[str] = Field(
        None, description='Optional. The public URI to an image file for the card.'
    )
    subtitle: Optional[str] = Field(
        None, description='Optional. The subtitle of the card.'
    )
    title: Optional[str] = Field(None, description='Optional. The title of the card.')


class GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectItem(BaseModel):
    description: Optional[str] = Field(
        None, description='Optional. The body text of the card.'
    )
    image: Optional[GoogleCloudDialogflowV2beta1IntentMessageImage] = Field(
        None, description='Optional. The image to display.'
    )
    info: Optional[GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfo] = Field(
        None, description='Required. Additional info about the option item.'
    )
    title: Optional[str] = Field(
        None, description='Required. Title of the carousel item.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageListSelectItem(BaseModel):
    description: Optional[str] = Field(
        None, description='Optional. The main text describing the item.'
    )
    image: Optional[GoogleCloudDialogflowV2beta1IntentMessageImage] = Field(
        None, description='Optional. The image to display.'
    )
    info: Optional[GoogleCloudDialogflowV2beta1IntentMessageSelectItemInfo] = Field(
        None, description='Required. Additional information about this option.'
    )
    title: Optional[str] = Field(
        None, description='Required. The title of the list item.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageMediaContent(BaseModel):
    mediaObjects: Optional[
        List[GoogleCloudDialogflowV2beta1IntentMessageMediaContentResponseMediaObject]
    ] = Field(None, description='Required. List of media objects.')
    mediaType: Optional[MediaType] = Field(
        None, description='Optional. What type of media is the content (ie "audio").'
    )


class GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedAction(BaseModel):
    dial: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionDial
    ] = Field(None, description='Suggested client side action: Dial a phone number')
    openUrl: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionOpenUri
    ] = Field(None, description='Suggested client side action: Open a URI on device')
    postbackData: Optional[str] = Field(
        None,
        description='Opaque payload that the Dialogflow receives in a user event when the user taps the suggested action. This data will be also forwarded to webhook to allow performing custom business logic.',
    )
    shareLocation: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedActionRbmSuggestedActionShareLocation
    ] = Field(None, description='Suggested client side action: Share user location')
    text: Optional[str] = Field(
        None, description='Text to display alongside the action.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestion(BaseModel):
    action: Optional[GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedAction] = (
        Field(None, description='Predefined client side actions that user can choose')
    )
    reply: Optional[GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestedReply] = Field(
        None, description='Predefined replies for user to select instead of typing'
    )


class GoogleCloudDialogflowV2beta1IntentMessageRbmText(BaseModel):
    rbmSuggestion: Optional[
        List[GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestion]
    ] = Field(
        None, description='Optional. One or more suggestions to show to the user.'
    )
    text: Optional[str] = Field(
        None, description='Required. Text sent and displayed to the user.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageTableCard(BaseModel):
    buttons: Optional[
        List[GoogleCloudDialogflowV2beta1IntentMessageBasicCardButton]
    ] = Field(None, description='Optional. List of buttons for the card.')
    columnProperties: Optional[
        List[GoogleCloudDialogflowV2beta1IntentMessageColumnProperties]
    ] = Field(
        None, description='Optional. Display properties for the columns in this table.'
    )
    image: Optional[GoogleCloudDialogflowV2beta1IntentMessageImage] = Field(
        None, description='Optional. Image which should be displayed on the card.'
    )
    rows: Optional[List[GoogleCloudDialogflowV2beta1IntentMessageTableCardRow]] = Field(
        None, description='Optional. Rows in this table of data.'
    )
    subtitle: Optional[str] = Field(
        None, description='Optional. Subtitle to the title.'
    )
    title: Optional[str] = Field(None, description='Required. Title of the card.')


class GoogleCloudDialogflowV2beta1IntentTrainingPhrase(BaseModel):
    name: Optional[str] = Field(
        None, description='Output only. The unique identifier of this training phrase.'
    )
    parts: Optional[List[GoogleCloudDialogflowV2beta1IntentTrainingPhrasePart]] = Field(
        None,
        description='Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `entity_type`, `alias`, and `user_defined` fields are all set.',
    )
    timesAddedCount: Optional[int] = Field(
        None,
        description='Optional. Indicates how many times this example was added to the intent. Each time a developer adds an existing sample by editing an intent or training, this counter is increased.',
    )
    type: Optional[Type6] = Field(
        None, description='Required. The type of the training phrase.'
    )


class GoogleCloudDialogflowV2beta1KnowledgeAnswers(BaseModel):
    answers: Optional[List[GoogleCloudDialogflowV2beta1KnowledgeAnswersAnswer]] = Field(
        None, description='A list of answers from Knowledge Connector.'
    )


class GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata(BaseModel):
    exportOperationMetadata: Optional[
        GoogleCloudDialogflowV2beta1ExportOperationMetadata
    ] = Field(
        None,
        description='Metadata for the Export Data Operation such as the destination of export.',
    )
    knowledgeBase: Optional[str] = Field(
        None,
        description='The name of the knowledge base interacted with during the operation.',
    )
    state: Optional[State10] = Field(
        None, description='Required. Output only. The current state of this operation.'
    )


class GoogleCloudDialogflowV2beta1Message(BaseModel):
    content: Optional[str] = Field(None, description='Required. The message content.')
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time when the message was created in Contact Center AI.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US".',
    )
    messageAnnotation: Optional[GoogleCloudDialogflowV2beta1MessageAnnotation] = Field(
        None, description='Output only. The annotation for the message.'
    )
    name: Optional[str] = Field(
        None,
        description='Optional. The unique identifier of the message. Format: `projects//locations//conversations//messages/`.',
    )
    participant: Optional[str] = Field(
        None, description='Output only. The participant that sends this message.'
    )
    participantRole: Optional[ParticipantRole] = Field(
        None, description='Output only. The role of the participant.'
    )
    sendTime: Optional[str] = Field(
        None, description='Optional. The time when the message was sent.'
    )
    sentimentAnalysis: Optional[GoogleCloudDialogflowV2beta1SentimentAnalysisResult] = (
        Field(
            None,
            description='Output only. The sentiment analysis result for the message.',
        )
    )


class GoogleCloudDialogflowV2beta1SuggestionResult(BaseModel):
    error: Optional[GoogleRpcStatus] = Field(
        None, description='Error status if the request failed.'
    )
    suggestArticlesResponse: Optional[
        GoogleCloudDialogflowV2beta1SuggestArticlesResponse
    ] = Field(
        None,
        description='SuggestArticlesResponse if request is for ARTICLE_SUGGESTION.',
    )
    suggestFaqAnswersResponse: Optional[
        GoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse
    ] = Field(
        None, description='SuggestFaqAnswersResponse if request is for FAQ_ANSWER.'
    )
    suggestSmartRepliesResponse: Optional[
        GoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse
    ] = Field(
        None, description='SuggestSmartRepliesResponse if request is for SMART_REPLY.'
    )


class GoogleCloudDialogflowV3alpha1ConversationSignals(BaseModel):
    turnSignals: Optional[GoogleCloudDialogflowV3alpha1TurnSignals] = Field(
        None, description='Required. Turn signals for the current turn.'
    )


class GoogleCloudDialogflowV3alpha1CreateDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowV3alpha1DeleteDocumentOperationMetadata(BaseModel):
    genericMetadata: Optional[
        GoogleCloudDialogflowV3alpha1GenericKnowledgeOperationMetadata
    ] = Field(None, description='The generic information of the operation.')


class GoogleCloudDialogflowV3alpha1ImportDocumentsResponse(BaseModel):
    warnings: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='Includes details about skipped documents or any other warnings.',
    )


class GoogleCloudLocationListLocationsResponse(BaseModel):
    locations: Optional[List[GoogleCloudLocationLocation]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class GoogleLongrunningOperation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class GoogleCloudDialogflowCxV3BatchRunTestCasesMetadata(BaseModel):
    errors: Optional[List[GoogleCloudDialogflowCxV3TestError]] = Field(
        None, description='The test errors.'
    )


class GoogleCloudDialogflowCxV3ConversationTurnUserInput(BaseModel):
    enableSentimentAnalysis: Optional[bool] = Field(
        None, description='Whether sentiment analysis is enabled.'
    )
    injectedParameters: Optional[Dict[str, Any]] = Field(
        None,
        description='Parameters that need to be injected into the conversation during intent detection.',
    )
    input: Optional[GoogleCloudDialogflowCxV3QueryInput] = Field(
        None,
        description='Supports text input, event input, dtmf input in the test case.',
    )
    isWebhookEnabled: Optional[bool] = Field(
        None,
        description='If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.',
    )


class GoogleCloudDialogflowCxV3DeployFlowMetadata(BaseModel):
    testErrors: Optional[List[GoogleCloudDialogflowCxV3TestError]] = Field(
        None, description='Errors of running deployment tests.'
    )


class GoogleCloudDialogflowCxV3EnvironmentWebhookConfig(BaseModel):
    webhookOverrides: Optional[List[GoogleCloudDialogflowCxV3Webhook]] = Field(
        None,
        description='The list of webhooks to override for the agent environment. The webhook must exist in the agent. You can override fields in `generic_web_service` and `service_directory`.',
    )


class GoogleCloudDialogflowCxV3Intent(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the intent, unique within the agent.',
    )
    isFallback: Optional[bool] = Field(
        None,
        description='Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation. Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols \'-\' and \'_\'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes. Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys.contextual" means the intent is a contextual intent.',
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the intent. Required for the Intents.UpdateIntent method. Intents.CreateIntent populates the name automatically. Format: `projects//locations//agents//intents/`.',
    )
    parameters: Optional[List[GoogleCloudDialogflowCxV3IntentParameter]] = Field(
        None, description='The collection of parameters associated with the intent.'
    )
    priority: Optional[int] = Field(
        None,
        description='The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests.',
    )
    trainingPhrases: Optional[List[GoogleCloudDialogflowCxV3IntentTrainingPhrase]] = (
        Field(
            None,
            description='The collection of training phrases the agent is trained on to identify the intent.',
        )
    )


class GoogleCloudDialogflowCxV3PageInfo(BaseModel):
    currentPage: Optional[str] = Field(
        None,
        description='Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the current page. Format: `projects//locations//agents//flows//pages/`.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Always present for WebhookRequest. Ignored for WebhookResponse. The display name of the current page.',
    )
    formInfo: Optional[GoogleCloudDialogflowCxV3PageInfoFormInfo] = Field(
        None,
        description='Optional for both WebhookRequest and WebhookResponse. Information about the form.',
    )


class GoogleCloudDialogflowCxV3ResponseMessage(BaseModel):
    channel: Optional[str] = Field(
        None,
        description='The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.',
    )
    conversationSuccess: Optional[
        GoogleCloudDialogflowCxV3ResponseMessageConversationSuccess
    ] = Field(None, description='Indicates that the conversation succeeded.')
    endInteraction: Optional[GoogleCloudDialogflowCxV3ResponseMessageEndInteraction] = (
        Field(
            None,
            description="Output only. A signal that indicates the interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only when the conversation reaches `END_SESSION` page. It is not supposed to be defined by the user. It's guaranteed that there is at most one such message in each response.",
        )
    )
    liveAgentHandoff: Optional[
        GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoff
    ] = Field(None, description='Hands off conversation to a human agent.')
    mixedAudio: Optional[GoogleCloudDialogflowCxV3ResponseMessageMixedAudio] = Field(
        None,
        description='Output only. An audio response message composed of both the synthesized Dialogflow agent responses and responses defined via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user.',
    )
    outputAudioText: Optional[
        GoogleCloudDialogflowCxV3ResponseMessageOutputAudioText
    ] = Field(
        None,
        description='A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.',
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description='Returns a response containing a custom, platform-specific payload.',
    )
    playAudio: Optional[GoogleCloudDialogflowCxV3ResponseMessagePlayAudio] = Field(
        None,
        description='Signal that the client should play an audio clip hosted at a client-specific URI. Dialogflow uses this to construct mixed_audio. However, Dialogflow itself does not try to read or process the URI in any way.',
    )
    telephonyTransferCall: Optional[
        GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCall
    ] = Field(
        None,
        description='A signal that the client should transfer the phone call connected to this agent to a third-party endpoint.',
    )
    text: Optional[GoogleCloudDialogflowCxV3ResponseMessageText] = Field(
        None, description='Returns a text response.'
    )


class GoogleCloudDialogflowCxV3RunContinuousTestMetadata(BaseModel):
    errors: Optional[List[GoogleCloudDialogflowCxV3TestError]] = Field(
        None, description='The test errors.'
    )


class GoogleCloudDialogflowCxV3WebhookRequest(BaseModel):
    detectIntentResponseId: Optional[str] = Field(
        None,
        description='Always present. The unique identifier of the DetectIntentResponse that will be returned to the API caller.',
    )
    dtmfDigits: Optional[str] = Field(
        None,
        description='If DTMF was provided as input, this field will contain the DTMF digits.',
    )
    fulfillmentInfo: Optional[
        GoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfo
    ] = Field(
        None,
        description='Always present. Information about the fulfillment that triggered this webhook call.',
    )
    intentInfo: Optional[GoogleCloudDialogflowCxV3WebhookRequestIntentInfo] = Field(
        None, description='Information about the last matched intent.'
    )
    languageCode: Optional[str] = Field(
        None, description='The language code specified in the original request.'
    )
    messages: Optional[List[GoogleCloudDialogflowCxV3ResponseMessage]] = Field(
        None,
        description='The list of rich message responses to present to the user. Webhook can choose to append or replace this list in WebhookResponse.fulfillment_response;',
    )
    pageInfo: Optional[GoogleCloudDialogflowCxV3PageInfo] = Field(
        None, description='Information about page status.'
    )
    payload: Optional[Dict[str, Any]] = Field(
        None, description='Custom data set in QueryParameters.payload.'
    )
    sentimentAnalysisResult: Optional[
        GoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResult
    ] = Field(
        None,
        description='The sentiment analysis result of the current user request. The field is filled when sentiment analysis is configured to be enabled for the request.',
    )
    sessionInfo: Optional[GoogleCloudDialogflowCxV3SessionInfo] = Field(
        None, description='Information about session status.'
    )
    text: Optional[str] = Field(
        None,
        description='If natural language text was provided as input, this field will contain a copy of the text.',
    )
    transcript: Optional[str] = Field(
        None,
        description='If natural language speech audio was provided as input, this field will contain the transcript for the audio.',
    )
    triggerEvent: Optional[str] = Field(
        None,
        description='If an event was provided as input, this field will contain the name of the event.',
    )
    triggerIntent: Optional[str] = Field(
        None,
        description='If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`.',
    )


class GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponse(BaseModel):
    mergeBehavior: Optional[MergeBehavior] = Field(
        None, description='Merge behavior for `messages`.'
    )
    messages: Optional[List[GoogleCloudDialogflowCxV3ResponseMessage]] = Field(
        None, description='The list of rich message responses to present to the user.'
    )


class GoogleCloudDialogflowCxV3beta1Agent(BaseModel):
    advancedSettings: Optional[GoogleCloudDialogflowCxV3beta1AdvancedSettings] = Field(
        None,
        description='Hierarchical advanced settings for this agent. The settings exposed at the lower level overrides the settings exposed at the higher level.',
    )
    avatarUri: Optional[str] = Field(
        None,
        description="The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted [Web Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo) integration.",
    )
    defaultLanguageCode: Optional[str] = Field(
        None,
        description='Required. Immutable. The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. This field cannot be set by the Agents.UpdateAgent method.',
    )
    description: Optional[str] = Field(
        None,
        description='The description of the agent. The maximum length is 500 characters. If exceeded, the request is rejected.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the agent, unique within the location.',
    )
    enableSpellCorrection: Optional[bool] = Field(
        None,
        description='Indicates if automatic spell correction is enabled in detect intent requests.',
    )
    enableStackdriverLogging: Optional[bool] = Field(
        None,
        description='Indicates if stackdriver logging is enabled for the agent. Please use agent.advanced_settings instead.',
    )
    locked: Optional[bool] = Field(
        None,
        description='Indicates whether the agent is locked for changes. If the agent is locked, modifications to the agent will be rejected except for RestoreAgent.',
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the agent. Required for the Agents.UpdateAgent method. Agents.CreateAgent populates the name automatically. Format: `projects//locations//agents/`.',
    )
    securitySettings: Optional[str] = Field(
        None,
        description='Name of the SecuritySettings reference for the agent. Format: `projects//locations//securitySettings/`.',
    )
    speechToTextSettings: Optional[
        GoogleCloudDialogflowCxV3beta1SpeechToTextSettings
    ] = Field(None, description='Speech recognition related settings.')
    startFlow: Optional[str] = Field(
        None,
        description='Immutable. Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only be deleted by deleting the agent. Format: `projects//locations//agents//flows/`.',
    )
    supportedLanguageCodes: Optional[List[str]] = Field(
        None,
        description='The list of all languages supported by the agent (except for the `default_language_code`).',
    )
    textToSpeechSettings: Optional[
        GoogleCloudDialogflowCxV3beta1TextToSpeechSettings
    ] = Field(
        None,
        description='Settings on instructing the speech synthesizer on how to generate the output audio content.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='Required. The time zone of the agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris.',
    )


class GoogleCloudDialogflowCxV3beta1AgentValidationResult(BaseModel):
    flowValidationResults: Optional[
        List[GoogleCloudDialogflowCxV3beta1FlowValidationResult]
    ] = Field(None, description='Contains all flow validation results.')
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the agent validation result. Format: `projects//locations//agents//validationResult`.',
    )


class GoogleCloudDialogflowCxV3beta1BatchRunTestCasesMetadata(BaseModel):
    errors: Optional[List[GoogleCloudDialogflowCxV3beta1TestError]] = Field(
        None, description='The test errors.'
    )


class GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput(BaseModel):
    enableSentimentAnalysis: Optional[bool] = Field(
        None, description='Whether sentiment analysis is enabled.'
    )
    injectedParameters: Optional[Dict[str, Any]] = Field(
        None,
        description='Parameters that need to be injected into the conversation during intent detection.',
    )
    input: Optional[GoogleCloudDialogflowCxV3beta1QueryInput] = Field(
        None,
        description='Supports text input, event input, dtmf input in the test case.',
    )
    isWebhookEnabled: Optional[bool] = Field(
        None,
        description='If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.',
    )


class GoogleCloudDialogflowCxV3beta1DeployFlowMetadata(BaseModel):
    testErrors: Optional[List[GoogleCloudDialogflowCxV3beta1TestError]] = Field(
        None, description='Errors of running deployment tests.'
    )


class GoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfig(BaseModel):
    webhookOverrides: Optional[List[GoogleCloudDialogflowCxV3beta1Webhook]] = Field(
        None,
        description='The list of webhooks to override for the agent environment. The webhook must exist in the agent. You can override fields in `generic_web_service` and `service_directory`.',
    )


class GoogleCloudDialogflowCxV3beta1ExperimentDefinition(BaseModel):
    condition: Optional[str] = Field(
        None,
        description='The condition defines which subset of sessions are selected for this experiment. If not specified, all sessions are eligible. E.g. "query_input.language_code=en" See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).',
    )
    versionVariants: Optional[GoogleCloudDialogflowCxV3beta1VersionVariants] = Field(
        None, description='The flow versions as the variants of this experiment.'
    )


class GoogleCloudDialogflowCxV3beta1Intent(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the intent, unique within the agent.',
    )
    isFallback: Optional[bool] = Field(
        None,
        description='Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation. Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols \'-\' and \'_\'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes. Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. "sys-head" means the intent is a head intent. "sys-contextual" means the intent is a contextual intent.',
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the intent. Required for the Intents.UpdateIntent method. Intents.CreateIntent populates the name automatically. Format: `projects//locations//agents//intents/`.',
    )
    parameters: Optional[List[GoogleCloudDialogflowCxV3beta1IntentParameter]] = Field(
        None, description='The collection of parameters associated with the intent.'
    )
    priority: Optional[int] = Field(
        None,
        description='The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests.',
    )
    trainingPhrases: Optional[
        List[GoogleCloudDialogflowCxV3beta1IntentTrainingPhrase]
    ] = Field(
        None,
        description='The collection of training phrases the agent is trained on to identify the intent.',
    )


class GoogleCloudDialogflowCxV3beta1ListAgentsResponse(BaseModel):
    agents: Optional[List[GoogleCloudDialogflowCxV3beta1Agent]] = Field(
        None,
        description='The list of agents. There will be a maximum number of items returned based on the page_size field in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDialogflowCxV3beta1ListIntentsResponse(BaseModel):
    intents: Optional[List[GoogleCloudDialogflowCxV3beta1Intent]] = Field(
        None,
        description='The list of intents. There will be a maximum number of items returned based on the page_size field in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDialogflowCxV3beta1ListSecuritySettingsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    securitySettings: Optional[List[GoogleCloudDialogflowCxV3beta1SecuritySettings]] = (
        Field(None, description='The list of security settings.')
    )


class GoogleCloudDialogflowCxV3beta1ListWebhooksResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    webhooks: Optional[List[GoogleCloudDialogflowCxV3beta1Webhook]] = Field(
        None,
        description='The list of webhooks. There will be a maximum number of items returned based on the page_size field in the request.',
    )


class GoogleCloudDialogflowCxV3beta1Match(BaseModel):
    confidence: Optional[float] = Field(
        None,
        description='The confidence of this match. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation.',
    )
    event: Optional[str] = Field(
        None,
        description='The event that matched the query. Filled for `EVENT`, `NO_MATCH` and `NO_INPUT` match types.',
    )
    intent: Optional[GoogleCloudDialogflowCxV3beta1Intent] = Field(
        None,
        description='The Intent that matched the query. Some, not all fields are filled in this message, including but not limited to: `name` and `display_name`. Only filled for `INTENT` match type.',
    )
    matchType: Optional[MatchType] = Field(None, description='Type of this Match.')
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="The collection of parameters extracted from the query. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.",
    )
    resolvedInput: Optional[str] = Field(
        None,
        description='Final text input which was matched during MatchIntent. This value can be different from original input sent in request because of spelling correction or other processing.',
    )


class GoogleCloudDialogflowCxV3beta1MatchIntentRequest(BaseModel):
    persistParameterChanges: Optional[bool] = Field(
        None, description='Persist session parameter changes from `query_params`.'
    )
    queryInput: Optional[GoogleCloudDialogflowCxV3beta1QueryInput] = Field(
        None, description='Required. The input specification.'
    )
    queryParams: Optional[GoogleCloudDialogflowCxV3beta1QueryParameters] = Field(
        None, description='The parameters of this query.'
    )


class GoogleCloudDialogflowCxV3beta1OutputAudioConfig(BaseModel):
    audioEncoding: Optional[AudioEncoding2] = Field(
        None, description='Required. Audio encoding of the synthesized audio content.'
    )
    sampleRateHertz: Optional[int] = Field(
        None,
        description="Optional. The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality).",
    )
    synthesizeSpeechConfig: Optional[
        GoogleCloudDialogflowCxV3beta1SynthesizeSpeechConfig
    ] = Field(
        None, description='Optional. Configuration of how speech should be synthesized.'
    )


class GoogleCloudDialogflowCxV3beta1PageInfo(BaseModel):
    currentPage: Optional[str] = Field(
        None,
        description='Always present for WebhookRequest. Ignored for WebhookResponse. The unique identifier of the current page. Format: `projects//locations//agents//flows//pages/`.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Always present for WebhookRequest. Ignored for WebhookResponse. The display name of the current page.',
    )
    formInfo: Optional[GoogleCloudDialogflowCxV3beta1PageInfoFormInfo] = Field(
        None,
        description='Optional for both WebhookRequest and WebhookResponse. Information about the form.',
    )


class GoogleCloudDialogflowCxV3beta1ResponseMessage(BaseModel):
    channel: Optional[str] = Field(
        None,
        description='The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.',
    )
    conversationSuccess: Optional[
        GoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccess
    ] = Field(None, description='Indicates that the conversation succeeded.')
    endInteraction: Optional[
        GoogleCloudDialogflowCxV3beta1ResponseMessageEndInteraction
    ] = Field(
        None,
        description="Output only. A signal that indicates the interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only when the conversation reaches `END_SESSION` page. It is not supposed to be defined by the user. It's guaranteed that there is at most one such message in each response.",
    )
    liveAgentHandoff: Optional[
        GoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoff
    ] = Field(None, description='Hands off conversation to a human agent.')
    mixedAudio: Optional[GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudio] = (
        Field(
            None,
            description='Output only. An audio response message composed of both the synthesized Dialogflow agent responses and responses defined via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user.',
        )
    )
    outputAudioText: Optional[
        GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioText
    ] = Field(
        None,
        description='A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.',
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description='Returns a response containing a custom, platform-specific payload.',
    )
    playAudio: Optional[GoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudio] = Field(
        None,
        description='Signal that the client should play an audio clip hosted at a client-specific URI. Dialogflow uses this to construct mixed_audio. However, Dialogflow itself does not try to read or process the URI in any way.',
    )
    telephonyTransferCall: Optional[
        GoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCall
    ] = Field(
        None,
        description='A signal that the client should transfer the phone call connected to this agent to a third-party endpoint.',
    )
    text: Optional[GoogleCloudDialogflowCxV3beta1ResponseMessageText] = Field(
        None, description='Returns a text response.'
    )


class GoogleCloudDialogflowCxV3beta1RunContinuousTestMetadata(BaseModel):
    errors: Optional[List[GoogleCloudDialogflowCxV3beta1TestError]] = Field(
        None, description='The test errors.'
    )


class GoogleCloudDialogflowCxV3beta1VariantsHistory(BaseModel):
    updateTime: Optional[str] = Field(None, description='Update time of the variants.')
    versionVariants: Optional[GoogleCloudDialogflowCxV3beta1VersionVariants] = Field(
        None, description='The flow versions as the variants.'
    )


class GoogleCloudDialogflowCxV3beta1WebhookRequest(BaseModel):
    detectIntentResponseId: Optional[str] = Field(
        None,
        description='Always present. The unique identifier of the DetectIntentResponse that will be returned to the API caller.',
    )
    dtmfDigits: Optional[str] = Field(
        None,
        description='If DTMF was provided as input, this field will contain the DTMF digits.',
    )
    fulfillmentInfo: Optional[
        GoogleCloudDialogflowCxV3beta1WebhookRequestFulfillmentInfo
    ] = Field(
        None,
        description='Always present. Information about the fulfillment that triggered this webhook call.',
    )
    intentInfo: Optional[GoogleCloudDialogflowCxV3beta1WebhookRequestIntentInfo] = (
        Field(None, description='Information about the last matched intent.')
    )
    languageCode: Optional[str] = Field(
        None, description='The language code specified in the original request.'
    )
    messages: Optional[List[GoogleCloudDialogflowCxV3beta1ResponseMessage]] = Field(
        None,
        description='The list of rich message responses to present to the user. Webhook can choose to append or replace this list in WebhookResponse.fulfillment_response;',
    )
    pageInfo: Optional[GoogleCloudDialogflowCxV3beta1PageInfo] = Field(
        None, description='Information about page status.'
    )
    payload: Optional[Dict[str, Any]] = Field(
        None, description='Custom data set in QueryParameters.payload.'
    )
    sentimentAnalysisResult: Optional[
        GoogleCloudDialogflowCxV3beta1WebhookRequestSentimentAnalysisResult
    ] = Field(
        None,
        description='The sentiment analysis result of the current user request. The field is filled when sentiment analysis is configured to be enabled for the request.',
    )
    sessionInfo: Optional[GoogleCloudDialogflowCxV3beta1SessionInfo] = Field(
        None, description='Information about session status.'
    )
    text: Optional[str] = Field(
        None,
        description='If natural language text was provided as input, this field will contain a copy of the text.',
    )
    transcript: Optional[str] = Field(
        None,
        description='If natural language speech audio was provided as input, this field will contain the transcript for the audio.',
    )
    triggerEvent: Optional[str] = Field(
        None,
        description='If an event was provided as input, this field will contain the name of the event.',
    )
    triggerIntent: Optional[str] = Field(
        None,
        description='If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`.',
    )


class GoogleCloudDialogflowCxV3beta1WebhookResponseFulfillmentResponse(BaseModel):
    mergeBehavior: Optional[MergeBehavior] = Field(
        None, description='Merge behavior for `messages`.'
    )
    messages: Optional[List[GoogleCloudDialogflowCxV3beta1ResponseMessage]] = Field(
        None, description='The list of rich message responses to present to the user.'
    )


class GoogleCloudDialogflowV2BatchUpdateEntityTypesResponse(BaseModel):
    entityTypes: Optional[List[GoogleCloudDialogflowV2EntityType]] = Field(
        None, description='The collection of updated or created entity types.'
    )


class GoogleCloudDialogflowV2ConversationEvent(BaseModel):
    conversation: Optional[str] = Field(
        None,
        description='The unique identifier of the conversation this notification refers to. Format: `projects//conversations/`.',
    )
    errorStatus: Optional[GoogleRpcStatus] = Field(
        None,
        description='More detailed information about an error. Only set for type UNRECOVERABLE_ERROR_IN_PHONE_CALL.',
    )
    newMessagePayload: Optional[GoogleCloudDialogflowV2Message] = Field(
        None, description='Payload of NEW_MESSAGE event.'
    )
    type: Optional[Type3] = Field(
        None, description='The type of the event that this notification refers to.'
    )


class GoogleCloudDialogflowV2HumanAgentAssistantEvent(BaseModel):
    conversation: Optional[str] = Field(
        None,
        description='The conversation this notification refers to. Format: `projects//conversations/`.',
    )
    participant: Optional[str] = Field(
        None,
        description='The participant that the suggestion is compiled for. Format: `projects//conversations//participants/`. It will not be set in legacy workflow.',
    )
    suggestionResults: Optional[List[GoogleCloudDialogflowV2SuggestionResult]] = Field(
        None,
        description='The suggestion results payload that this notification refers to.',
    )


class GoogleCloudDialogflowV2IntentMessageBasicCard(BaseModel):
    buttons: Optional[List[GoogleCloudDialogflowV2IntentMessageBasicCardButton]] = (
        Field(None, description='Optional. The collection of card buttons.')
    )
    formattedText: Optional[str] = Field(
        None,
        description='Required, unless image is present. The body text of the card.',
    )
    image: Optional[GoogleCloudDialogflowV2IntentMessageImage] = Field(
        None, description='Optional. The image for the card.'
    )
    subtitle: Optional[str] = Field(
        None, description='Optional. The subtitle of the card.'
    )
    title: Optional[str] = Field(None, description='Optional. The title of the card.')


class GoogleCloudDialogflowV2IntentMessageBrowseCarouselCard(BaseModel):
    imageDisplayOptions: Optional[ImageDisplayOptions] = Field(
        None,
        description='Optional. Settings for displaying the image. Applies to every image in items.',
    )
    items: Optional[
        List[
            GoogleCloudDialogflowV2IntentMessageBrowseCarouselCardBrowseCarouselCardItem
        ]
    ] = Field(
        None,
        description='Required. List of items in the Browse Carousel Card. Minimum of two items, maximum of ten.',
    )


class GoogleCloudDialogflowV2IntentMessageCarouselSelect(BaseModel):
    items: Optional[List[GoogleCloudDialogflowV2IntentMessageCarouselSelectItem]] = (
        Field(None, description='Required. Carousel items.')
    )


class GoogleCloudDialogflowV2IntentMessageListSelect(BaseModel):
    items: Optional[List[GoogleCloudDialogflowV2IntentMessageListSelectItem]] = Field(
        None, description='Required. List items.'
    )
    subtitle: Optional[str] = Field(None, description='Optional. Subtitle of the list.')
    title: Optional[str] = Field(
        None, description='Optional. The overall title of the list.'
    )


class GoogleCloudDialogflowV2beta1BatchUpdateEntityTypesResponse(BaseModel):
    entityTypes: Optional[List[GoogleCloudDialogflowV2beta1EntityType]] = Field(
        None, description='The collection of updated or created entity types.'
    )


class GoogleCloudDialogflowV2beta1ConversationEvent(BaseModel):
    conversation: Optional[str] = Field(
        None,
        description='Required. The unique identifier of the conversation this notification refers to. Format: `projects//conversations/`.',
    )
    errorStatus: Optional[GoogleRpcStatus] = Field(
        None,
        description='Optional. More detailed information about an error. Only set for type UNRECOVERABLE_ERROR_IN_PHONE_CALL.',
    )
    newMessagePayload: Optional[GoogleCloudDialogflowV2beta1Message] = Field(
        None, description='Payload of NEW_MESSAGE event.'
    )
    type: Optional[Type5] = Field(
        None,
        description='Required. The type of the event that this notification refers to.',
    )


class GoogleCloudDialogflowV2beta1HumanAgentAssistantEvent(BaseModel):
    conversation: Optional[str] = Field(
        None,
        description='The conversation this notification refers to. Format: `projects//conversations/`.',
    )
    participant: Optional[str] = Field(
        None,
        description='The participant that the suggestion is compiled for. And This field is used to call Participants.ListSuggestions API. Format: `projects//conversations//participants/`. It will not be set in legacy workflow. HumanAgentAssistantConfig.name for more information.',
    )
    suggestionResults: Optional[List[GoogleCloudDialogflowV2beta1SuggestionResult]] = (
        Field(
            None,
            description='The suggestion results payload that this notification refers to. It will only be set when HumanAgentAssistantConfig.SuggestionConfig.group_suggestion_responses sets to true.',
        )
    )


class GoogleCloudDialogflowV2beta1IntentMessageBasicCard(BaseModel):
    buttons: Optional[
        List[GoogleCloudDialogflowV2beta1IntentMessageBasicCardButton]
    ] = Field(None, description='Optional. The collection of card buttons.')
    formattedText: Optional[str] = Field(
        None,
        description='Required, unless image is present. The body text of the card.',
    )
    image: Optional[GoogleCloudDialogflowV2beta1IntentMessageImage] = Field(
        None, description='Optional. The image for the card.'
    )
    subtitle: Optional[str] = Field(
        None, description='Optional. The subtitle of the card.'
    )
    title: Optional[str] = Field(None, description='Optional. The title of the card.')


class GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCard(BaseModel):
    imageDisplayOptions: Optional[ImageDisplayOptions] = Field(
        None,
        description='Optional. Settings for displaying the image. Applies to every image in items.',
    )
    items: Optional[
        List[
            GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCardBrowseCarouselCardItem
        ]
    ] = Field(
        None,
        description='Required. List of items in the Browse Carousel Card. Minimum of two items, maximum of ten.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageCarouselSelect(BaseModel):
    items: Optional[
        List[GoogleCloudDialogflowV2beta1IntentMessageCarouselSelectItem]
    ] = Field(None, description='Required. Carousel items.')


class GoogleCloudDialogflowV2beta1IntentMessageListSelect(BaseModel):
    items: Optional[List[GoogleCloudDialogflowV2beta1IntentMessageListSelectItem]] = (
        Field(None, description='Required. List items.')
    )
    subtitle: Optional[str] = Field(None, description='Optional. Subtitle of the list.')
    title: Optional[str] = Field(
        None, description='Optional. The overall title of the list.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the card (at most 2000 bytes). At least one of the title, description or media must be set.',
    )
    media: Optional[GoogleCloudDialogflowV2beta1IntentMessageRbmCardContentRbmMedia] = (
        Field(
            None,
            description='Optional. However at least one of the title, description or media must be set. Media (image, GIF or a video) to include in the card.',
        )
    )
    suggestions: Optional[
        List[GoogleCloudDialogflowV2beta1IntentMessageRbmSuggestion]
    ] = Field(None, description='Optional. List of suggestions to include in the card.')
    title: Optional[str] = Field(
        None,
        description='Optional. Title of the card (at most 200 bytes). At least one of the title, description or media must be set.',
    )


class GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard(BaseModel):
    cardContents: Optional[
        List[GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent]
    ] = Field(
        None,
        description='Required. The cards in the carousel. A carousel must have at least 2 cards and at most 10.',
    )
    cardWidth: Optional[CardWidth] = Field(
        None, description='Required. The width of the cards in the carousel.'
    )


class GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCard(BaseModel):
    cardContent: Optional[GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent] = (
        Field(None, description='Required. Card content.')
    )
    cardOrientation: Optional[CardOrientation] = Field(
        None, description='Required. Orientation of the card.'
    )
    thumbnailImageAlignment: Optional[ThumbnailImageAlignment] = Field(
        None,
        description='Required if orientation is horizontal. Image preview alignment for standalone cards with horizontal layout.',
    )


class GoogleLongrunningListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[GoogleLongrunningOperation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class GoogleCloudDialogflowCxV3Environment(BaseModel):
    description: Optional[str] = Field(
        None,
        description='The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the environment. Format: `projects//locations//agents//environments/`.',
    )
    testCasesConfig: Optional[GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig] = (
        Field(
            None,
            description='The test cases config for continuous tests of this environment.',
        )
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Update time of this environment.'
    )
    versionConfigs: Optional[
        List[GoogleCloudDialogflowCxV3EnvironmentVersionConfig]
    ] = Field(
        None,
        description='A list of configurations for flow versions. You should include version configs for all flows that are reachable from `Start Flow` in the agent. Otherwise, an error will be returned.',
    )
    webhookConfig: Optional[GoogleCloudDialogflowCxV3EnvironmentWebhookConfig] = Field(
        None, description='The webhook configuration for this environment.'
    )


class GoogleCloudDialogflowCxV3WebhookResponse(BaseModel):
    fulfillmentResponse: Optional[
        GoogleCloudDialogflowCxV3WebhookResponseFulfillmentResponse
    ] = Field(
        None,
        description='The fulfillment response to send to the user. This field can be omitted by the webhook if it does not intend to send any response to the user.',
    )
    pageInfo: Optional[GoogleCloudDialogflowCxV3PageInfo] = Field(
        None,
        description='Information about page status. This field can be omitted by the webhook if it does not intend to modify page status.',
    )
    payload: Optional[Dict[str, Any]] = Field(
        None, description='Value to append directly to QueryResult.webhook_payloads.'
    )
    sessionInfo: Optional[GoogleCloudDialogflowCxV3SessionInfo] = Field(
        None,
        description='Information about session status. This field can be omitted by the webhook if it does not intend to modify session status.',
    )
    targetFlow: Optional[str] = Field(
        None,
        description='The target flow to transition to. Format: `projects//locations//agents//flows/`.',
    )
    targetPage: Optional[str] = Field(
        None,
        description='The target page to transition to. Format: `projects//locations//agents//flows//pages/`.',
    )


class GoogleCloudDialogflowCxV3beta1DetectIntentRequest(BaseModel):
    outputAudioConfig: Optional[GoogleCloudDialogflowCxV3beta1OutputAudioConfig] = (
        Field(
            None,
            description='Instructs the speech synthesizer how to generate the output audio.',
        )
    )
    queryInput: Optional[GoogleCloudDialogflowCxV3beta1QueryInput] = Field(
        None, description='Required. The input specification.'
    )
    queryParams: Optional[GoogleCloudDialogflowCxV3beta1QueryParameters] = Field(
        None, description='The parameters of this query.'
    )


class GoogleCloudDialogflowCxV3beta1Environment(BaseModel):
    description: Optional[str] = Field(
        None,
        description='The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the environment. Format: `projects//locations//agents//environments/`.',
    )
    testCasesConfig: Optional[
        GoogleCloudDialogflowCxV3beta1EnvironmentTestCasesConfig
    ] = Field(
        None,
        description='The test cases config for continuous tests of this environment.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Update time of this environment.'
    )
    versionConfigs: Optional[
        List[GoogleCloudDialogflowCxV3beta1EnvironmentVersionConfig]
    ] = Field(
        None,
        description='A list of configurations for flow versions. You should include version configs for all flows that are reachable from `Start Flow` in the agent. Otherwise, an error will be returned.',
    )
    webhookConfig: Optional[GoogleCloudDialogflowCxV3beta1EnvironmentWebhookConfig] = (
        Field(None, description='The webhook configuration for this environment.')
    )


class GoogleCloudDialogflowCxV3beta1Experiment(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Creation time of this experiment.'
    )
    definition: Optional[GoogleCloudDialogflowCxV3beta1ExperimentDefinition] = Field(
        None, description='The definition of the experiment.'
    )
    description: Optional[str] = Field(
        None, description='The human-readable description of the experiment.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the experiment (unique in an environment). Limit of 64 characters.',
    )
    endTime: Optional[str] = Field(None, description='End time of this experiment.')
    experimentLength: Optional[str] = Field(
        None,
        description='Maximum number of days to run the experiment. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.',
    )
    lastUpdateTime: Optional[str] = Field(
        None, description='Last update time of this experiment.'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the experiment. Format: projects//locations//agents//environments//experiments/..',
    )
    result: Optional[GoogleCloudDialogflowCxV3beta1ExperimentResult] = Field(
        None, description='Inference result of the experiment.'
    )
    rolloutConfig: Optional[GoogleCloudDialogflowCxV3beta1RolloutConfig] = Field(
        None,
        description='The configuration for auto rollout. If set, there should be exactly two variants in the experiment (control variant being the default version of the flow), the traffic allocation for the non-control variant will gradually increase to 100% when conditions are met, and eventually replace the control variant to become the default version of the flow.',
    )
    rolloutFailureReason: Optional[str] = Field(
        None,
        description='The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.',
    )
    rolloutState: Optional[GoogleCloudDialogflowCxV3beta1RolloutState] = Field(
        None, description='State of the auto rollout process.'
    )
    startTime: Optional[str] = Field(None, description='Start time of this experiment.')
    state: Optional[State3] = Field(
        None,
        description='The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT->RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT->DONE or RUNNING->DONE.',
    )
    variantsHistory: Optional[List[GoogleCloudDialogflowCxV3beta1VariantsHistory]] = (
        Field(None, description='The history of updates to the experiment variants.')
    )


class GoogleCloudDialogflowCxV3beta1FulfillIntentRequest(BaseModel):
    match: Optional[GoogleCloudDialogflowCxV3beta1Match] = Field(
        None, description='The matched intent/event to fulfill.'
    )
    matchIntentRequest: Optional[GoogleCloudDialogflowCxV3beta1MatchIntentRequest] = (
        Field(
            None,
            description='Must be same as the corresponding MatchIntent request, otherwise the behavior is undefined.',
        )
    )
    outputAudioConfig: Optional[GoogleCloudDialogflowCxV3beta1OutputAudioConfig] = (
        Field(
            None,
            description='Instructs the speech synthesizer how to generate output audio.',
        )
    )


class GoogleCloudDialogflowCxV3beta1ListEnvironmentsResponse(BaseModel):
    environments: Optional[List[GoogleCloudDialogflowCxV3beta1Environment]] = Field(
        None,
        description="The list of environments. There will be a maximum number of items returned based on the page_size field in the request. The list may in some cases be empty or contain fewer entries than page_size even if this isn't the last page.",
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDialogflowCxV3beta1ListExperimentsResponse(BaseModel):
    experiments: Optional[List[GoogleCloudDialogflowCxV3beta1Experiment]] = Field(
        None,
        description="The list of experiments. There will be a maximum number of items returned based on the page_size field in the request. The list may in some cases be empty or contain fewer entries than page_size even if this isn't the last page.",
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDialogflowCxV3beta1LookupEnvironmentHistoryResponse(BaseModel):
    environments: Optional[List[GoogleCloudDialogflowCxV3beta1Environment]] = Field(
        None,
        description='Represents a list of snapshots for an environment. Time of the snapshots is stored in `update_time`.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDialogflowCxV3beta1WebhookResponse(BaseModel):
    fulfillmentResponse: Optional[
        GoogleCloudDialogflowCxV3beta1WebhookResponseFulfillmentResponse
    ] = Field(
        None,
        description='The fulfillment response to send to the user. This field can be omitted by the webhook if it does not intend to send any response to the user.',
    )
    pageInfo: Optional[GoogleCloudDialogflowCxV3beta1PageInfo] = Field(
        None,
        description='Information about page status. This field can be omitted by the webhook if it does not intend to modify page status.',
    )
    payload: Optional[Dict[str, Any]] = Field(
        None, description='Value to append directly to QueryResult.webhook_payloads.'
    )
    sessionInfo: Optional[GoogleCloudDialogflowCxV3beta1SessionInfo] = Field(
        None,
        description='Information about session status. This field can be omitted by the webhook if it does not intend to modify session status.',
    )
    targetFlow: Optional[str] = Field(
        None,
        description='The target flow to transition to. Format: `projects//locations//agents//flows/`.',
    )
    targetPage: Optional[str] = Field(
        None,
        description='The target page to transition to. Format: `projects//locations//agents//flows//pages/`.',
    )


class GoogleCloudDialogflowV2IntentMessage(BaseModel):
    basicCard: Optional[GoogleCloudDialogflowV2IntentMessageBasicCard] = Field(
        None, description='The basic card response for Actions on Google.'
    )
    browseCarouselCard: Optional[
        GoogleCloudDialogflowV2IntentMessageBrowseCarouselCard
    ] = Field(None, description='Browse carousel card for Actions on Google.')
    card: Optional[GoogleCloudDialogflowV2IntentMessageCard] = Field(
        None, description='The card response.'
    )
    carouselSelect: Optional[GoogleCloudDialogflowV2IntentMessageCarouselSelect] = (
        Field(None, description='The carousel card response for Actions on Google.')
    )
    image: Optional[GoogleCloudDialogflowV2IntentMessageImage] = Field(
        None, description='The image response.'
    )
    linkOutSuggestion: Optional[
        GoogleCloudDialogflowV2IntentMessageLinkOutSuggestion
    ] = Field(None, description='The link out suggestion chip for Actions on Google.')
    listSelect: Optional[GoogleCloudDialogflowV2IntentMessageListSelect] = Field(
        None, description='The list card response for Actions on Google.'
    )
    mediaContent: Optional[GoogleCloudDialogflowV2IntentMessageMediaContent] = Field(
        None, description='The media content card for Actions on Google.'
    )
    payload: Optional[Dict[str, Any]] = Field(
        None, description='A custom platform-specific response.'
    )
    platform: Optional[Platform] = Field(
        None, description='Optional. The platform that this message is intended for.'
    )
    quickReplies: Optional[GoogleCloudDialogflowV2IntentMessageQuickReplies] = Field(
        None, description='The quick replies response.'
    )
    simpleResponses: Optional[GoogleCloudDialogflowV2IntentMessageSimpleResponses] = (
        Field(
            None, description='The voice and text-only responses for Actions on Google.'
        )
    )
    suggestions: Optional[GoogleCloudDialogflowV2IntentMessageSuggestions] = Field(
        None, description='The suggestion chips for Actions on Google.'
    )
    tableCard: Optional[GoogleCloudDialogflowV2IntentMessageTableCard] = Field(
        None, description='Table card for Actions on Google.'
    )
    text: Optional[GoogleCloudDialogflowV2IntentMessageText] = Field(
        None, description='The text response.'
    )


class GoogleCloudDialogflowV2WebhookResponse(BaseModel):
    followupEventInput: Optional[GoogleCloudDialogflowV2EventInput] = Field(
        None,
        description='Optional. Invokes the supplied events. When this field is set, Dialogflow ignores the `fulfillment_text`, `fulfillment_messages`, and `payload` fields.',
    )
    fulfillmentMessages: Optional[List[GoogleCloudDialogflowV2IntentMessage]] = Field(
        None,
        description='Optional. The rich response messages intended for the end-user. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_messages sent to the integration or API caller.',
    )
    fulfillmentText: Optional[str] = Field(
        None,
        description='Optional. The text response message intended for the end-user. It is recommended to use `fulfillment_messages.text.text[0]` instead. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_text sent to the integration or API caller.',
    )
    outputContexts: Optional[List[GoogleCloudDialogflowV2Context]] = Field(
        None,
        description='Optional. The collection of output contexts that will overwrite currently active contexts for the session and reset their lifespans. When provided, Dialogflow uses this field to populate QueryResult.output_contexts sent to the integration or API caller.',
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description='Optional. This field can be used to pass custom data from your webhook to the integration or API caller. Arbitrary JSON objects are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_payload sent to the integration or API caller. This field is also used by the [Google Assistant integration](https://cloud.google.com/dialogflow/docs/integrations/aog) for rich response messages. See the format definition at [Google Assistant Dialogflow webhook format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json)',
    )
    sessionEntityTypes: Optional[List[GoogleCloudDialogflowV2SessionEntityType]] = (
        Field(
            None,
            description='Optional. Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session. Setting this data from a webhook overwrites the session entity types that have been set using `detectIntent`, `streamingDetectIntent` or SessionEntityType management methods.',
        )
    )
    source: Optional[str] = Field(
        None,
        description='Optional. A custom field used to identify the webhook source. Arbitrary strings are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_source sent to the integration or API caller.',
    )


class GoogleCloudDialogflowV2beta1IntentMessage(BaseModel):
    basicCard: Optional[GoogleCloudDialogflowV2beta1IntentMessageBasicCard] = Field(
        None, description='Displays a basic card for Actions on Google.'
    )
    browseCarouselCard: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageBrowseCarouselCard
    ] = Field(None, description='Browse carousel card for Actions on Google.')
    card: Optional[GoogleCloudDialogflowV2beta1IntentMessageCard] = Field(
        None, description='Displays a card.'
    )
    carouselSelect: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageCarouselSelect
    ] = Field(None, description='Displays a carousel card for Actions on Google.')
    image: Optional[GoogleCloudDialogflowV2beta1IntentMessageImage] = Field(
        None, description='Displays an image.'
    )
    linkOutSuggestion: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageLinkOutSuggestion
    ] = Field(
        None, description='Displays a link out suggestion chip for Actions on Google.'
    )
    listSelect: Optional[GoogleCloudDialogflowV2beta1IntentMessageListSelect] = Field(
        None, description='Displays a list card for Actions on Google.'
    )
    mediaContent: Optional[GoogleCloudDialogflowV2beta1IntentMessageMediaContent] = (
        Field(None, description='The media content card for Actions on Google.')
    )
    payload: Optional[Dict[str, Any]] = Field(
        None, description='A custom platform-specific response.'
    )
    platform: Optional[Platform1] = Field(
        None, description='Optional. The platform that this message is intended for.'
    )
    quickReplies: Optional[GoogleCloudDialogflowV2beta1IntentMessageQuickReplies] = (
        Field(None, description='Displays quick replies.')
    )
    rbmCarouselRichCard: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard
    ] = Field(
        None, description='Rich Business Messaging (RBM) carousel rich card response.'
    )
    rbmStandaloneRichCard: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageRbmStandaloneCard
    ] = Field(
        None, description='Standalone Rich Business Messaging (RBM) rich card response.'
    )
    rbmText: Optional[GoogleCloudDialogflowV2beta1IntentMessageRbmText] = Field(
        None,
        description='Rich Business Messaging (RBM) text response. RBM allows businesses to send enriched and branded versions of SMS. See https://jibe.google.com/business-messaging.',
    )
    simpleResponses: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageSimpleResponses
    ] = Field(
        None, description='Returns a voice or text-only response for Actions on Google.'
    )
    suggestions: Optional[GoogleCloudDialogflowV2beta1IntentMessageSuggestions] = Field(
        None, description='Displays suggestion chips for Actions on Google.'
    )
    tableCard: Optional[GoogleCloudDialogflowV2beta1IntentMessageTableCard] = Field(
        None, description='Table card for Actions on Google.'
    )
    telephonyPlayAudio: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageTelephonyPlayAudio
    ] = Field(None, description='Plays audio from a file in Telephony Gateway.')
    telephonySynthesizeSpeech: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageTelephonySynthesizeSpeech
    ] = Field(None, description='Synthesizes speech in Telephony Gateway.')
    telephonyTransferCall: Optional[
        GoogleCloudDialogflowV2beta1IntentMessageTelephonyTransferCall
    ] = Field(None, description='Transfers the call in Telephony Gateway.')
    text: Optional[GoogleCloudDialogflowV2beta1IntentMessageText] = Field(
        None, description='Returns a text response.'
    )


class GoogleCloudDialogflowV2beta1WebhookResponse(BaseModel):
    endInteraction: Optional[bool] = Field(
        None,
        description='Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false.',
    )
    followupEventInput: Optional[GoogleCloudDialogflowV2beta1EventInput] = Field(
        None,
        description='Optional. Invokes the supplied events. When this field is set, Dialogflow ignores the `fulfillment_text`, `fulfillment_messages`, and `payload` fields.',
    )
    fulfillmentMessages: Optional[List[GoogleCloudDialogflowV2beta1IntentMessage]] = (
        Field(
            None,
            description='Optional. The rich response messages intended for the end-user. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_messages sent to the integration or API caller.',
        )
    )
    fulfillmentText: Optional[str] = Field(
        None,
        description='Optional. The text response message intended for the end-user. It is recommended to use `fulfillment_messages.text.text[0]` instead. When provided, Dialogflow uses this field to populate QueryResult.fulfillment_text sent to the integration or API caller.',
    )
    liveAgentHandoff: Optional[bool] = Field(
        None,
        description='Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false.',
    )
    outputContexts: Optional[List[GoogleCloudDialogflowV2beta1Context]] = Field(
        None,
        description='Optional. The collection of output contexts that will overwrite currently active contexts for the session and reset their lifespans. When provided, Dialogflow uses this field to populate QueryResult.output_contexts sent to the integration or API caller.',
    )
    payload: Optional[Dict[str, Any]] = Field(
        None,
        description='Optional. This field can be used to pass custom data from your webhook to the integration or API caller. Arbitrary JSON objects are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_payload sent to the integration or API caller. This field is also used by the [Google Assistant integration](https://cloud.google.com/dialogflow/docs/integrations/aog) for rich response messages. See the format definition at [Google Assistant Dialogflow webhook format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json)',
    )
    sessionEntityTypes: Optional[
        List[GoogleCloudDialogflowV2beta1SessionEntityType]
    ] = Field(
        None,
        description='Optional. Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session. Setting this data from a webhook overwrites the session entity types that have been set using `detectIntent`, `streamingDetectIntent` or SessionEntityType management methods.',
    )
    source: Optional[str] = Field(
        None,
        description='Optional. A custom field used to identify the webhook source. Arbitrary strings are supported. When provided, Dialogflow uses this field to populate QueryResult.webhook_source sent to the integration or API caller.',
    )


class GoogleCloudDialogflowCxV3DeployFlowResponse(BaseModel):
    deployment: Optional[str] = Field(
        None,
        description='The name of the flow version Deployment. Format: `projects//locations//agents// environments//deployments/`.',
    )
    environment: Optional[GoogleCloudDialogflowCxV3Environment] = Field(
        None, description='The updated environment where the flow is deployed.'
    )


class GoogleCloudDialogflowCxV3beta1DeployFlowResponse(BaseModel):
    deployment: Optional[str] = Field(
        None,
        description='The name of the flow version deployment. Format: `projects//locations//agents// environments//deployments/`.',
    )
    environment: Optional[GoogleCloudDialogflowCxV3beta1Environment] = Field(
        None, description='The updated environment where the flow is deployed.'
    )


class GoogleCloudDialogflowV2Intent(BaseModel):
    action: Optional[str] = Field(
        None,
        description='Optional. The name of the action associated with the intent. Note: The action name must not contain whitespaces.',
    )
    defaultResponsePlatforms: Optional[List[DefaultResponsePlatform]] = Field(
        None,
        description='Optional. The list of platforms for which the first responses will be copied from the messages in PLATFORM_UNSPECIFIED (i.e. default platform).',
    )
    displayName: Optional[str] = Field(
        None, description='Required. The name of this intent.'
    )
    endInteraction: Optional[bool] = Field(
        None,
        description='Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false.',
    )
    events: Optional[List[str]] = Field(
        None,
        description='Optional. The collection of event names that trigger the intent. If the collection of input contexts is not empty, all of the contexts must be present in the active user session for an event to trigger this intent. Event names are limited to 150 characters.',
    )
    followupIntentInfo: Optional[
        List[GoogleCloudDialogflowV2IntentFollowupIntentInfo]
    ] = Field(
        None,
        description='Output only. Read-only. Information about all followup intents that have this intent as a direct or indirect parent. We populate this field only in the output.',
    )
    inputContextNames: Optional[List[str]] = Field(
        None,
        description='Optional. The list of context names required for this intent to be triggered. Format: `projects//agent/sessions/-/contexts/`.',
    )
    isFallback: Optional[bool] = Field(
        None, description='Optional. Indicates whether this is a fallback intent.'
    )
    liveAgentHandoff: Optional[bool] = Field(
        None,
        description='Optional. Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false.',
    )
    messages: Optional[List[GoogleCloudDialogflowV2IntentMessage]] = Field(
        None,
        description='Optional. The collection of rich messages corresponding to the `Response` field in the Dialogflow console.',
    )
    mlDisabled: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether Machine Learning is disabled for the intent. Note: If `ml_disabled` setting is set to true, then this intent is not taken into account during inference in `ML ONLY` match mode. Also, auto-markup in the UI is turned off.',
    )
    name: Optional[str] = Field(
        None,
        description='Optional. The unique identifier of this intent. Required for Intents.UpdateIntent and Intents.BatchUpdateIntents methods. Format: `projects//agent/intents/`.',
    )
    outputContexts: Optional[List[GoogleCloudDialogflowV2Context]] = Field(
        None,
        description='Optional. The collection of contexts that are activated when the intent is matched. Context messages in this collection should not set the parameters field. Setting the `lifespan_count` to 0 will reset the context when the intent is matched. Format: `projects//agent/sessions/-/contexts/`.',
    )
    parameters: Optional[List[GoogleCloudDialogflowV2IntentParameter]] = Field(
        None,
        description='Optional. The collection of parameters associated with the intent.',
    )
    parentFollowupIntentName: Optional[str] = Field(
        None,
        description='Read-only after creation. The unique identifier of the parent intent in the chain of followup intents. You can set this field when creating an intent, for example with CreateIntent or BatchUpdateIntents, in order to make this intent a followup intent. It identifies the parent followup intent. Format: `projects//agent/intents/`.',
    )
    priority: Optional[int] = Field(
        None,
        description='Optional. The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests.',
    )
    resetContexts: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether to delete all contexts in the current session when this intent is matched.',
    )
    rootFollowupIntentName: Optional[str] = Field(
        None,
        description='Output only. Read-only. The unique identifier of the root intent in the chain of followup intents. It identifies the correct followup intents chain for this intent. We populate this field only in the output. Format: `projects//agent/intents/`.',
    )
    trainingPhrases: Optional[List[GoogleCloudDialogflowV2IntentTrainingPhrase]] = (
        Field(
            None,
            description='Optional. The collection of examples that the agent is trained on.',
        )
    )
    webhookState: Optional[WebhookState] = Field(
        None,
        description='Optional. Indicates whether webhooks are enabled for the intent.',
    )


class GoogleCloudDialogflowV2QueryResult(BaseModel):
    action: Optional[str] = Field(
        None, description='The action name from the matched intent.'
    )
    allRequiredParamsPresent: Optional[bool] = Field(
        None,
        description="This field is set to: - `false` if the matched intent has required parameters and not all of the required parameter values have been collected. - `true` if all required parameter values have been collected, or if the matched intent doesn't contain any required parameters.",
    )
    cancelsSlotFilling: Optional[bool] = Field(
        None,
        description='Indicates whether the conversational query triggers a cancellation for slot filling. For more information, see the [cancel slot filling documentation](https://cloud.google.com/dialogflow/es/docs/intents-actions-parameters#cancel).',
    )
    diagnosticInfo: Optional[Dict[str, Any]] = Field(
        None,
        description='Free-form diagnostic information for the associated detect intent request. The fields of this data can change without notice, so you should not write code that depends on its structure. The data may contain: - webhook call latency - webhook errors',
    )
    fulfillmentMessages: Optional[List[GoogleCloudDialogflowV2IntentMessage]] = Field(
        None, description='The collection of rich messages to present to the user.'
    )
    fulfillmentText: Optional[str] = Field(
        None,
        description='The text to be pronounced to the user or shown on the screen. Note: This is a legacy field, `fulfillment_messages` should be preferred.',
    )
    intent: Optional[GoogleCloudDialogflowV2Intent] = Field(
        None,
        description='The intent that matched the conversational query. Some, not all fields are filled in this message, including but not limited to: `name`, `display_name`, `end_interaction` and `is_fallback`.',
    )
    intentDetectionConfidence: Optional[float] = Field(
        None,
        description='The intent detection confidence. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation. If there are `multiple knowledge_answers` messages, this value is set to the greatest `knowledgeAnswers.match_confidence` value in the list.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='The language that was triggered during intent detection. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes.',
    )
    outputContexts: Optional[List[GoogleCloudDialogflowV2Context]] = Field(
        None,
        description='The collection of output contexts. If applicable, `output_contexts.parameters` contains entries with name `.original` containing the original parameter values before the query.',
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="The collection of extracted parameters. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value",
    )
    queryText: Optional[str] = Field(
        None,
        description='The original conversational query text: - If natural language text was provided as input, `query_text` contains a copy of the input. - If natural language speech audio was provided as input, `query_text` contains the speech recognition result. If speech recognizer produced multiple alternatives, a particular one is picked. - If automatic spell correction is enabled, `query_text` will contain the corrected user input.',
    )
    sentimentAnalysisResult: Optional[
        GoogleCloudDialogflowV2SentimentAnalysisResult
    ] = Field(
        None,
        description='The sentiment analysis result, which depends on the `sentiment_analysis_request_config` specified in the request.',
    )
    speechRecognitionConfidence: Optional[float] = Field(
        None,
        description="The Speech recognition confidence between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. The default of 0.0 is a sentinel value indicating that confidence was not set. This field is not guaranteed to be accurate or set. In particular this field isn't set for StreamingDetectIntent since the streaming endpoint has separate confidence estimates per portion of the audio in StreamingRecognitionResult.",
    )
    webhookPayload: Optional[Dict[str, Any]] = Field(
        None,
        description='If the query was fulfilled by a webhook call, this field is set to the value of the `payload` field returned in the webhook response.',
    )
    webhookSource: Optional[str] = Field(
        None,
        description='If the query was fulfilled by a webhook call, this field is set to the value of the `source` field returned in the webhook response.',
    )


class GoogleCloudDialogflowV2WebhookRequest(BaseModel):
    originalDetectIntentRequest: Optional[
        GoogleCloudDialogflowV2OriginalDetectIntentRequest
    ] = Field(
        None,
        description='Optional. The contents of the original request that was passed to `[Streaming]DetectIntent` call.',
    )
    queryResult: Optional[GoogleCloudDialogflowV2QueryResult] = Field(
        None,
        description='The result of the conversational query or event processing. Contains the same value as `[Streaming]DetectIntentResponse.query_result`.',
    )
    responseId: Optional[str] = Field(
        None,
        description='The unique identifier of the response. Contains the same value as `[Streaming]DetectIntentResponse.response_id`.',
    )
    session: Optional[str] = Field(
        None,
        description='The unique identifier of detectIntent request session. Can be used to identify end-user inside webhook implementation. Format: `projects//agent/sessions/`, or `projects//agent/environments//users//sessions/`.',
    )


class GoogleCloudDialogflowV2beta1Intent(BaseModel):
    action: Optional[str] = Field(
        None,
        description='Optional. The name of the action associated with the intent. Note: The action name must not contain whitespaces.',
    )
    defaultResponsePlatforms: Optional[List[DefaultResponsePlatform1]] = Field(
        None,
        description='Optional. The list of platforms for which the first responses will be copied from the messages in PLATFORM_UNSPECIFIED (i.e. default platform).',
    )
    displayName: Optional[str] = Field(
        None, description='Required. The name of this intent.'
    )
    endInteraction: Optional[bool] = Field(
        None,
        description='Optional. Indicates that this intent ends an interaction. Some integrations (e.g., Actions on Google or Dialogflow phone gateway) use this information to close interaction with an end user. Default is false.',
    )
    events: Optional[List[str]] = Field(
        None,
        description='Optional. The collection of event names that trigger the intent. If the collection of input contexts is not empty, all of the contexts must be present in the active user session for an event to trigger this intent. Event names are limited to 150 characters.',
    )
    followupIntentInfo: Optional[
        List[GoogleCloudDialogflowV2beta1IntentFollowupIntentInfo]
    ] = Field(
        None,
        description='Output only. Information about all followup intents that have this intent as a direct or indirect parent. We populate this field only in the output.',
    )
    inputContextNames: Optional[List[str]] = Field(
        None,
        description='Optional. The list of context names required for this intent to be triggered. Formats: - `projects//agent/sessions/-/contexts/` - `projects//locations//agent/sessions/-/contexts/`',
    )
    isFallback: Optional[bool] = Field(
        None, description='Optional. Indicates whether this is a fallback intent.'
    )
    liveAgentHandoff: Optional[bool] = Field(
        None,
        description='Optional. Indicates that a live agent should be brought in to handle the interaction with the user. In most cases, when you set this flag to true, you would also want to set end_interaction to true as well. Default is false.',
    )
    messages: Optional[List[GoogleCloudDialogflowV2beta1IntentMessage]] = Field(
        None,
        description='Optional. The collection of rich messages corresponding to the `Response` field in the Dialogflow console.',
    )
    mlDisabled: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether Machine Learning is disabled for the intent. Note: If `ml_disabled` setting is set to true, then this intent is not taken into account during inference in `ML ONLY` match mode. Also, auto-markup in the UI is turned off.',
    )
    mlEnabled: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether Machine Learning is enabled for the intent. Note: If `ml_enabled` setting is set to false, then this intent is not taken into account during inference in `ML ONLY` match mode. Also, auto-markup in the UI is turned off. DEPRECATED! Please use `ml_disabled` field instead. NOTE: If both `ml_enabled` and `ml_disabled` are either not set or false, then the default value is determined as follows: - Before April 15th, 2018 the default is: ml_enabled = false / ml_disabled = true. - After April 15th, 2018 the default is: ml_enabled = true / ml_disabled = false.',
    )
    name: Optional[str] = Field(
        None,
        description='Optional. The unique identifier of this intent. Required for Intents.UpdateIntent and Intents.BatchUpdateIntents methods. Supported formats: - `projects//agent/intents/` - `projects//locations//agent/intents/`',
    )
    outputContexts: Optional[List[GoogleCloudDialogflowV2beta1Context]] = Field(
        None,
        description='Optional. The collection of contexts that are activated when the intent is matched. Context messages in this collection should not set the parameters field. Setting the `lifespan_count` to 0 will reset the context when the intent is matched. Format: `projects//agent/sessions/-/contexts/`.',
    )
    parameters: Optional[List[GoogleCloudDialogflowV2beta1IntentParameter]] = Field(
        None,
        description='Optional. The collection of parameters associated with the intent.',
    )
    parentFollowupIntentName: Optional[str] = Field(
        None,
        description='Optional. The unique identifier of the parent intent in the chain of followup intents. You can set this field when creating an intent, for example with CreateIntent or BatchUpdateIntents, in order to make this intent a followup intent. It identifies the parent followup intent. Format: `projects//agent/intents/`.',
    )
    priority: Optional[int] = Field(
        None,
        description='Optional. The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests.',
    )
    resetContexts: Optional[bool] = Field(
        None,
        description='Optional. Indicates whether to delete all contexts in the current session when this intent is matched.',
    )
    rootFollowupIntentName: Optional[str] = Field(
        None,
        description='Output only. The unique identifier of the root intent in the chain of followup intents. It identifies the correct followup intents chain for this intent. Format: `projects//agent/intents/`.',
    )
    trainingPhrases: Optional[
        List[GoogleCloudDialogflowV2beta1IntentTrainingPhrase]
    ] = Field(
        None,
        description='Optional. The collection of examples that the agent is trained on.',
    )
    webhookState: Optional[WebhookState] = Field(
        None,
        description='Optional. Indicates whether webhooks are enabled for the intent.',
    )


class GoogleCloudDialogflowV2beta1QueryResult(BaseModel):
    action: Optional[str] = Field(
        None, description='The action name from the matched intent.'
    )
    allRequiredParamsPresent: Optional[bool] = Field(
        None,
        description="This field is set to: - `false` if the matched intent has required parameters and not all of the required parameter values have been collected. - `true` if all required parameter values have been collected, or if the matched intent doesn't contain any required parameters.",
    )
    cancelsSlotFilling: Optional[bool] = Field(
        None,
        description='Indicates whether the conversational query triggers a cancellation for slot filling. For more information, see the [cancel slot filling documentation](https://cloud.google.com/dialogflow/es/docs/intents-actions-parameters#cancel).',
    )
    diagnosticInfo: Optional[Dict[str, Any]] = Field(
        None,
        description='Free-form diagnostic information for the associated detect intent request. The fields of this data can change without notice, so you should not write code that depends on its structure. The data may contain: - webhook call latency - webhook errors',
    )
    fulfillmentMessages: Optional[List[GoogleCloudDialogflowV2beta1IntentMessage]] = (
        Field(
            None, description='The collection of rich messages to present to the user.'
        )
    )
    fulfillmentText: Optional[str] = Field(
        None,
        description='The text to be pronounced to the user or shown on the screen. Note: This is a legacy field, `fulfillment_messages` should be preferred.',
    )
    intent: Optional[GoogleCloudDialogflowV2beta1Intent] = Field(
        None,
        description='The intent that matched the conversational query. Some, not all fields are filled in this message, including but not limited to: `name`, `display_name`, `end_interaction` and `is_fallback`.',
    )
    intentDetectionConfidence: Optional[float] = Field(
        None,
        description='The intent detection confidence. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation. If there are `multiple knowledge_answers` messages, this value is set to the greatest `knowledgeAnswers.match_confidence` value in the list.',
    )
    knowledgeAnswers: Optional[GoogleCloudDialogflowV2beta1KnowledgeAnswers] = Field(
        None,
        description='The result from Knowledge Connector (if any), ordered by decreasing `KnowledgeAnswers.match_confidence`.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='The language that was triggered during intent detection. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes.',
    )
    outputContexts: Optional[List[GoogleCloudDialogflowV2beta1Context]] = Field(
        None,
        description='The collection of output contexts. If applicable, `output_contexts.parameters` contains entries with name `.original` containing the original parameter values before the query.',
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="The collection of extracted parameters. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: - MapKey type: string - MapKey value: parameter name - MapValue type: - If parameter's entity type is a composite entity: map - Else: depending on parameter value type, could be one of string, number, boolean, null, list or map - MapValue value: - If parameter's entity type is a composite entity: map from composite entity property names to property values - Else: parameter value",
    )
    queryText: Optional[str] = Field(
        None,
        description='The original conversational query text: - If natural language text was provided as input, `query_text` contains a copy of the input. - If natural language speech audio was provided as input, `query_text` contains the speech recognition result. If speech recognizer produced multiple alternatives, a particular one is picked. - If automatic spell correction is enabled, `query_text` will contain the corrected user input.',
    )
    sentimentAnalysisResult: Optional[
        GoogleCloudDialogflowV2beta1SentimentAnalysisResult
    ] = Field(
        None,
        description='The sentiment analysis result, which depends on the `sentiment_analysis_request_config` specified in the request.',
    )
    speechRecognitionConfidence: Optional[float] = Field(
        None,
        description="The Speech recognition confidence between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. The default of 0.0 is a sentinel value indicating that confidence was not set. This field is not guaranteed to be accurate or set. In particular this field isn't set for StreamingDetectIntent since the streaming endpoint has separate confidence estimates per portion of the audio in StreamingRecognitionResult.",
    )
    webhookPayload: Optional[Dict[str, Any]] = Field(
        None,
        description='If the query was fulfilled by a webhook call, this field is set to the value of the `payload` field returned in the webhook response.',
    )
    webhookSource: Optional[str] = Field(
        None,
        description='If the query was fulfilled by a webhook call, this field is set to the value of the `source` field returned in the webhook response.',
    )


class GoogleCloudDialogflowV2beta1WebhookRequest(BaseModel):
    alternativeQueryResults: Optional[List[GoogleCloudDialogflowV2beta1QueryResult]] = (
        Field(None, description='Alternative query results from KnowledgeService.')
    )
    originalDetectIntentRequest: Optional[
        GoogleCloudDialogflowV2beta1OriginalDetectIntentRequest
    ] = Field(
        None,
        description='Optional. The contents of the original request that was passed to `[Streaming]DetectIntent` call.',
    )
    queryResult: Optional[GoogleCloudDialogflowV2beta1QueryResult] = Field(
        None,
        description='The result of the conversational query or event processing. Contains the same value as `[Streaming]DetectIntentResponse.query_result`.',
    )
    responseId: Optional[str] = Field(
        None,
        description='The unique identifier of the response. Contains the same value as `[Streaming]DetectIntentResponse.response_id`.',
    )
    session: Optional[str] = Field(
        None,
        description='The unique identifier of detectIntent request session. Can be used to identify end-user inside webhook implementation. Supported formats: - `projects//agent/sessions/, - `projects//locations//agent/sessions/`, - `projects//agent/environments//users//sessions/`, - `projects//locations//agent/environments//users//sessions/`,',
    )


class GoogleCloudDialogflowV2BatchUpdateIntentsResponse(BaseModel):
    intents: Optional[List[GoogleCloudDialogflowV2Intent]] = Field(
        None, description='The collection of updated or created intents.'
    )


class GoogleCloudDialogflowV2beta1BatchUpdateIntentsResponse(BaseModel):
    intents: Optional[List[GoogleCloudDialogflowV2beta1Intent]] = Field(
        None, description='The collection of updated or created intents.'
    )


class GoogleCloudDialogflowCxV3BatchRunTestCasesResponse(BaseModel):
    results: Optional[List[GoogleCloudDialogflowCxV3TestCaseResult]] = Field(
        None,
        description='The test case results. The detailed conversation turns are empty in this response.',
    )


class GoogleCloudDialogflowCxV3ConversationTurn(BaseModel):
    userInput: Optional[GoogleCloudDialogflowCxV3ConversationTurnUserInput] = Field(
        None, description='The user input.'
    )
    virtualAgentOutput: Optional[
        GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput
    ] = Field(None, description='The virtual agent output.')


class GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput(BaseModel):
    currentPage: Optional[GoogleCloudDialogflowCxV3Page] = Field(
        None,
        description='The Page on which the utterance was spoken. Only name and displayName will be set.',
    )
    diagnosticInfo: Optional[Dict[str, Any]] = Field(
        None,
        description='Required. Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.',
    )
    differences: Optional[List[GoogleCloudDialogflowCxV3TestRunDifference]] = Field(
        None,
        description='Output only. If this is part of a result conversation turn, the list of differences between the original run and the replay for this output, if any.',
    )
    sessionParameters: Optional[Dict[str, Any]] = Field(
        None, description='The session parameters available to the bot at this point.'
    )
    status: Optional[GoogleRpcStatus] = Field(
        None,
        description='Response error from the agent in the test result. If set, other output is empty.',
    )
    textResponses: Optional[List[GoogleCloudDialogflowCxV3ResponseMessageText]] = Field(
        None, description='The text responses from the agent for the turn.'
    )
    triggeredIntent: Optional[GoogleCloudDialogflowCxV3Intent] = Field(
        None,
        description='The Intent that triggered the response. Only name and displayName will be set.',
    )


class GoogleCloudDialogflowCxV3EventHandler(BaseModel):
    event: Optional[str] = Field(
        None, description='Required. The name of the event to handle.'
    )
    name: Optional[str] = Field(
        None, description='Output only. The unique identifier of this event handler.'
    )
    targetFlow: Optional[str] = Field(
        None,
        description='The target flow to transition to. Format: `projects//locations//agents//flows/`.',
    )
    targetPage: Optional[str] = Field(
        None,
        description='The target page to transition to. Format: `projects//locations//agents//flows//pages/`.',
    )
    triggerFulfillment: Optional[GoogleCloudDialogflowCxV3Fulfillment] = Field(
        None,
        description='The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.',
    )


class GoogleCloudDialogflowCxV3Form(BaseModel):
    parameters: Optional[List[GoogleCloudDialogflowCxV3FormParameter]] = Field(
        None, description='Parameters to collect from the user.'
    )


class GoogleCloudDialogflowCxV3FormParameter(BaseModel):
    defaultValue: Optional[Any] = Field(
        None,
        description='The default value of an optional parameter. If the parameter is required, the default value will be ignored.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the parameter, unique within the form.',
    )
    entityType: Optional[str] = Field(
        None,
        description='Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types.',
    )
    fillBehavior: Optional[GoogleCloudDialogflowCxV3FormParameterFillBehavior] = Field(
        None, description='Required. Defines fill behavior for the parameter.'
    )
    isList: Optional[bool] = Field(
        None, description='Indicates whether the parameter represents a list of values.'
    )
    redact: Optional[bool] = Field(
        None,
        description='Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.',
    )
    required: Optional[bool] = Field(
        None,
        description='Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes.',
    )


class GoogleCloudDialogflowCxV3FormParameterFillBehavior(BaseModel):
    initialPromptFulfillment: Optional[GoogleCloudDialogflowCxV3Fulfillment] = Field(
        None,
        description='Required. The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.',
    )
    repromptEventHandlers: Optional[List[GoogleCloudDialogflowCxV3EventHandler]] = (
        Field(
            None,
            description="The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can't be found on the parameter, `initial_prompt_fulfillment` will be re-prompted.",
        )
    )


class GoogleCloudDialogflowCxV3Fulfillment(BaseModel):
    conditionalCases: Optional[
        List[GoogleCloudDialogflowCxV3FulfillmentConditionalCases]
    ] = Field(None, description='Conditional cases for this fulfillment.')
    messages: Optional[List[GoogleCloudDialogflowCxV3ResponseMessage]] = Field(
        None, description='The list of rich message responses to present to the user.'
    )
    returnPartialResponses: Optional[bool] = Field(
        None,
        description='Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.',
    )
    setParameterActions: Optional[
        List[GoogleCloudDialogflowCxV3FulfillmentSetParameterAction]
    ] = Field(None, description='Set parameter values before executing the webhook.')
    tag: Optional[str] = Field(
        None,
        description='The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.',
    )
    webhook: Optional[str] = Field(
        None,
        description='The webhook to call. Format: `projects//locations//agents//webhooks/`.',
    )


class GoogleCloudDialogflowCxV3FulfillmentConditionalCases(BaseModel):
    cases: Optional[List[GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase]] = (
        Field(None, description='A list of cascading if-else conditions.')
    )


class GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase(BaseModel):
    caseContent: Optional[
        List[GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent]
    ] = Field(None, description='A list of case content.')
    condition: Optional[str] = Field(
        None,
        description='The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).',
    )


class GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent(BaseModel):
    additionalCases: Optional[GoogleCloudDialogflowCxV3FulfillmentConditionalCases] = (
        Field(None, description='Additional cases to be evaluated.')
    )
    message: Optional[GoogleCloudDialogflowCxV3ResponseMessage] = Field(
        None, description='Returned message.'
    )


class GoogleCloudDialogflowCxV3ImportTestCasesMetadata(BaseModel):
    errors: Optional[List[GoogleCloudDialogflowCxV3TestCaseError]] = Field(
        None, description='Errors for failed test cases.'
    )


class GoogleCloudDialogflowCxV3Page(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the page, unique within the flow.',
    )
    entryFulfillment: Optional[GoogleCloudDialogflowCxV3Fulfillment] = Field(
        None,
        description='The fulfillment to call when the session is entering the page.',
    )
    eventHandlers: Optional[List[GoogleCloudDialogflowCxV3EventHandler]] = Field(
        None,
        description='Handlers associated with the page to handle events such as webhook errors, no match or no input.',
    )
    form: Optional[GoogleCloudDialogflowCxV3Form] = Field(
        None,
        description='The form associated with the page, used for collecting parameters relevant to the page.',
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`.',
    )
    transitionRouteGroups: Optional[List[str]] = Field(
        None,
        description="Ordered list of `TransitionRouteGroups` associated with the page. Transition route groups must be unique within a page. * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes. * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence. Format:`projects//locations//agents//flows//transitionRouteGroups/`.",
    )
    transitionRoutes: Optional[List[GoogleCloudDialogflowCxV3TransitionRoute]] = Field(
        None,
        description='A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow. When we are in a certain page, the TransitionRoutes are evalauted in the following order: * TransitionRoutes defined in the page with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in flow with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in the page with only condition specified. * TransitionRoutes defined in the transition route groups with only condition specified.',
    )


class GoogleCloudDialogflowCxV3RunTestCaseResponse(BaseModel):
    result: Optional[GoogleCloudDialogflowCxV3TestCaseResult] = Field(
        None, description='The result.'
    )


class GoogleCloudDialogflowCxV3TestCase(BaseModel):
    creationTime: Optional[str] = Field(
        None, description='Output only. When the test was created.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters.',
    )
    lastTestResult: Optional[GoogleCloudDialogflowCxV3TestCaseResult] = Field(
        None, description='The latest test result.'
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.',
    )
    notes: Optional[str] = Field(
        None,
        description='Additional freeform notes about the test case. Limit of 400 characters.',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with "#" and has a limit of 30 characters.',
    )
    testCaseConversationTurns: Optional[
        List[GoogleCloudDialogflowCxV3ConversationTurn]
    ] = Field(
        None,
        description='The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.',
    )
    testConfig: Optional[GoogleCloudDialogflowCxV3TestConfig] = Field(
        None, description='Config for the test case.'
    )


class GoogleCloudDialogflowCxV3TestCaseError(BaseModel):
    status: Optional[GoogleRpcStatus] = Field(
        None, description='The status associated with the test case.'
    )
    testCase: Optional[GoogleCloudDialogflowCxV3TestCase] = Field(
        None, description='The test case.'
    )


class GoogleCloudDialogflowCxV3TestCaseResult(BaseModel):
    conversationTurns: Optional[List[GoogleCloudDialogflowCxV3ConversationTurn]] = (
        Field(
            None,
            description='The conversation turns uttered during the test case replay in chronological order.',
        )
    )
    environment: Optional[str] = Field(
        None,
        description='Environment where the test was run. If not set, it indicates the draft environment.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`.',
    )
    testResult: Optional[TestResult] = Field(
        None, description='Whether the test case passed in the agent environment.'
    )
    testTime: Optional[str] = Field(None, description='The time that the test was run.')


class GoogleCloudDialogflowCxV3TransitionRoute(BaseModel):
    condition: Optional[str] = Field(
        None,
        description='The condition to evaluate against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled.',
    )
    intent: Optional[str] = Field(
        None,
        description='The unique identifier of an Intent. Format: `projects//locations//agents//intents/`. Indicates that the transition can only happen when the given intent is matched. At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The unique identifier of this transition route.'
    )
    targetFlow: Optional[str] = Field(
        None,
        description='The target flow to transition to. Format: `projects//locations//agents//flows/`.',
    )
    targetPage: Optional[str] = Field(
        None,
        description='The target page to transition to. Format: `projects//locations//agents//flows//pages/`.',
    )
    triggerFulfillment: Optional[GoogleCloudDialogflowCxV3Fulfillment] = Field(
        None,
        description='The fulfillment to call when the condition is satisfied. At least one of `trigger_fulfillment` and `target` must be specified. When both are defined, `trigger_fulfillment` is executed first.',
    )


class GoogleCloudDialogflowCxV3beta1BatchRunTestCasesResponse(BaseModel):
    results: Optional[List[GoogleCloudDialogflowCxV3beta1TestCaseResult]] = Field(
        None,
        description='The test case results. The detailed conversation turns are empty in this response.',
    )


class GoogleCloudDialogflowCxV3beta1CalculateCoverageResponse(BaseModel):
    agent: Optional[str] = Field(
        None,
        description='The agent to calculate coverage for. Format: `projects//locations//agents/`.',
    )
    intentCoverage: Optional[GoogleCloudDialogflowCxV3beta1IntentCoverage] = Field(
        None, description='Intent coverage.'
    )
    routeGroupCoverage: Optional[
        GoogleCloudDialogflowCxV3beta1TransitionRouteGroupCoverage
    ] = Field(None, description='Transition route group coverage.')
    transitionCoverage: Optional[GoogleCloudDialogflowCxV3beta1TransitionCoverage] = (
        Field(
            None, description='Transition (excluding transition route groups) coverage.'
        )
    )


class GoogleCloudDialogflowCxV3beta1ConversationTurn(BaseModel):
    userInput: Optional[GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput] = (
        Field(None, description='The user input.')
    )
    virtualAgentOutput: Optional[
        GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput
    ] = Field(None, description='The virtual agent output.')


class GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput(BaseModel):
    currentPage: Optional[GoogleCloudDialogflowCxV3beta1Page] = Field(
        None,
        description='The Page on which the utterance was spoken. Only name and displayName will be set.',
    )
    diagnosticInfo: Optional[Dict[str, Any]] = Field(
        None,
        description='Required. Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.',
    )
    differences: Optional[List[GoogleCloudDialogflowCxV3beta1TestRunDifference]] = (
        Field(
            None,
            description='Output only. If this is part of a result conversation turn, the list of differences between the original run and the replay for this output, if any.',
        )
    )
    sessionParameters: Optional[Dict[str, Any]] = Field(
        None, description='The session parameters available to the bot at this point.'
    )
    status: Optional[GoogleRpcStatus] = Field(
        None,
        description='Response error from the agent in the test result. If set, other output is empty.',
    )
    textResponses: Optional[List[GoogleCloudDialogflowCxV3beta1ResponseMessageText]] = (
        Field(None, description='The text responses from the agent for the turn.')
    )
    triggeredIntent: Optional[GoogleCloudDialogflowCxV3beta1Intent] = Field(
        None,
        description='The Intent that triggered the response. Only name and displayName will be set.',
    )


class GoogleCloudDialogflowCxV3beta1DetectIntentResponse(BaseModel):
    allowCancellation: Optional[bool] = Field(
        None,
        description='Indicates whether the partial response can be cancelled when a later response arrives. e.g. if the agent specified some music as partial response, it can be cancelled.',
    )
    outputAudio: Optional[str] = Field(
        None,
        description='The audio data bytes encoded as specified in the request. Note: The output audio is generated based on the values of default platform text responses found in the `query_result.response_messages` field. If multiple default text responses exist, they will be concatenated when generating audio. If no default platform text responses exist, the generated audio content will be empty. In some scenarios, multiple output audio fields may be present in the response structure. In these cases, only the top-most-level audio output has content.',
    )
    outputAudioConfig: Optional[GoogleCloudDialogflowCxV3beta1OutputAudioConfig] = (
        Field(
            None,
            description='The config used by the speech synthesizer to generate the output audio.',
        )
    )
    queryResult: Optional[GoogleCloudDialogflowCxV3beta1QueryResult] = Field(
        None, description='The result of the conversational query.'
    )
    responseId: Optional[str] = Field(
        None,
        description='Output only. The unique identifier of the response. It can be used to locate a response in the training example set or for reporting issues.',
    )
    responseType: Optional[ResponseType] = Field(None, description='Response type.')


class GoogleCloudDialogflowCxV3beta1EventHandler(BaseModel):
    event: Optional[str] = Field(
        None, description='Required. The name of the event to handle.'
    )
    name: Optional[str] = Field(
        None, description='Output only. The unique identifier of this event handler.'
    )
    targetFlow: Optional[str] = Field(
        None,
        description='The target flow to transition to. Format: `projects//locations//agents//flows/`.',
    )
    targetPage: Optional[str] = Field(
        None,
        description='The target page to transition to. Format: `projects//locations//agents//flows//pages/`.',
    )
    triggerFulfillment: Optional[GoogleCloudDialogflowCxV3beta1Fulfillment] = Field(
        None,
        description='The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.',
    )


class GoogleCloudDialogflowCxV3beta1Flow(BaseModel):
    description: Optional[str] = Field(
        None,
        description='The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.',
    )
    displayName: Optional[str] = Field(
        None, description='Required. The human-readable name of the flow.'
    )
    eventHandlers: Optional[List[GoogleCloudDialogflowCxV3beta1EventHandler]] = Field(
        None,
        description="A flow's event handlers serve two purposes: * They are responsible for handling events (e.g. no match, webhook errors) in the flow. * They are inherited by every page's event handlers, which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow. Unlike transition_routes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.",
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the flow. Format: `projects//locations//agents//flows/`.',
    )
    nluSettings: Optional[GoogleCloudDialogflowCxV3beta1NluSettings] = Field(
        None, description='NLU related settings of the flow.'
    )
    transitionRouteGroups: Optional[List[str]] = Field(
        None,
        description="A flow's transition route group serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition route groups. Transition route groups defined in the page have higher priority than those defined in the flow. Format:`projects//locations//agents//flows//transitionRouteGroups/`.",
    )
    transitionRoutes: Optional[List[GoogleCloudDialogflowCxV3beta1TransitionRoute]] = (
        Field(
            None,
            description='A flow\'s transition routes serve two purposes: * They are responsible for matching the user\'s first utterances in the flow. * They are inherited by every page\'s transition routes and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow. TransitionRoutes are evalauted in the following order: * TransitionRoutes with intent specified. * TransitionRoutes with only condition specified. TransitionRoutes with intent specified are inherited by pages in the flow.',
        )
    )


class GoogleCloudDialogflowCxV3beta1Form(BaseModel):
    parameters: Optional[List[GoogleCloudDialogflowCxV3beta1FormParameter]] = Field(
        None, description='Parameters to collect from the user.'
    )


class GoogleCloudDialogflowCxV3beta1FormParameter(BaseModel):
    defaultValue: Optional[Any] = Field(
        None,
        description='The default value of an optional parameter. If the parameter is required, the default value will be ignored.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the parameter, unique within the form.',
    )
    entityType: Optional[str] = Field(
        None,
        description='Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types.',
    )
    fillBehavior: Optional[GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior] = (
        Field(None, description='Required. Defines fill behavior for the parameter.')
    )
    isList: Optional[bool] = Field(
        None, description='Indicates whether the parameter represents a list of values.'
    )
    redact: Optional[bool] = Field(
        None,
        description='Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.',
    )
    required: Optional[bool] = Field(
        None,
        description='Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes.',
    )


class GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior(BaseModel):
    initialPromptFulfillment: Optional[GoogleCloudDialogflowCxV3beta1Fulfillment] = (
        Field(
            None,
            description='Required. The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.',
        )
    )
    repromptEventHandlers: Optional[
        List[GoogleCloudDialogflowCxV3beta1EventHandler]
    ] = Field(
        None,
        description="The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can't be found on the parameter, `initial_prompt_fulfillment` will be re-prompted.",
    )


class GoogleCloudDialogflowCxV3beta1FulfillIntentResponse(BaseModel):
    outputAudio: Optional[str] = Field(
        None,
        description='The audio data bytes encoded as specified in the request. Note: The output audio is generated based on the values of default platform text responses found in the `query_result.response_messages` field. If multiple default text responses exist, they will be concatenated when generating audio. If no default platform text responses exist, the generated audio content will be empty. In some scenarios, multiple output audio fields may be present in the response structure. In these cases, only the top-most-level audio output has content.',
    )
    outputAudioConfig: Optional[GoogleCloudDialogflowCxV3beta1OutputAudioConfig] = (
        Field(
            None,
            description='The config used by the speech synthesizer to generate the output audio.',
        )
    )
    queryResult: Optional[GoogleCloudDialogflowCxV3beta1QueryResult] = Field(
        None, description='The result of the conversational query.'
    )
    responseId: Optional[str] = Field(
        None,
        description='Output only. The unique identifier of the response. It can be used to locate a response in the training example set or for reporting issues.',
    )


class GoogleCloudDialogflowCxV3beta1Fulfillment(BaseModel):
    conditionalCases: Optional[
        List[GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases]
    ] = Field(None, description='Conditional cases for this fulfillment.')
    messages: Optional[List[GoogleCloudDialogflowCxV3beta1ResponseMessage]] = Field(
        None, description='The list of rich message responses to present to the user.'
    )
    returnPartialResponses: Optional[bool] = Field(
        None,
        description='Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.',
    )
    setParameterActions: Optional[
        List[GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterAction]
    ] = Field(None, description='Set parameter values before executing the webhook.')
    tag: Optional[str] = Field(
        None,
        description='The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.',
    )
    webhook: Optional[str] = Field(
        None,
        description='The webhook to call. Format: `projects//locations//agents//webhooks/`.',
    )


class GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases(BaseModel):
    cases: Optional[
        List[GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCase]
    ] = Field(None, description='A list of cascading if-else conditions.')


class GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCase(BaseModel):
    caseContent: Optional[
        List[GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContent]
    ] = Field(None, description='A list of case content.')
    condition: Optional[str] = Field(
        None,
        description='The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).',
    )


class GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContent(
    BaseModel
):
    additionalCases: Optional[
        GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases
    ] = Field(None, description='Additional cases to be evaluated.')
    message: Optional[GoogleCloudDialogflowCxV3beta1ResponseMessage] = Field(
        None, description='Returned message.'
    )


class GoogleCloudDialogflowCxV3beta1ImportTestCasesMetadata(BaseModel):
    errors: Optional[List[GoogleCloudDialogflowCxV3beta1TestCaseError]] = Field(
        None, description='Errors for failed test cases.'
    )


class GoogleCloudDialogflowCxV3beta1ListFlowsResponse(BaseModel):
    flows: Optional[List[GoogleCloudDialogflowCxV3beta1Flow]] = Field(
        None,
        description='The list of flows. There will be a maximum number of items returned based on the page_size field in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDialogflowCxV3beta1ListPagesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    pages: Optional[List[GoogleCloudDialogflowCxV3beta1Page]] = Field(
        None,
        description='The list of pages. There will be a maximum number of items returned based on the page_size field in the request.',
    )


class GoogleCloudDialogflowCxV3beta1ListTestCaseResultsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    testCaseResults: Optional[List[GoogleCloudDialogflowCxV3beta1TestCaseResult]] = (
        Field(None, description='The list of test case results.')
    )


class GoogleCloudDialogflowCxV3beta1ListTestCasesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    testCases: Optional[List[GoogleCloudDialogflowCxV3beta1TestCase]] = Field(
        None,
        description='The list of test cases. There will be a maximum number of items returned based on the page_size field in the request.',
    )


class GoogleCloudDialogflowCxV3beta1ListTransitionRouteGroupsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    transitionRouteGroups: Optional[
        List[GoogleCloudDialogflowCxV3beta1TransitionRouteGroup]
    ] = Field(
        None,
        description="The list of transition route groups. There will be a maximum number of items returned based on the page_size field in the request. The list may in some cases be empty or contain fewer entries than page_size even if this isn't the last page.",
    )


class GoogleCloudDialogflowCxV3beta1MatchIntentResponse(BaseModel):
    currentPage: Optional[GoogleCloudDialogflowCxV3beta1Page] = Field(
        None,
        description='The current Page. Some, not all fields are filled in this message, including but not limited to `name` and `display_name`.',
    )
    matches: Optional[List[GoogleCloudDialogflowCxV3beta1Match]] = Field(
        None,
        description='Match results, if more than one, ordered descendingly by the confidence we have that the particular intent matches the query.',
    )
    text: Optional[str] = Field(
        None,
        description='If natural language text was provided as input, this field will contain a copy of the text.',
    )
    transcript: Optional[str] = Field(
        None,
        description='If natural language speech audio was provided as input, this field will contain the transcript for the audio.',
    )
    triggerEvent: Optional[str] = Field(
        None,
        description='If an event was provided as input, this field will contain a copy of the event name.',
    )
    triggerIntent: Optional[str] = Field(
        None,
        description='If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`.',
    )


class GoogleCloudDialogflowCxV3beta1Page(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the page, unique within the flow.',
    )
    entryFulfillment: Optional[GoogleCloudDialogflowCxV3beta1Fulfillment] = Field(
        None,
        description='The fulfillment to call when the session is entering the page.',
    )
    eventHandlers: Optional[List[GoogleCloudDialogflowCxV3beta1EventHandler]] = Field(
        None,
        description='Handlers associated with the page to handle events such as webhook errors, no match or no input.',
    )
    form: Optional[GoogleCloudDialogflowCxV3beta1Form] = Field(
        None,
        description='The form associated with the page, used for collecting parameters relevant to the page.',
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`.',
    )
    transitionRouteGroups: Optional[List[str]] = Field(
        None,
        description="Ordered list of `TransitionRouteGroups` associated with the page. Transition route groups must be unique within a page. * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes. * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence. Format:`projects//locations//agents//flows//transitionRouteGroups/`.",
    )
    transitionRoutes: Optional[List[GoogleCloudDialogflowCxV3beta1TransitionRoute]] = (
        Field(
            None,
            description='A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow. When we are in a certain page, the TransitionRoutes are evalauted in the following order: * TransitionRoutes defined in the page with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in flow with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in the page with only condition specified. * TransitionRoutes defined in the transition route groups with only condition specified.',
        )
    )


class GoogleCloudDialogflowCxV3beta1QueryResult(BaseModel):
    currentPage: Optional[GoogleCloudDialogflowCxV3beta1Page] = Field(
        None,
        description='The current Page. Some, not all fields are filled in this message, including but not limited to `name` and `display_name`.',
    )
    diagnosticInfo: Optional[Dict[str, Any]] = Field(
        None,
        description='The free-form diagnostic info. For example, this field could contain webhook call latency. The fields of this data can change without notice, so you should not write code that depends on its structure. One of the fields is called "Alternative Matched Intents", which may aid with debugging. The following describes these intent results: - The list is empty if no intent was matched to end-user input. - Only intents that are referenced in the currently active flow are included. - The matched intent is included. - Other intents that could have matched end-user input, but did not match because they are referenced by intent routes that are out of [scope](https://cloud.google.com/dialogflow/cx/docs/concept/handler#scope), are included. - Other intents referenced by intent routes in scope that matched end-user input, but had a lower confidence score.',
    )
    dtmf: Optional[GoogleCloudDialogflowCxV3beta1DtmfInput] = Field(
        None,
        description='If a DTMF was provided as input, this field will contain a copy of the DtmfInput.',
    )
    intent: Optional[GoogleCloudDialogflowCxV3beta1Intent] = Field(
        None,
        description='The Intent that matched the conversational query. Some, not all fields are filled in this message, including but not limited to: `name` and `display_name`. This field is deprecated, please use QueryResult.match instead.',
    )
    intentDetectionConfidence: Optional[float] = Field(
        None,
        description='The intent detection confidence. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation. This field is deprecated, please use QueryResult.match instead.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='The language that was triggered during intent detection. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.',
    )
    match: Optional[GoogleCloudDialogflowCxV3beta1Match] = Field(
        None, description='Intent match result, could be an intent or an event.'
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description="The collected session parameters. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.",
    )
    responseMessages: Optional[List[GoogleCloudDialogflowCxV3beta1ResponseMessage]] = (
        Field(
            None,
            description='The list of rich messages returned to the client. Responses vary from simple text messages to more sophisticated, structured payloads used to drive complex logic.',
        )
    )
    sentimentAnalysisResult: Optional[
        GoogleCloudDialogflowCxV3beta1SentimentAnalysisResult
    ] = Field(
        None,
        description='The sentiment analyss result, which depends on `analyze_query_text_sentiment`, specified in the request.',
    )
    text: Optional[str] = Field(
        None,
        description='If natural language text was provided as input, this field will contain a copy of the text.',
    )
    transcript: Optional[str] = Field(
        None,
        description='If natural language speech audio was provided as input, this field will contain the transcript for the audio.',
    )
    triggerEvent: Optional[str] = Field(
        None,
        description='If an event was provided as input, this field will contain the name of the event.',
    )
    triggerIntent: Optional[str] = Field(
        None,
        description='If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`.',
    )
    webhookPayloads: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="The list of webhook payload in WebhookResponse.payload, in the order of call sequence. If some webhook call fails or doesn't return any payload, an empty `Struct` would be used instead.",
    )
    webhookStatuses: Optional[List[GoogleRpcStatus]] = Field(
        None,
        description='The list of webhook call status in the order of call sequence.',
    )


class GoogleCloudDialogflowCxV3beta1RunTestCaseResponse(BaseModel):
    result: Optional[GoogleCloudDialogflowCxV3beta1TestCaseResult] = Field(
        None, description='The result.'
    )


class GoogleCloudDialogflowCxV3beta1TestCase(BaseModel):
    creationTime: Optional[str] = Field(
        None, description='Output only. When the test was created.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters.',
    )
    lastTestResult: Optional[GoogleCloudDialogflowCxV3beta1TestCaseResult] = Field(
        None, description='The latest test result.'
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.',
    )
    notes: Optional[str] = Field(
        None,
        description='Additional freeform notes about the test case. Limit of 400 characters.',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with "#" and has a limit of 30 characters.',
    )
    testCaseConversationTurns: Optional[
        List[GoogleCloudDialogflowCxV3beta1ConversationTurn]
    ] = Field(
        None,
        description='The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.',
    )
    testConfig: Optional[GoogleCloudDialogflowCxV3beta1TestConfig] = Field(
        None, description='Config for the test case.'
    )


class GoogleCloudDialogflowCxV3beta1TestCaseError(BaseModel):
    status: Optional[GoogleRpcStatus] = Field(
        None, description='The status associated with the test case.'
    )
    testCase: Optional[GoogleCloudDialogflowCxV3beta1TestCase] = Field(
        None, description='The test case.'
    )


class GoogleCloudDialogflowCxV3beta1TestCaseResult(BaseModel):
    conversationTurns: Optional[
        List[GoogleCloudDialogflowCxV3beta1ConversationTurn]
    ] = Field(
        None,
        description='The conversation turns uttered during the test case replay in chronological order.',
    )
    environment: Optional[str] = Field(
        None,
        description='Environment where the test was run. If not set, it indicates the draft environment.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`.',
    )
    testResult: Optional[TestResult] = Field(
        None, description='Whether the test case passed in the agent environment.'
    )
    testTime: Optional[str] = Field(None, description='The time that the test was run.')


class GoogleCloudDialogflowCxV3beta1TransitionCoverage(BaseModel):
    coverageScore: Optional[float] = Field(
        None, description='The percent of transitions in the agent that are covered.'
    )
    transitions: Optional[
        List[GoogleCloudDialogflowCxV3beta1TransitionCoverageTransition]
    ] = Field(None, description='The list of Transitions present in the agent.')


class GoogleCloudDialogflowCxV3beta1TransitionCoverageTransition(BaseModel):
    covered: Optional[bool] = Field(
        None,
        description="Whether or not the transition is covered by at least one of the agent's test cases.",
    )
    eventHandler: Optional[GoogleCloudDialogflowCxV3beta1EventHandler] = Field(
        None, description='Event handler.'
    )
    index: Optional[int] = Field(
        None,
        description='The index of a transition in the transition list. Starting from 0.',
    )
    source: Optional[GoogleCloudDialogflowCxV3beta1TransitionCoverageTransitionNode] = (
        Field(None, description='The start node of a transition.')
    )
    target: Optional[GoogleCloudDialogflowCxV3beta1TransitionCoverageTransitionNode] = (
        Field(None, description='The end node of a transition.')
    )
    transitionRoute: Optional[GoogleCloudDialogflowCxV3beta1TransitionRoute] = Field(
        None, description='Intent route or condition route.'
    )


class GoogleCloudDialogflowCxV3beta1TransitionCoverageTransitionNode(BaseModel):
    flow: Optional[GoogleCloudDialogflowCxV3beta1Flow] = Field(
        None,
        description='Indicates a transition to a Flow. Only some fields such as name and displayname will be set.',
    )
    page: Optional[GoogleCloudDialogflowCxV3beta1Page] = Field(
        None,
        description='Indicates a transition to a Page. Only some fields such as name and displayname will be set.',
    )


class GoogleCloudDialogflowCxV3beta1TransitionRoute(BaseModel):
    condition: Optional[str] = Field(
        None,
        description='The condition to evaluate against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled.',
    )
    intent: Optional[str] = Field(
        None,
        description='The unique identifier of an Intent. Format: `projects//locations//agents//intents/`. Indicates that the transition can only happen when the given intent is matched. At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The unique identifier of this transition route.'
    )
    targetFlow: Optional[str] = Field(
        None,
        description='The target flow to transition to. Format: `projects//locations//agents//flows/`.',
    )
    targetPage: Optional[str] = Field(
        None,
        description='The target page to transition to. Format: `projects//locations//agents//flows//pages/`.',
    )
    triggerFulfillment: Optional[GoogleCloudDialogflowCxV3beta1Fulfillment] = Field(
        None,
        description='The fulfillment to call when the condition is satisfied. At least one of `trigger_fulfillment` and `target` must be specified. When both are defined, `trigger_fulfillment` is executed first.',
    )


class GoogleCloudDialogflowCxV3beta1TransitionRouteGroup(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='Required. The human-readable name of the transition route group, unique within the flow. The display name can be no longer than 30 characters.',
    )
    name: Optional[str] = Field(
        None,
        description='The unique identifier of the transition route group. TransitionRouteGroups.CreateTransitionRouteGroup populates the name automatically. Format: `projects//locations//agents//flows//transitionRouteGroups/`.',
    )
    transitionRoutes: Optional[List[GoogleCloudDialogflowCxV3beta1TransitionRoute]] = (
        Field(
            None,
            description='Transition routes associated with the TransitionRouteGroup.',
        )
    )


class GoogleCloudDialogflowCxV3beta1TransitionRouteGroupCoverage(BaseModel):
    coverageScore: Optional[float] = Field(
        None,
        description='The percent of transition routes in all the transition route groups that are covered.',
    )
    coverages: Optional[
        List[GoogleCloudDialogflowCxV3beta1TransitionRouteGroupCoverageCoverage]
    ] = Field(None, description='Transition route group coverages.')


class GoogleCloudDialogflowCxV3beta1TransitionRouteGroupCoverageCoverage(BaseModel):
    coverageScore: Optional[float] = Field(
        None,
        description='The percent of transition routes in the transition route group that are covered.',
    )
    routeGroup: Optional[GoogleCloudDialogflowCxV3beta1TransitionRouteGroup] = Field(
        None,
        description='Transition route group metadata. Only name and displayName will be set.',
    )
    transitions: Optional[
        List[
            GoogleCloudDialogflowCxV3beta1TransitionRouteGroupCoverageCoverageTransition
        ]
    ] = Field(
        None,
        description='The list of transition routes and coverage in the transition route group.',
    )


class GoogleCloudDialogflowCxV3beta1TransitionRouteGroupCoverageCoverageTransition(
    BaseModel
):
    covered: Optional[bool] = Field(
        None,
        description="Whether or not the transition route is covered by at least one of the agent's test cases.",
    )
    transitionRoute: Optional[GoogleCloudDialogflowCxV3beta1TransitionRoute] = Field(
        None, description='Intent route or condition route.'
    )


GoogleCloudDialogflowCxV3BatchRunTestCasesResponse.model_rebuild()
GoogleCloudDialogflowCxV3ConversationTurn.model_rebuild()
GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.model_rebuild()
GoogleCloudDialogflowCxV3EventHandler.model_rebuild()
GoogleCloudDialogflowCxV3Form.model_rebuild()
GoogleCloudDialogflowCxV3FormParameter.model_rebuild()
GoogleCloudDialogflowCxV3FormParameterFillBehavior.model_rebuild()
GoogleCloudDialogflowCxV3Fulfillment.model_rebuild()
GoogleCloudDialogflowCxV3FulfillmentConditionalCases.model_rebuild()
GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.model_rebuild()
GoogleCloudDialogflowCxV3ImportTestCasesMetadata.model_rebuild()
GoogleCloudDialogflowCxV3Page.model_rebuild()
GoogleCloudDialogflowCxV3RunTestCaseResponse.model_rebuild()
GoogleCloudDialogflowCxV3TestCase.model_rebuild()
GoogleCloudDialogflowCxV3beta1BatchRunTestCasesResponse.model_rebuild()
GoogleCloudDialogflowCxV3beta1CalculateCoverageResponse.model_rebuild()
GoogleCloudDialogflowCxV3beta1ConversationTurn.model_rebuild()
GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput.model_rebuild()
GoogleCloudDialogflowCxV3beta1DetectIntentResponse.model_rebuild()
GoogleCloudDialogflowCxV3beta1EventHandler.model_rebuild()
GoogleCloudDialogflowCxV3beta1Flow.model_rebuild()
GoogleCloudDialogflowCxV3beta1Form.model_rebuild()
GoogleCloudDialogflowCxV3beta1FormParameter.model_rebuild()
GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior.model_rebuild()
GoogleCloudDialogflowCxV3beta1FulfillIntentResponse.model_rebuild()
GoogleCloudDialogflowCxV3beta1Fulfillment.model_rebuild()
GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases.model_rebuild()
GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCase.model_rebuild()
GoogleCloudDialogflowCxV3beta1ImportTestCasesMetadata.model_rebuild()
GoogleCloudDialogflowCxV3beta1ListPagesResponse.model_rebuild()
GoogleCloudDialogflowCxV3beta1ListTestCaseResultsResponse.model_rebuild()
GoogleCloudDialogflowCxV3beta1ListTestCasesResponse.model_rebuild()
GoogleCloudDialogflowCxV3beta1ListTransitionRouteGroupsResponse.model_rebuild()
GoogleCloudDialogflowCxV3beta1MatchIntentResponse.model_rebuild()
GoogleCloudDialogflowCxV3beta1Page.model_rebuild()
GoogleCloudDialogflowCxV3beta1RunTestCaseResponse.model_rebuild()
GoogleCloudDialogflowCxV3beta1TestCase.model_rebuild()
GoogleCloudDialogflowCxV3beta1TransitionCoverage.model_rebuild()
GoogleCloudDialogflowCxV3beta1TransitionCoverageTransition.model_rebuild()
GoogleCloudDialogflowCxV3beta1TransitionRouteGroupCoverage.model_rebuild()
GoogleCloudDialogflowCxV3beta1TransitionRouteGroupCoverageCoverage.model_rebuild()
